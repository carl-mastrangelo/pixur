// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Config describes server configuration.
type Config struct {
	// Name of the database, like "mysql"
	DbName   string `protobuf:"bytes,1,opt,name=db_name,json=dbName" json:"db_name,omitempty"`
	DbConfig string `protobuf:"bytes,2,opt,name=db_config,json=dbConfig" json:"db_config,omitempty"`
	// listen network (e.g. "tcp")
	ListenNetwork string `protobuf:"bytes,3,opt,name=listen_network,json=listenNetwork" json:"listen_network,omitempty"`
	// listen address (e.g. "localhost:1234")
	ListenAddress string `protobuf:"bytes,9,opt,name=listen_address,json=listenAddress" json:"listen_address,omitempty"`
	// Path to look for pictures.
	PixPath string `protobuf:"bytes,4,opt,name=pix_path,json=pixPath" json:"pix_path,omitempty"`
	// session stuff
	TokenSecret           string `protobuf:"bytes,5,opt,name=token_secret,json=tokenSecret" json:"token_secret,omitempty"`
	SessionPrivateKeyPath string `protobuf:"bytes,6,opt,name=session_private_key_path,json=sessionPrivateKeyPath" json:"session_private_key_path,omitempty"`
	SessionPublicKeyPath  string `protobuf:"bytes,7,opt,name=session_public_key_path,json=sessionPublicKeyPath" json:"session_public_key_path,omitempty"`
	// If the site is access through insecure connections.
	// Affects cookies.
	Insecure bool `protobuf:"varint,8,opt,name=insecure" json:"insecure,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *Config) GetDbConfig() string {
	if m != nil {
		return m.DbConfig
	}
	return ""
}

func (m *Config) GetListenNetwork() string {
	if m != nil {
		return m.ListenNetwork
	}
	return ""
}

func (m *Config) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

func (m *Config) GetPixPath() string {
	if m != nil {
		return m.PixPath
	}
	return ""
}

func (m *Config) GetTokenSecret() string {
	if m != nil {
		return m.TokenSecret
	}
	return ""
}

func (m *Config) GetSessionPrivateKeyPath() string {
	if m != nil {
		return m.SessionPrivateKeyPath
	}
	return ""
}

func (m *Config) GetSessionPublicKeyPath() string {
	if m != nil {
		return m.SessionPublicKeyPath
	}
	return ""
}

func (m *Config) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func init() {
	proto.RegisterType((*Config)(nil), "pixur.Config")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4f, 0x03, 0x21,
	0x14, 0x87, 0x73, 0xd5, 0xde, 0x71, 0x58, 0x1d, 0x88, 0xa6, 0xa8, 0x4b, 0x35, 0x31, 0xe9, 0xe4,
	0x62, 0x8c, 0xb3, 0x3a, 0x9a, 0x34, 0x4d, 0xdd, 0x5c, 0x08, 0x1c, 0x4f, 0x4b, 0xae, 0x05, 0x02,
	0x9c, 0x5e, 0xff, 0x51, 0xff, 0x1e, 0x93, 0x47, 0x5b, 0x3b, 0xf2, 0xfd, 0xbe, 0x8f, 0xe1, 0xd1,
	0x51, 0xe3, 0xec, 0xa7, 0xf9, 0xba, 0xf7, 0xc1, 0x25, 0xc7, 0x86, 0xde, 0xf4, 0x5d, 0xb8, 0xfd,
	0x1d, 0xd0, 0xf2, 0x15, 0x39, 0x1b, 0xd3, 0x4a, 0x2b, 0x61, 0xe5, 0x1a, 0x78, 0x31, 0x29, 0xa6,
	0xf5, 0xa2, 0xd4, 0x6a, 0x26, 0xd7, 0xc0, 0xae, 0x69, 0xad, 0x95, 0xc8, 0x35, 0x1f, 0xe0, 0x44,
	0xb4, 0xda, 0x56, 0x77, 0xf4, 0x6c, 0x65, 0x62, 0x02, 0x2b, 0x2c, 0xa4, 0x1f, 0x17, 0x5a, 0x7e,
	0x84, 0xc6, 0x69, 0xa6, 0xb3, 0x0c, 0x0f, 0x34, 0xa9, 0x75, 0x80, 0x18, 0x79, 0x7d, 0xa8, 0x3d,
	0x67, 0xc8, 0x2e, 0x29, 0xf1, 0xa6, 0x17, 0x5e, 0xa6, 0x25, 0x3f, 0x46, 0xa1, 0xf2, 0xa6, 0x9f,
	0xcb, 0xb4, 0x64, 0x37, 0x74, 0x94, 0x5c, 0x0b, 0x56, 0x44, 0x68, 0x02, 0x24, 0x3e, 0xc4, 0xf9,
	0x04, 0xd9, 0x3b, 0x22, 0xf6, 0x44, 0x79, 0x84, 0x18, 0x8d, 0xb3, 0xc2, 0x07, 0xf3, 0x2d, 0x13,
	0x88, 0x16, 0x36, 0xf9, 0xb7, 0x12, 0xf5, 0x8b, 0xed, 0x3e, 0xcf, 0xf3, 0x1b, 0x6c, 0xf0, 0xef,
	0x47, 0x3a, 0xde, 0x87, 0x9d, 0x5a, 0x99, 0xe6, 0xbf, 0xab, 0xb0, 0x3b, 0xdf, 0x75, 0xb8, 0xee,
	0xb2, 0x2b, 0x4a, 0x8c, 0x8d, 0xd0, 0x74, 0x01, 0x38, 0x99, 0x14, 0x53, 0xb2, 0xd8, 0xbf, 0x5f,
	0xc8, 0x47, 0x99, 0x2f, 0xa6, 0x4a, 0x3c, 0xf8, 0xc3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xde,
	0x42, 0xfb, 0x52, 0x80, 0x01, 0x00, 0x00,
}
