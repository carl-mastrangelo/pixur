// Code generated by protoc-gen-go.
// source: pixur.proto
// DO NOT EDIT!

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	pixur.proto

It has these top-level messages:
	Pic
	PicIdent
	AnimationInfo
	Tag
	PicTag
	PicComment
	User
	UserToken
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Pic_Mime int32

const (
	Pic_UNKNOWN Pic_Mime = 0
	Pic_JPEG    Pic_Mime = 1
	Pic_GIF     Pic_Mime = 2
	Pic_PNG     Pic_Mime = 3
	Pic_WEBM    Pic_Mime = 4
)

var Pic_Mime_name = map[int32]string{
	0: "UNKNOWN",
	1: "JPEG",
	2: "GIF",
	3: "PNG",
	4: "WEBM",
}
var Pic_Mime_value = map[string]int32{
	"UNKNOWN": 0,
	"JPEG":    1,
	"GIF":     2,
	"PNG":     3,
	"WEBM":    4,
}

func (x Pic_Mime) String() string {
	return proto.EnumName(Pic_Mime_name, int32(x))
}
func (Pic_Mime) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Pic_DeletionStatus_Reason int32

const (
	// The reason is not know, due to limitations of proto
	Pic_DeletionStatus_UNKNOWN Pic_DeletionStatus_Reason = 0
	// No specific reason.  This is a catch-all reason.
	Pic_DeletionStatus_NONE Pic_DeletionStatus_Reason = 1
	// The pic is in violation of the rules.
	Pic_DeletionStatus_RULE_VIOLATION Pic_DeletionStatus_Reason = 2
)

var Pic_DeletionStatus_Reason_name = map[int32]string{
	0: "UNKNOWN",
	1: "NONE",
	2: "RULE_VIOLATION",
}
var Pic_DeletionStatus_Reason_value = map[string]int32{
	"UNKNOWN":        0,
	"NONE":           1,
	"RULE_VIOLATION": 2,
}

func (x Pic_DeletionStatus_Reason) String() string {
	return proto.EnumName(Pic_DeletionStatus_Reason_name, int32(x))
}
func (Pic_DeletionStatus_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

type PicIdent_Type int32

const (
	PicIdent_UNKNOWN PicIdent_Type = 0
	PicIdent_SHA256  PicIdent_Type = 1
	PicIdent_SHA1    PicIdent_Type = 2
	PicIdent_MD5     PicIdent_Type = 3
	PicIdent_DCT_0   PicIdent_Type = 4
)

var PicIdent_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "SHA256",
	2: "SHA1",
	3: "MD5",
	4: "DCT_0",
}
var PicIdent_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"SHA256":  1,
	"SHA1":    2,
	"MD5":     3,
	"DCT_0":   4,
}

func (x PicIdent_Type) String() string {
	return proto.EnumName(PicIdent_Type_name, int32(x))
}
func (PicIdent_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type User_Capability int32

const (
	User_UNKNOWN User_Capability = 0
	// Can this user create and upload pictures
	User_PIC_CREATE User_Capability = 1
	// Can this user view the actual image data (grants pic token)
	User_PIC_READ User_Capability = 2
	// Can this user perform general pic index queries?
	User_PIC_INDEX User_Capability = 3
	// Can this user soft delete a pic?
	User_PIC_SOFT_DELETE User_Capability = 5
	// Can this user hard delete a pic?
	User_PIC_HARD_DELETE User_Capability = 6
	// Can this user purge a pic?
	User_PIC_PURGE User_Capability = 7
	// Can this user increment the pic view counter?
	User_PIC_UPDATE_VIEW_COUNTER User_Capability = 8
	// Can this user add tags and pic tags?
	User_PIC_TAG_CREATE User_Capability = 9
	// Can this user create comments.
	User_PIC_COMMENT_CREATE User_Capability = 10
	// Can this user create other users?
	User_USER_CREATE User_Capability = 4
)

var User_Capability_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "PIC_CREATE",
	2:  "PIC_READ",
	3:  "PIC_INDEX",
	5:  "PIC_SOFT_DELETE",
	6:  "PIC_HARD_DELETE",
	7:  "PIC_PURGE",
	8:  "PIC_UPDATE_VIEW_COUNTER",
	9:  "PIC_TAG_CREATE",
	10: "PIC_COMMENT_CREATE",
	4:  "USER_CREATE",
}
var User_Capability_value = map[string]int32{
	"UNKNOWN":                 0,
	"PIC_CREATE":              1,
	"PIC_READ":                2,
	"PIC_INDEX":               3,
	"PIC_SOFT_DELETE":         5,
	"PIC_HARD_DELETE":         6,
	"PIC_PURGE":               7,
	"PIC_UPDATE_VIEW_COUNTER": 8,
	"PIC_TAG_CREATE":          9,
	"PIC_COMMENT_CREATE":      10,
	"USER_CREATE":             4,
}

func (x User_Capability) String() string {
	return proto.EnumName(User_Capability_name, int32(x))
}
func (User_Capability) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type Pic struct {
	PicId      int64                       `protobuf:"varint,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	FileSize   int64                       `protobuf:"varint,2,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Mime       Pic_Mime                    `protobuf:"varint,3,opt,name=mime,enum=pixur.Pic_Mime" json:"mime,omitempty"`
	Width      int64                       `protobuf:"varint,4,opt,name=width" json:"width,omitempty"`
	Height     int64                       `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	CreatedTs  *google_protobuf1.Timestamp `protobuf:"bytes,10,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
	ModifiedTs *google_protobuf1.Timestamp `protobuf:"bytes,11,opt,name=modified_ts,json=modifiedTs" json:"modified_ts,omitempty"`
	// If present, the pic is on the path to removal.  When the pic is marked
	// for deletion, it is delisted from normal indexing operations.  When the
	// pic is actually "deleted" only the pic object is removed.
	DeletionStatus *Pic_DeletionStatus `protobuf:"bytes,12,opt,name=deletion_status,json=deletionStatus" json:"deletion_status,omitempty"`
	// Only present on animated images.
	AnimationInfo *AnimationInfo    `protobuf:"bytes,13,opt,name=animation_info,json=animationInfo" json:"animation_info,omitempty"`
	ViewCount     int64             `protobuf:"varint,14,opt,name=view_count,json=viewCount" json:"view_count,omitempty"`
	Source        []*Pic_FileSource `protobuf:"bytes,15,rep,name=source" json:"source,omitempty"`
	FileName      []string          `protobuf:"bytes,16,rep,name=file_name,json=fileName" json:"file_name,omitempty"`
}

func (m *Pic) Reset()                    { *m = Pic{} }
func (m *Pic) String() string            { return proto.CompactTextString(m) }
func (*Pic) ProtoMessage()               {}
func (*Pic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pic) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *Pic) GetModifiedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *Pic) GetDeletionStatus() *Pic_DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return nil
}

func (m *Pic) GetAnimationInfo() *AnimationInfo {
	if m != nil {
		return m.AnimationInfo
	}
	return nil
}

func (m *Pic) GetSource() []*Pic_FileSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type Pic_DeletionStatus struct {
	// Represents when this Pic was marked for deletion
	MarkedDeletedTs *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=marked_deleted_ts,json=markedDeletedTs" json:"marked_deleted_ts,omitempty"`
	// Represents when this picture will be auto deleted.  Note that the Pic
	// may exist for a short period after this time.  (may be absent)
	PendingDeletedTs *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=pending_deleted_ts,json=pendingDeletedTs" json:"pending_deleted_ts,omitempty"`
	// Determines when Pic was actually deleted.  (present after the Pic is
	// hard deleted, a.k.a purging)
	ActualDeletedTs *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=actual_deleted_ts,json=actualDeletedTs" json:"actual_deleted_ts,omitempty"`
	// Gives an explanation for why this pic was removed.
	Details string `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
	// The reason the pic was removed.
	Reason Pic_DeletionStatus_Reason `protobuf:"varint,5,opt,name=reason,enum=pixur.Pic_DeletionStatus_Reason" json:"reason,omitempty"`
	// Determines if this pic can be undeleted if re uploaded.  Currently the
	// only reason is due to disk space concerns.
	Temporary bool `protobuf:"varint,6,opt,name=temporary" json:"temporary,omitempty"`
}

func (m *Pic_DeletionStatus) Reset()                    { *m = Pic_DeletionStatus{} }
func (m *Pic_DeletionStatus) String() string            { return proto.CompactTextString(m) }
func (*Pic_DeletionStatus) ProtoMessage()               {}
func (*Pic_DeletionStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Pic_DeletionStatus) GetMarkedDeletedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.MarkedDeletedTs
	}
	return nil
}

func (m *Pic_DeletionStatus) GetPendingDeletedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.PendingDeletedTs
	}
	return nil
}

func (m *Pic_DeletionStatus) GetActualDeletedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ActualDeletedTs
	}
	return nil
}

type Pic_FileSource struct {
	Url       string                      `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Referrer  string                      `protobuf:"bytes,2,opt,name=referrer" json:"referrer,omitempty"`
	CreatedTs *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
}

func (m *Pic_FileSource) Reset()                    { *m = Pic_FileSource{} }
func (m *Pic_FileSource) String() string            { return proto.CompactTextString(m) }
func (*Pic_FileSource) ProtoMessage()               {}
func (*Pic_FileSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Pic_FileSource) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

// A picture identifier
type PicIdent struct {
	PicId int64         `protobuf:"varint,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	Type  PicIdent_Type `protobuf:"varint,2,opt,name=type,enum=pixur.PicIdent_Type" json:"type,omitempty"`
	Value []byte        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// dct0 are the upper 8x8 corner of the 32x32 dct of the image
	Dct0Values []float32 `protobuf:"fixed32,4,rep,packed,name=dct0_values,json=dct0Values" json:"dct0_values,omitempty"`
}

func (m *PicIdent) Reset()                    { *m = PicIdent{} }
func (m *PicIdent) String() string            { return proto.CompactTextString(m) }
func (*PicIdent) ProtoMessage()               {}
func (*PicIdent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AnimationInfo struct {
	// How long this animated image in time.  There must be more than 1 frame
	// for this value to be set.
	Duration *google_protobuf.Duration `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
}

func (m *AnimationInfo) Reset()                    { *m = AnimationInfo{} }
func (m *AnimationInfo) String() string            { return proto.CompactTextString(m) }
func (*AnimationInfo) ProtoMessage()               {}
func (*AnimationInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AnimationInfo) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type Tag struct {
	TagId      int64                       `protobuf:"varint,1,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	Name       string                      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	UsageCount int64                       `protobuf:"varint,3,opt,name=usage_count,json=usageCount" json:"usage_count,omitempty"`
	CreatedTs  *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
	ModifiedTs *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=modified_ts,json=modifiedTs" json:"modified_ts,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Tag) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *Tag) GetModifiedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

type PicTag struct {
	PicId int64  `protobuf:"varint,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	TagId int64  `protobuf:"varint,2,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The user who originally created this tag.  optional.
	UserId     int64                       `protobuf:"varint,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedTs  *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
	ModifiedTs *google_protobuf1.Timestamp `protobuf:"bytes,7,opt,name=modified_ts,json=modifiedTs" json:"modified_ts,omitempty"`
}

func (m *PicTag) Reset()                    { *m = PicTag{} }
func (m *PicTag) String() string            { return proto.CompactTextString(m) }
func (*PicTag) ProtoMessage()               {}
func (*PicTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PicTag) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *PicTag) GetModifiedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

type PicComment struct {
	PicId     int64 `protobuf:"varint,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	CommentId int64 `protobuf:"varint,2,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	// parent id of this comment.  0 if root.
	CommentParentId int64 `protobuf:"varint,3,opt,name=comment_parent_id,json=commentParentId" json:"comment_parent_id,omitempty"`
	// author
	UserId     int64                       `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Text       string                      `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
	CreatedTs  *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
	ModifiedTs *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=modified_ts,json=modifiedTs" json:"modified_ts,omitempty"`
}

func (m *PicComment) Reset()                    { *m = PicComment{} }
func (m *PicComment) String() string            { return proto.CompactTextString(m) }
func (*PicComment) ProtoMessage()               {}
func (*PicComment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PicComment) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *PicComment) GetModifiedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

type User struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Hashed secret token
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// Identity of the user, usually an email.
	Ident      string                      `protobuf:"bytes,3,opt,name=ident" json:"ident,omitempty"`
	CreatedTs  *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
	ModifiedTs *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=modified_ts,json=modifiedTs" json:"modified_ts,omitempty"`
	LastSeenTs *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=last_seen_ts,json=lastSeenTs" json:"last_seen_ts,omitempty"`
	Capability []User_Capability           `protobuf:"varint,7,rep,name=capability,enum=pixur.User_Capability" json:"capability,omitempty"`
	// Always increment-then-get
	NextTokenId int64        `protobuf:"varint,8,opt,name=next_token_id,json=nextTokenId" json:"next_token_id,omitempty"`
	UserToken   []*UserToken `protobuf:"bytes,9,rep,name=user_token,json=userToken" json:"user_token,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *User) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *User) GetModifiedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *User) GetLastSeenTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastSeenTs
	}
	return nil
}

func (m *User) GetUserToken() []*UserToken {
	if m != nil {
		return m.UserToken
	}
	return nil
}

// Represent the valid auth tokens.  When a user logs out, these will be
// deleted.
type UserToken struct {
	TokenId    int64                       `protobuf:"varint,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	CreatedTs  *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=created_ts,json=createdTs" json:"created_ts,omitempty"`
	LastSeenTs *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=last_seen_ts,json=lastSeenTs" json:"last_seen_ts,omitempty"`
}

func (m *UserToken) Reset()                    { *m = UserToken{} }
func (m *UserToken) String() string            { return proto.CompactTextString(m) }
func (*UserToken) ProtoMessage()               {}
func (*UserToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserToken) GetCreatedTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *UserToken) GetLastSeenTs() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastSeenTs
	}
	return nil
}

func init() {
	proto.RegisterType((*Pic)(nil), "pixur.Pic")
	proto.RegisterType((*Pic_DeletionStatus)(nil), "pixur.Pic.DeletionStatus")
	proto.RegisterType((*Pic_FileSource)(nil), "pixur.Pic.FileSource")
	proto.RegisterType((*PicIdent)(nil), "pixur.PicIdent")
	proto.RegisterType((*AnimationInfo)(nil), "pixur.AnimationInfo")
	proto.RegisterType((*Tag)(nil), "pixur.Tag")
	proto.RegisterType((*PicTag)(nil), "pixur.PicTag")
	proto.RegisterType((*PicComment)(nil), "pixur.PicComment")
	proto.RegisterType((*User)(nil), "pixur.User")
	proto.RegisterType((*UserToken)(nil), "pixur.UserToken")
	proto.RegisterEnum("pixur.Pic_Mime", Pic_Mime_name, Pic_Mime_value)
	proto.RegisterEnum("pixur.Pic_DeletionStatus_Reason", Pic_DeletionStatus_Reason_name, Pic_DeletionStatus_Reason_value)
	proto.RegisterEnum("pixur.PicIdent_Type", PicIdent_Type_name, PicIdent_Type_value)
	proto.RegisterEnum("pixur.User_Capability", User_Capability_name, User_Capability_value)
}

var fileDescriptor0 = []byte{
	// 1190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x55, 0x5f, 0x6e, 0xdb, 0xc6,
	0x13, 0xfe, 0x51, 0xa4, 0x28, 0x71, 0x64, 0x4b, 0xcc, 0xfe, 0x12, 0x87, 0x71, 0x9a, 0x46, 0x50,
	0x5e, 0x84, 0x02, 0x55, 0x52, 0x07, 0x09, 0x1a, 0xa4, 0x7d, 0x90, 0x25, 0xda, 0x56, 0x1b, 0x4b,
	0xc2, 0x8a, 0x4a, 0x8a, 0xbe, 0x10, 0x1b, 0x72, 0x2d, 0x2f, 0x22, 0x92, 0x02, 0xb9, 0x4c, 0xe2,
	0xdc, 0xa2, 0xe8, 0x01, 0x7a, 0x8b, 0xde, 0xa0, 0x0f, 0x3d, 0x42, 0xd1, 0x2b, 0xf4, 0x10, 0xc5,
	0x2e, 0x49, 0xfd, 0x71, 0x92, 0xba, 0x42, 0x1e, 0xfa, 0xc6, 0x99, 0xf9, 0x76, 0x38, 0xdf, 0x37,
	0x3b, 0xb3, 0x50, 0x5b, 0xb0, 0xb7, 0x69, 0xdc, 0x59, 0xc4, 0x11, 0x8f, 0x50, 0x59, 0x1a, 0xfb,
	0x9f, 0xcf, 0xa2, 0x68, 0x36, 0xa7, 0xf7, 0xa5, 0xf3, 0x65, 0x7a, 0x76, 0xdf, 0x4f, 0x63, 0xc2,
	0x59, 0x14, 0x66, 0xb0, 0xfd, 0xbb, 0x97, 0xe3, 0x9c, 0x05, 0x34, 0xe1, 0x24, 0x58, 0x64, 0x80,
	0xd6, 0xaf, 0x55, 0x50, 0xc7, 0xcc, 0x43, 0x37, 0x40, 0x5f, 0x30, 0xcf, 0x65, 0xbe, 0xa5, 0x34,
	0x95, 0xb6, 0x8a, 0xcb, 0x0b, 0xe6, 0x0d, 0x7c, 0x74, 0x1b, 0x8c, 0x33, 0x36, 0xa7, 0x6e, 0xc2,
	0xde, 0x51, 0xab, 0x24, 0x23, 0x55, 0xe1, 0x98, 0xb0, 0x77, 0x14, 0xdd, 0x03, 0x2d, 0x60, 0x01,
	0xb5, 0xd4, 0xa6, 0xd2, 0xae, 0x1f, 0x34, 0x3a, 0x59, 0x7d, 0x63, 0xe6, 0x75, 0x4e, 0x59, 0x40,
	0xb1, 0x0c, 0xa2, 0xeb, 0x50, 0x7e, 0xc3, 0x7c, 0x7e, 0x6e, 0x69, 0x59, 0x5e, 0x69, 0xa0, 0x3d,
	0xd0, 0xcf, 0x29, 0x9b, 0x9d, 0x73, 0xab, 0x2c, 0xdd, 0xb9, 0x85, 0x9e, 0x00, 0x78, 0x31, 0x25,
	0x9c, 0xfa, 0x2e, 0x4f, 0x2c, 0x68, 0x2a, 0xed, 0xda, 0xc1, 0x7e, 0x27, 0x23, 0xd1, 0x29, 0x48,
	0x74, 0x9c, 0x82, 0x04, 0x36, 0x72, 0xb4, 0x93, 0xa0, 0xa7, 0x50, 0x0b, 0x22, 0x9f, 0x9d, 0xb1,
	0xec, 0x6c, 0xed, 0xca, 0xb3, 0x50, 0xc0, 0x9d, 0x04, 0x1d, 0x42, 0xc3, 0xa7, 0x73, 0x2a, 0x94,
	0x73, 0x13, 0x4e, 0x78, 0x9a, 0x58, 0x3b, 0x32, 0xc1, 0xad, 0x35, 0x56, 0xfd, 0x1c, 0x31, 0x91,
	0x00, 0x5c, 0xf7, 0x37, 0x6c, 0xf4, 0x14, 0xea, 0x24, 0x64, 0x81, 0x94, 0xdf, 0x65, 0xe1, 0x59,
	0x64, 0xed, 0xca, 0x14, 0xd7, 0xf3, 0x14, 0xdd, 0x22, 0x38, 0x08, 0xcf, 0x22, 0xbc, 0x4b, 0xd6,
	0x4d, 0x74, 0x07, 0xe0, 0x35, 0xa3, 0x6f, 0x5c, 0x2f, 0x4a, 0x43, 0x6e, 0xd5, 0xa5, 0x28, 0x86,
	0xf0, 0xf4, 0x84, 0x03, 0x7d, 0x09, 0x7a, 0x12, 0xa5, 0xb1, 0x47, 0xad, 0x46, 0x53, 0x6d, 0xd7,
	0x0e, 0x6e, 0xac, 0x95, 0x75, 0x24, 0xfa, 0x21, 0x83, 0x38, 0x07, 0x2d, 0xdb, 0x16, 0x92, 0x80,
	0x5a, 0x66, 0x53, 0x6d, 0x1b, 0x59, 0xdb, 0x86, 0x24, 0xa0, 0xfb, 0x3f, 0xa9, 0x50, 0xdf, 0xa4,
	0x82, 0x8e, 0xe0, 0x5a, 0x40, 0xe2, 0x57, 0xd4, 0x77, 0x25, 0xa7, 0x4c, 0x41, 0xe5, 0x4a, 0x05,
	0x1b, 0xd9, 0xa1, 0x7e, 0x76, 0xc6, 0x49, 0xd0, 0x09, 0xa0, 0x05, 0x0d, 0x7d, 0x16, 0xce, 0xd6,
	0x13, 0x95, 0xae, 0x4c, 0x64, 0xe6, 0xa7, 0x56, 0x99, 0x8e, 0xe0, 0x1a, 0xf1, 0x78, 0x4a, 0xe6,
	0xeb, 0x89, 0xd4, 0xab, 0x2b, 0xca, 0x0e, 0xad, 0xf2, 0x58, 0x50, 0xf1, 0x29, 0x27, 0x6c, 0x9e,
	0xc8, 0x0b, 0x68, 0xe0, 0xc2, 0x44, 0x5f, 0x83, 0x1e, 0x53, 0x92, 0x44, 0xa1, 0xbc, 0x82, 0xf5,
	0x83, 0xe6, 0x47, 0x3b, 0xdd, 0xc1, 0x12, 0x87, 0x73, 0x3c, 0xfa, 0x0c, 0x0c, 0x4e, 0x83, 0x45,
	0x14, 0x93, 0xf8, 0xc2, 0xd2, 0x9b, 0x4a, 0xbb, 0x8a, 0x57, 0x8e, 0xd6, 0x43, 0xd0, 0x33, 0x3c,
	0xaa, 0x41, 0x65, 0x3a, 0xfc, 0x7e, 0x38, 0x7a, 0x31, 0x34, 0xff, 0x87, 0xaa, 0xa0, 0x0d, 0x47,
	0x43, 0xdb, 0x54, 0x10, 0x82, 0x3a, 0x9e, 0x3e, 0xb3, 0xdd, 0xe7, 0x83, 0xd1, 0xb3, 0xae, 0x33,
	0x18, 0x0d, 0xcd, 0xd2, 0x7e, 0x0a, 0xb0, 0x6a, 0x23, 0x32, 0x41, 0x4d, 0xe3, 0xb9, 0x6c, 0x80,
	0x81, 0xc5, 0x27, 0xda, 0x87, 0x6a, 0x4c, 0xcf, 0x68, 0x1c, 0xd3, 0x58, 0xca, 0x69, 0xe0, 0xa5,
	0x7d, 0x69, 0x66, 0xd4, 0x2d, 0x66, 0xa6, 0xf5, 0x04, 0x34, 0x31, 0xaa, 0xef, 0x55, 0xfa, 0xdd,
	0xd8, 0x3e, 0x36, 0x15, 0x54, 0x01, 0xf5, 0x78, 0x70, 0x64, 0x96, 0xc4, 0xc7, 0x78, 0x78, 0x6c,
	0xaa, 0x22, 0xf6, 0xc2, 0x3e, 0x3c, 0x35, 0xb5, 0xd6, 0x6f, 0x0a, 0x54, 0xc7, 0x62, 0x47, 0xd0,
	0x90, 0x7f, 0x6c, 0x7b, 0xb4, 0x41, 0xe3, 0x17, 0x8b, 0x6c, 0x71, 0xd4, 0x97, 0x73, 0x50, 0x9c,
	0xea, 0x38, 0x17, 0x0b, 0x8a, 0x25, 0x42, 0x6c, 0x89, 0xd7, 0x64, 0x9e, 0x66, 0xbb, 0x64, 0x07,
	0x67, 0x06, 0xba, 0x07, 0x35, 0xdf, 0xe3, 0x0f, 0x5c, 0x69, 0x89, 0x06, 0xaa, 0xed, 0xd2, 0x61,
	0xc9, 0x54, 0x30, 0x08, 0xf7, 0x73, 0xe9, 0x6d, 0x7d, 0x0b, 0x9a, 0x48, 0xb4, 0xc9, 0x01, 0x40,
	0x9f, 0x9c, 0x74, 0x0f, 0x1e, 0x3d, 0x36, 0x15, 0x51, 0xf3, 0xe4, 0xa4, 0xfb, 0x55, 0x46, 0xe3,
	0xb4, 0xff, 0xc8, 0x54, 0x91, 0x01, 0xe5, 0x7e, 0xcf, 0x71, 0x1f, 0x98, 0x5a, 0xeb, 0x08, 0x76,
	0x37, 0x06, 0x13, 0x3d, 0x82, 0x6a, 0xb1, 0x44, 0xf3, 0x11, 0xb8, 0xf5, 0x9e, 0x98, 0xfd, 0x1c,
	0x80, 0x97, 0xd0, 0xd6, 0xef, 0x0a, 0xa8, 0x0e, 0x99, 0x09, 0x29, 0x38, 0x99, 0xad, 0x49, 0xc1,
	0xc9, 0x6c, 0xe0, 0x23, 0x04, 0x9a, 0x1c, 0xc6, 0xac, 0x79, 0xf2, 0x1b, 0xdd, 0x85, 0x5a, 0x9a,
	0x90, 0x19, 0xcd, 0x87, 0x5e, 0x95, 0x78, 0x90, 0xae, 0x6c, 0xea, 0x37, 0x3b, 0xab, 0x7f, 0xc2,
	0x36, 0xac, 0x6c, 0xb3, 0x0d, 0x5b, 0x7f, 0x2a, 0xa0, 0x8f, 0x99, 0x97, 0xd3, 0xf9, 0x50, 0x67,
	0x57, 0x2c, 0x4b, 0x1f, 0x62, 0xa9, 0xae, 0xb1, 0xbc, 0x09, 0x95, 0x34, 0xa1, 0xb1, 0xc0, 0x56,
	0xb3, 0x5d, 0x2f, 0xcc, 0x81, 0xff, 0x9f, 0xb1, 0xfb, 0xb9, 0x04, 0x30, 0x66, 0x5e, 0x2f, 0x0a,
	0x82, 0x7f, 0xb8, 0xbb, 0x77, 0x00, 0xbc, 0x0c, 0xb1, 0x62, 0x69, 0xe4, 0x9e, 0x81, 0x8f, 0xbe,
	0x80, 0x6b, 0x45, 0x78, 0x41, 0xe2, 0x1c, 0x95, 0x75, 0xb0, 0x91, 0x07, 0xc6, 0xd2, 0x3f, 0xf0,
	0xd7, 0x15, 0xd0, 0x36, 0x14, 0x40, 0xa0, 0x71, 0xfa, 0x96, 0xcb, 0xfa, 0x0d, 0x2c, 0xbf, 0x2f,
	0xa9, 0x52, 0xfe, 0x04, 0x55, 0xf4, 0xad, 0x54, 0xf9, 0x4b, 0x03, 0x6d, 0x9a, 0xd0, 0x78, 0xbd,
	0x5a, 0x65, 0xa3, 0xda, 0x3d, 0xd0, 0x13, 0xea, 0xc5, 0x94, 0x4b, 0x35, 0x76, 0x70, 0x6e, 0x89,
	0xd9, 0x65, 0x62, 0x9e, 0xf3, 0xae, 0x67, 0xc6, 0x25, 0x1e, 0xda, 0x27, 0xf0, 0x28, 0x6f, 0xf5,
	0x92, 0x7f, 0x03, 0x3b, 0x73, 0x92, 0x70, 0x37, 0xa1, 0x34, 0xfc, 0x97, 0x2a, 0x08, 0xfc, 0x84,
	0xd2, 0xd0, 0x49, 0xd0, 0x63, 0x00, 0x8f, 0x2c, 0xc8, 0x4b, 0x36, 0x67, 0xfc, 0xc2, 0xaa, 0x34,
	0xd5, 0x76, 0xfd, 0x60, 0x2f, 0xdf, 0x5b, 0x42, 0x9d, 0x4e, 0x6f, 0x19, 0xc5, 0x6b, 0x48, 0xd4,
	0x82, 0xdd, 0x90, 0xbe, 0xe5, 0x2e, 0x8f, 0x5e, 0xd1, 0x70, 0x75, 0xd5, 0x6b, 0xc2, 0xe9, 0x08,
	0xdf, 0xc0, 0x47, 0xf7, 0x01, 0xa4, 0xb0, 0x12, 0x63, 0x19, 0xf2, 0x1d, 0x37, 0xd7, 0x72, 0x4b,
	0x1c, 0x36, 0xd2, 0xe2, 0xb3, 0xf5, 0x87, 0x02, 0xb0, 0xfa, 0xdf, 0xe6, 0x82, 0xab, 0x03, 0x8c,
	0x07, 0x3d, 0xb7, 0x87, 0xed, 0xae, 0x23, 0x1e, 0x95, 0x1d, 0xa8, 0x0a, 0x1b, 0xdb, 0xdd, 0xbe,
	0x59, 0x42, 0xbb, 0x60, 0x08, 0x6b, 0x30, 0xec, 0xdb, 0x3f, 0x98, 0x2a, 0xfa, 0x3f, 0x34, 0x84,
	0x39, 0x19, 0x1d, 0x39, 0x6e, 0xdf, 0x7e, 0x66, 0x3b, 0xb6, 0x59, 0x2e, 0x9c, 0x27, 0x5d, 0xdc,
	0x2f, 0x9c, 0x7a, 0x71, 0x70, 0x3c, 0xc5, 0xc7, 0xb6, 0x59, 0x41, 0xb7, 0xe1, 0xa6, 0x30, 0xa7,
	0xe3, 0x7e, 0xd7, 0x11, 0x0f, 0x96, 0xfd, 0xc2, 0xed, 0x8d, 0xa6, 0x43, 0xc7, 0xc6, 0x66, 0x55,
	0xbc, 0x63, 0x22, 0xe8, 0x74, 0x8f, 0x8b, 0x32, 0x0c, 0xb4, 0x07, 0x48, 0x96, 0x35, 0x3a, 0x3d,
	0xb5, 0x87, 0x4e, 0xe1, 0x07, 0xd4, 0x80, 0xda, 0x74, 0x62, 0xe3, 0xc2, 0xa1, 0xb5, 0x7e, 0x51,
	0xc0, 0x58, 0x92, 0x46, 0xb7, 0xa0, 0xba, 0x54, 0x2e, 0xbb, 0x74, 0x15, 0x9e, 0xab, 0xb6, 0x79,
	0x8f, 0x4a, 0xdb, 0xdc, 0xa3, 0xcb, 0x57, 0x41, 0xdd, 0xe6, 0x2a, 0x1c, 0x56, 0x7f, 0xd4, 0x13,
	0xef, 0x9c, 0x06, 0xe4, 0xa5, 0x2e, 0x91, 0x0f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x70,
	0xae, 0x75, 0x81, 0x0b, 0x00, 0x00,
}
