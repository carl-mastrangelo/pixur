syntax = "proto3";

package pixur.api;

option go_package = "handlers";
option java_package = "org.pixur.api";
option java_string_check_utf8 = true;
option java_multiple_files = true;
option optimize_for = CODE_SIZE;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message ApiPic {
  // id is the unique identifier for the pic, in varint form
  string id = 1;
  // width is the width of pic
  int32 width = 2;
  // height is the height of the pic
  int32 height = 3;
  // version is the version of the pic.  It is used when updating the pic.
  sfixed64 version = 4;
  // type is the mime type of the pic. (JPEG, GIF, PNG, or WEBM)
  string type = 5;
  
  // relative_url is the location of the pic file relative to the root dir.
  string relative_url = 6;
  // thumbnail_relative_url is the location of the the pic thumbnail
  // relative to the root dir.
  string thumbnail_relative_url = 7;
  reserved 8;

  // pending_deletion indicates if the pic may be deleted soon.
  bool pending_deletion = 9;
  // view_count is the number of views this picture has received.
  int64 view_count = 10;

  // duration is present if the image is animated (GIF or WEBM).  Note that
  // GIFs duration is not well defined and is subject to reinterpretation.
  google.protobuf.Duration duration = 11;
}

message ApiPicTag {
  // pic_id is the unique identifier for the pic, in varint form
  string pic_id = 1;
  // tag_id is the unique identifier for the tag, in varint form
  string tag_id = 2;
  // name is the tag name in utf8 form
  string name = 3;
  // created_time is when the tag was created.
  google.protobuf.Timestamp created_time = 4;
  // modified_time is when the tag was last modified.
  google.protobuf.Timestamp modified_time = 5;
  // version is the version of the tag.  It is used when updating the tag.
  sfixed64 version = 6;
}

message ApiPicComment {
  // pic_id is the unique identifier for the pic, in varint form
  string pic_id = 1;
  // comment_id is the unique identifier for the comment, in varint form
  string comment_id = 2;
  // comment_parent_id is the unique identifier for the parent comment, in varint form
  string comment_parent_id = 3;
  
  string text = 7;
  
  // created_time is when the tag was created.
  google.protobuf.Timestamp created_time = 4;
  // modified_time is when the tag was last modified.
  google.protobuf.Timestamp modified_time = 5;
  // version is the version of the tag.  It is used when updating the tag.
  sfixed64 version = 6;
}

message ApiPicCommentTree {
	// All comments, ordered by a post order traversal.  Protobuf does not handle deeply nested 
	// messages well.  
	repeated ApiPicComment comment = 1;
}

message LookupPicDetailsRequest {
	string pic_id = 1;
}

message LookupPicDetailsResponse {
  ApiPic pic = 1;
  repeated ApiPicTag pic_tag = 2;
  ApiPicCommentTree pic_comment_tree = 3;
}

message FindIndexPicsRequest {
	string start_pic_id = 1;
	
	bool ascending = 2;
}

message FindIndexPicsResponse {
  repeated ApiPic pic = 1;
}

message AddPicTagsRequest {
	string pic_id = 1;
	repeated string tag = 2;
}

message AddPicTagsResponse {
  // nothing here for now.
}

message CreatePicRequest {
	// file_data is the contents of the pic.  Either file_data or file_url must be present.
	// If sent as part of a stream, this field will be the only one read after the first message.
	bytes file_data = 1;
	// optional, only used if file_data is present.
	string file_name = 2;
	
	// URL to get the pic from.  Either file_data or file_url must be present.
	string file_url = 3;
	
	repeated string tag = 4;
}

message CreatePicResponse {
  ApiPic pic = 1;
}

message FindSimilarPicsRequest {
  string pic_id = 1;
}

message FindSimilarPicsResponse {
  repeated string pic_id = 1;
}

message IncrementViewCountRequest {
  string pic_id = 1;
}

message IncrementViewCountResponse {
  // nothing for now
}

message PurgePicRequest {
  string pic_id = 1;
}

message PurgePicResponse {
  // nothing for now
}

message SoftDeletePicRequest {
	string pic_id = 1;
	string details = 2;
  DeletionReason reason = 3;
  google.protobuf.Timestamp deletion_time = 4;
}

message SoftDeletePicResponse {
  // nothing for now
}

// Copy of schema.proto
enum DeletionReason {
  // The reason is not know, due to limitations of proto
  UNKNOWN = 0;
  // No specific reason.  This is a catch-all reason.
  NONE = 1;
  // The pic is in violation of the rules.
  RULE_VIOLATION = 2;
}

message UpsertPicRequest {
	string url = 1;
	string name = 2;
	bytes data = 3;
	bytes md5_hash = 4;
	repeated string tag = 5;
}

message UpsertPicResponse {
  ApiPic pic = 1;
}

message GetXsrfTokenRequest {
}

message GetXsrfTokenResponse {
  string xsrf_token = 1;
}

message CreateUserRequest {
	// ident is the unique identity of the user being created, usually an email address
	string ident = 1;
	// secret is the secret string used to authenticate the user, usually a password
	string secret = 2;
}

message CreateUserResponse {
	// nothing for now.
}

message GetRefreshTokenRequest {
	// ident is the unique identity of the user being created, usually an email address
	string ident = 1;
	// secret is the secret string used to authenticate the user, usually a password
	string secret = 2;
	
	string refresh_token = 3;
}

message GetRefreshTokenResponse {
	string refresh_token = 1;
	string auth_token = 2;
	string pix_token = 5;
	PwtPayload refresh_payload = 3;
	PwtPayload auth_payload = 4;
	PwtPayload pix_payload = 6;
}

message PwtHeader {
	enum Algorithm {
		UNKNOWN = 0;
		HS256 = 1;
		RS256 = 2;
	}
	Algorithm algorithm = 1;
	int64 version = 2;
}

message PwtPayload {
	string subject = 1;
	google.protobuf.Timestamp not_before = 2;
	google.protobuf.Timestamp not_after = 3;
	// represents when this token should be reverified.  Optional.
	google.protobuf.Timestamp soft_not_after = 6;
	string issuer = 4;
	int64 token_id = 5;
	int64 token_parent_id = 8;

	enum Type {
		UNKNOWN = 0;
		REFRESH = 1;
		AUTH = 2;
		PIX = 3;
	}
	Type type = 7;
}

message AddPicCommentRequest {
	string pic_id = 1;
	string comment_parent_id = 2;
	
	string text = 3;
}

message AddPicCommentResponse {
	ApiPicComment comment = 1;
}

message DeleteTokenRequest {
	// empty, uses out of band auth token
}

message DeleteTokenResponse {
	// empty
}

service PixurService {
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);
  rpc GetXsrfToken(GetXsrfTokenRequest) returns (GetXsrfTokenResponse);
  rpc UpsertPic(stream UpsertPicRequest) returns (UpsertPicResponse);
  rpc SoftDeletePic(SoftDeletePicRequest) returns (SoftDeletePicResponse);
  rpc PurgePic(PurgePicRequest) returns (PurgePicResponse);
  rpc IncrementViewCount(IncrementViewCountRequest) returns (IncrementViewCountResponse);
  rpc FindSimilarPics(FindSimilarPicsRequest) returns (FindSimilarPicsResponse);
  rpc CreatePic(stream CreatePicRequest) returns (CreatePicResponse);
  rpc AddPicTags(AddPicTagsRequest) returns (AddPicTagsResponse);
  rpc FindIndexPics(FindIndexPicsRequest) returns (FindIndexPicsResponse);
  rpc LookupPicDetails(LookupPicDetailsRequest) returns (LookupPicDetailsResponse);
  rpc GetRefreshToken(GetRefreshTokenRequest) returns (GetRefreshTokenResponse);
  rpc AddPicComment(AddPicCommentRequest) returns (AddPicCommentResponse);
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse);
}

