// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package handlers is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ApiPic
	ApiPicTag
	ApiPicComment
	ApiPicCommentTree
	LookupPicDetailsRequest
	LookupPicDetailsResponse
	FindIndexPicsRequest
	FindIndexPicsResponse
	AddPicTagsRequest
	AddPicTagsResponse
	CreatePicRequest
	CreatePicResponse
	FindSimilarPicsRequest
	FindSimilarPicsResponse
	IncrementViewCountRequest
	IncrementViewCountResponse
	PurgePicRequest
	PurgePicResponse
	SoftDeletePicRequest
	SoftDeletePicResponse
	UpsertPicRequest
	UpsertPicResponse
	GetXsrfTokenRequest
	GetXsrfTokenResponse
	CreateUserRequest
	CreateUserResponse
	GetRefreshTokenRequest
	GetRefreshTokenResponse
	PwtHeader
	PwtPayload
*/
package handlers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Copy of schema.proto
type DeletionReason int32

const (
	// The reason is not know, due to limitations of proto
	DeletionReason_UNKNOWN DeletionReason = 0
	// No specific reason.  This is a catch-all reason.
	DeletionReason_NONE DeletionReason = 1
	// The pic is in violation of the rules.
	DeletionReason_RULE_VIOLATION DeletionReason = 2
)

var DeletionReason_name = map[int32]string{
	0: "UNKNOWN",
	1: "NONE",
	2: "RULE_VIOLATION",
}
var DeletionReason_value = map[string]int32{
	"UNKNOWN":        0,
	"NONE":           1,
	"RULE_VIOLATION": 2,
}

func (x DeletionReason) String() string {
	return proto.EnumName(DeletionReason_name, int32(x))
}
func (DeletionReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PwtHeader_Algorithm int32

const (
	PwtHeader_UNKNOWN PwtHeader_Algorithm = 0
	PwtHeader_HS256   PwtHeader_Algorithm = 1
	PwtHeader_RS256   PwtHeader_Algorithm = 2
)

var PwtHeader_Algorithm_name = map[int32]string{
	0: "UNKNOWN",
	1: "HS256",
	2: "RS256",
}
var PwtHeader_Algorithm_value = map[string]int32{
	"UNKNOWN": 0,
	"HS256":   1,
	"RS256":   2,
}

func (x PwtHeader_Algorithm) String() string {
	return proto.EnumName(PwtHeader_Algorithm_name, int32(x))
}
func (PwtHeader_Algorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{28, 0} }

type PwtPayload_Type int32

const (
	PwtPayload_UNKNOWN PwtPayload_Type = 0
	PwtPayload_REFRESH PwtPayload_Type = 1
	PwtPayload_AUTH    PwtPayload_Type = 2
	PwtPayload_PIX     PwtPayload_Type = 3
)

var PwtPayload_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "REFRESH",
	2: "AUTH",
	3: "PIX",
}
var PwtPayload_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"REFRESH": 1,
	"AUTH":    2,
	"PIX":     3,
}

func (x PwtPayload_Type) String() string {
	return proto.EnumName(PwtPayload_Type_name, int32(x))
}
func (PwtPayload_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

type ApiPic struct {
	// id is the unique identifier for the pic, in varint form
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// width is the width of pic
	Width int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	// height is the height of the pic
	Height int32 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	// version is the version of the pic.  It is used when updating the pic.
	Version int64 `protobuf:"fixed64,4,opt,name=version" json:"version,omitempty"`
	// type is the mime type of the pic. (JPEG, GIF, PNG, or WEBM)
	Type string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// relative_url is the location of the pic file relative to the root dir.
	RelativeUrl string `protobuf:"bytes,6,opt,name=relative_url,json=relativeUrl" json:"relative_url,omitempty"`
	// thumbnail_relative_url is the location of the the pic thumbnail
	// relative to the root dir.
	ThumbnailRelativeUrl string `protobuf:"bytes,7,opt,name=thumbnail_relative_url,json=thumbnailRelativeUrl" json:"thumbnail_relative_url,omitempty"`
	// pending_deletion indicates if the pic may be deleted soon.
	PendingDeletion bool `protobuf:"varint,9,opt,name=pending_deletion,json=pendingDeletion" json:"pending_deletion,omitempty"`
	// view_count is the number of views this picture has received.
	ViewCount int64 `protobuf:"varint,10,opt,name=view_count,json=viewCount" json:"view_count,omitempty"`
	// duration is present if the image is animated (GIF or WEBM).  Note that
	// GIFs duration is not well defined and is subject to reinterpretation.
	Duration *google_protobuf.Duration `protobuf:"bytes,11,opt,name=duration" json:"duration,omitempty"`
}

func (m *ApiPic) Reset()                    { *m = ApiPic{} }
func (m *ApiPic) String() string            { return proto.CompactTextString(m) }
func (*ApiPic) ProtoMessage()               {}
func (*ApiPic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ApiPic) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type ApiPicTag struct {
	// pic_id is the unique identifier for the pic, in varint form
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	// tag_id is the unique identifier for the tag, in varint form
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	// name is the tag name in utf8 form
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// created_time is when the tag was created.
	CreatedTime *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the tag was last modified.
	ModifiedTime *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// version is the version of the tag.  It is used when updating the tag.
	Version int64 `protobuf:"fixed64,6,opt,name=version" json:"version,omitempty"`
}

func (m *ApiPicTag) Reset()                    { *m = ApiPicTag{} }
func (m *ApiPicTag) String() string            { return proto.CompactTextString(m) }
func (*ApiPicTag) ProtoMessage()               {}
func (*ApiPicTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApiPicTag) GetCreatedTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ApiPicTag) GetModifiedTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

type ApiPicComment struct {
	// pic_id is the unique identifier for the pic, in varint form
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	// comment_id is the unique identifier for the comment, in varint form
	CommentId string `protobuf:"bytes,2,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	// comment_parent_id is the unique identifier for the parent comment, in varint form
	CommentParentId string `protobuf:"bytes,3,opt,name=comment_parent_id,json=commentParentId" json:"comment_parent_id,omitempty"`
	Text            string `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
	// created_time is when the tag was created.
	CreatedTime *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the tag was last modified.
	ModifiedTime *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// version is the version of the tag.  It is used when updating the tag.
	Version int64 `protobuf:"fixed64,6,opt,name=version" json:"version,omitempty"`
}

func (m *ApiPicComment) Reset()                    { *m = ApiPicComment{} }
func (m *ApiPicComment) String() string            { return proto.CompactTextString(m) }
func (*ApiPicComment) ProtoMessage()               {}
func (*ApiPicComment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ApiPicComment) GetCreatedTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *ApiPicComment) GetModifiedTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

type ApiPicCommentTree struct {
	// All comments, ordered by a post order traversal.  Protobuf does not handle deeply nested
	// messages well.
	Comment []*ApiPicComment `protobuf:"bytes,1,rep,name=comment" json:"comment,omitempty"`
}

func (m *ApiPicCommentTree) Reset()                    { *m = ApiPicCommentTree{} }
func (m *ApiPicCommentTree) String() string            { return proto.CompactTextString(m) }
func (*ApiPicCommentTree) ProtoMessage()               {}
func (*ApiPicCommentTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ApiPicCommentTree) GetComment() []*ApiPicComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type LookupPicDetailsRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *LookupPicDetailsRequest) Reset()                    { *m = LookupPicDetailsRequest{} }
func (m *LookupPicDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupPicDetailsRequest) ProtoMessage()               {}
func (*LookupPicDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LookupPicDetailsResponse struct {
	Pic            *ApiPic            `protobuf:"bytes,1,opt,name=pic" json:"pic,omitempty"`
	PicTag         []*ApiPicTag       `protobuf:"bytes,2,rep,name=pic_tag,json=picTag" json:"pic_tag,omitempty"`
	PicCommentTree *ApiPicCommentTree `protobuf:"bytes,3,opt,name=pic_comment_tree,json=picCommentTree" json:"pic_comment_tree,omitempty"`
}

func (m *LookupPicDetailsResponse) Reset()                    { *m = LookupPicDetailsResponse{} }
func (m *LookupPicDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupPicDetailsResponse) ProtoMessage()               {}
func (*LookupPicDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LookupPicDetailsResponse) GetPic() *ApiPic {
	if m != nil {
		return m.Pic
	}
	return nil
}

func (m *LookupPicDetailsResponse) GetPicTag() []*ApiPicTag {
	if m != nil {
		return m.PicTag
	}
	return nil
}

func (m *LookupPicDetailsResponse) GetPicCommentTree() *ApiPicCommentTree {
	if m != nil {
		return m.PicCommentTree
	}
	return nil
}

type FindIndexPicsRequest struct {
	StartPicId string `protobuf:"bytes,1,opt,name=start_pic_id,json=startPicId" json:"start_pic_id,omitempty"`
	Ascending  bool   `protobuf:"varint,2,opt,name=ascending" json:"ascending,omitempty"`
}

func (m *FindIndexPicsRequest) Reset()                    { *m = FindIndexPicsRequest{} }
func (m *FindIndexPicsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindIndexPicsRequest) ProtoMessage()               {}
func (*FindIndexPicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type FindIndexPicsResponse struct {
	Pic []*ApiPic `protobuf:"bytes,1,rep,name=pic" json:"pic,omitempty"`
}

func (m *FindIndexPicsResponse) Reset()                    { *m = FindIndexPicsResponse{} }
func (m *FindIndexPicsResponse) String() string            { return proto.CompactTextString(m) }
func (*FindIndexPicsResponse) ProtoMessage()               {}
func (*FindIndexPicsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FindIndexPicsResponse) GetPic() []*ApiPic {
	if m != nil {
		return m.Pic
	}
	return nil
}

type AddPicTagsRequest struct {
	PicId string   `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	Tag   []string `protobuf:"bytes,2,rep,name=tag" json:"tag,omitempty"`
}

func (m *AddPicTagsRequest) Reset()                    { *m = AddPicTagsRequest{} }
func (m *AddPicTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPicTagsRequest) ProtoMessage()               {}
func (*AddPicTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type AddPicTagsResponse struct {
}

func (m *AddPicTagsResponse) Reset()                    { *m = AddPicTagsResponse{} }
func (m *AddPicTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPicTagsResponse) ProtoMessage()               {}
func (*AddPicTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type CreatePicRequest struct {
	// file_data is the contents of the pic.  Either file_data or file_url must be present.
	// If sent as part of a stream, this field will be the only one read after the first message.
	FileData []byte `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	// optional, only used if file_data is present.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// URL to get the pic from.  Either file_data or file_url must be present.
	FileUrl string   `protobuf:"bytes,3,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	Tag     []string `protobuf:"bytes,4,rep,name=tag" json:"tag,omitempty"`
}

func (m *CreatePicRequest) Reset()                    { *m = CreatePicRequest{} }
func (m *CreatePicRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePicRequest) ProtoMessage()               {}
func (*CreatePicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type CreatePicResponse struct {
	Pic *ApiPic `protobuf:"bytes,1,opt,name=pic" json:"pic,omitempty"`
}

func (m *CreatePicResponse) Reset()                    { *m = CreatePicResponse{} }
func (m *CreatePicResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePicResponse) ProtoMessage()               {}
func (*CreatePicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreatePicResponse) GetPic() *ApiPic {
	if m != nil {
		return m.Pic
	}
	return nil
}

type FindSimilarPicsRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *FindSimilarPicsRequest) Reset()                    { *m = FindSimilarPicsRequest{} }
func (m *FindSimilarPicsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindSimilarPicsRequest) ProtoMessage()               {}
func (*FindSimilarPicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type FindSimilarPicsResponse struct {
	PicId []string `protobuf:"bytes,1,rep,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *FindSimilarPicsResponse) Reset()                    { *m = FindSimilarPicsResponse{} }
func (m *FindSimilarPicsResponse) String() string            { return proto.CompactTextString(m) }
func (*FindSimilarPicsResponse) ProtoMessage()               {}
func (*FindSimilarPicsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type IncrementViewCountRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *IncrementViewCountRequest) Reset()                    { *m = IncrementViewCountRequest{} }
func (m *IncrementViewCountRequest) String() string            { return proto.CompactTextString(m) }
func (*IncrementViewCountRequest) ProtoMessage()               {}
func (*IncrementViewCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type IncrementViewCountResponse struct {
}

func (m *IncrementViewCountResponse) Reset()                    { *m = IncrementViewCountResponse{} }
func (m *IncrementViewCountResponse) String() string            { return proto.CompactTextString(m) }
func (*IncrementViewCountResponse) ProtoMessage()               {}
func (*IncrementViewCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type PurgePicRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *PurgePicRequest) Reset()                    { *m = PurgePicRequest{} }
func (m *PurgePicRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgePicRequest) ProtoMessage()               {}
func (*PurgePicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type PurgePicResponse struct {
}

func (m *PurgePicResponse) Reset()                    { *m = PurgePicResponse{} }
func (m *PurgePicResponse) String() string            { return proto.CompactTextString(m) }
func (*PurgePicResponse) ProtoMessage()               {}
func (*PurgePicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type SoftDeletePicRequest struct {
	PicId        string                      `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	Details      string                      `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	Reason       DeletionReason              `protobuf:"varint,3,opt,name=reason,enum=pixur.api.DeletionReason" json:"reason,omitempty"`
	DeletionTime *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=deletion_time,json=deletionTime" json:"deletion_time,omitempty"`
}

func (m *SoftDeletePicRequest) Reset()                    { *m = SoftDeletePicRequest{} }
func (m *SoftDeletePicRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftDeletePicRequest) ProtoMessage()               {}
func (*SoftDeletePicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SoftDeletePicRequest) GetDeletionTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DeletionTime
	}
	return nil
}

type SoftDeletePicResponse struct {
}

func (m *SoftDeletePicResponse) Reset()                    { *m = SoftDeletePicResponse{} }
func (m *SoftDeletePicResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftDeletePicResponse) ProtoMessage()               {}
func (*SoftDeletePicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type UpsertPicRequest struct {
	Url     string   `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Md5Hash []byte   `protobuf:"bytes,4,opt,name=md5_hash,json=md5Hash,proto3" json:"md5_hash,omitempty"`
	Tag     []string `protobuf:"bytes,5,rep,name=tag" json:"tag,omitempty"`
}

func (m *UpsertPicRequest) Reset()                    { *m = UpsertPicRequest{} }
func (m *UpsertPicRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertPicRequest) ProtoMessage()               {}
func (*UpsertPicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type UpsertPicResponse struct {
	Pic *ApiPic `protobuf:"bytes,1,opt,name=pic" json:"pic,omitempty"`
}

func (m *UpsertPicResponse) Reset()                    { *m = UpsertPicResponse{} }
func (m *UpsertPicResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertPicResponse) ProtoMessage()               {}
func (*UpsertPicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UpsertPicResponse) GetPic() *ApiPic {
	if m != nil {
		return m.Pic
	}
	return nil
}

type GetXsrfTokenRequest struct {
}

func (m *GetXsrfTokenRequest) Reset()                    { *m = GetXsrfTokenRequest{} }
func (m *GetXsrfTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetXsrfTokenRequest) ProtoMessage()               {}
func (*GetXsrfTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type GetXsrfTokenResponse struct {
	XsrfToken string `protobuf:"bytes,1,opt,name=xsrf_token,json=xsrfToken" json:"xsrf_token,omitempty"`
}

func (m *GetXsrfTokenResponse) Reset()                    { *m = GetXsrfTokenResponse{} }
func (m *GetXsrfTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GetXsrfTokenResponse) ProtoMessage()               {}
func (*GetXsrfTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type CreateUserRequest struct {
	// ident is the unique identity of the user being created, usually an email address
	Ident string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
	// secret is the secret string used to authenticate the user, usually a password
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type CreateUserResponse struct {
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type GetRefreshTokenRequest struct {
	// ident is the unique identity of the user being created, usually an email address
	Ident string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
	// secret is the secret string used to authenticate the user, usually a password
	Secret       string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *GetRefreshTokenRequest) Reset()                    { *m = GetRefreshTokenRequest{} }
func (m *GetRefreshTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRefreshTokenRequest) ProtoMessage()               {}
func (*GetRefreshTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type GetRefreshTokenResponse struct {
	RefreshToken   string      `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	AuthToken      string      `protobuf:"bytes,2,opt,name=auth_token,json=authToken" json:"auth_token,omitempty"`
	PixToken       string      `protobuf:"bytes,5,opt,name=pix_token,json=pixToken" json:"pix_token,omitempty"`
	RefreshPayload *PwtPayload `protobuf:"bytes,3,opt,name=refresh_payload,json=refreshPayload" json:"refresh_payload,omitempty"`
	AuthPayload    *PwtPayload `protobuf:"bytes,4,opt,name=auth_payload,json=authPayload" json:"auth_payload,omitempty"`
	PixPayload     *PwtPayload `protobuf:"bytes,6,opt,name=pix_payload,json=pixPayload" json:"pix_payload,omitempty"`
}

func (m *GetRefreshTokenResponse) Reset()                    { *m = GetRefreshTokenResponse{} }
func (m *GetRefreshTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRefreshTokenResponse) ProtoMessage()               {}
func (*GetRefreshTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetRefreshTokenResponse) GetRefreshPayload() *PwtPayload {
	if m != nil {
		return m.RefreshPayload
	}
	return nil
}

func (m *GetRefreshTokenResponse) GetAuthPayload() *PwtPayload {
	if m != nil {
		return m.AuthPayload
	}
	return nil
}

func (m *GetRefreshTokenResponse) GetPixPayload() *PwtPayload {
	if m != nil {
		return m.PixPayload
	}
	return nil
}

type PwtHeader struct {
	Algorithm PwtHeader_Algorithm `protobuf:"varint,1,opt,name=algorithm,enum=pixur.api.PwtHeader_Algorithm" json:"algorithm,omitempty"`
	Version   int64               `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *PwtHeader) Reset()                    { *m = PwtHeader{} }
func (m *PwtHeader) String() string            { return proto.CompactTextString(m) }
func (*PwtHeader) ProtoMessage()               {}
func (*PwtHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type PwtPayload struct {
	Subject   string                      `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	NotBefore *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=not_before,json=notBefore" json:"not_before,omitempty"`
	NotAfter  *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=not_after,json=notAfter" json:"not_after,omitempty"`
	// represents when this token should be reverified.  Optional.
	SoftNotAfter  *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=soft_not_after,json=softNotAfter" json:"soft_not_after,omitempty"`
	Issuer        string                      `protobuf:"bytes,4,opt,name=issuer" json:"issuer,omitempty"`
	TokenId       int64                       `protobuf:"varint,5,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenParentId int64                       `protobuf:"varint,8,opt,name=token_parent_id,json=tokenParentId" json:"token_parent_id,omitempty"`
	Type          PwtPayload_Type             `protobuf:"varint,7,opt,name=type,enum=pixur.api.PwtPayload_Type" json:"type,omitempty"`
}

func (m *PwtPayload) Reset()                    { *m = PwtPayload{} }
func (m *PwtPayload) String() string            { return proto.CompactTextString(m) }
func (*PwtPayload) ProtoMessage()               {}
func (*PwtPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *PwtPayload) GetNotBefore() *google_protobuf1.Timestamp {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

func (m *PwtPayload) GetNotAfter() *google_protobuf1.Timestamp {
	if m != nil {
		return m.NotAfter
	}
	return nil
}

func (m *PwtPayload) GetSoftNotAfter() *google_protobuf1.Timestamp {
	if m != nil {
		return m.SoftNotAfter
	}
	return nil
}

func init() {
	proto.RegisterType((*ApiPic)(nil), "pixur.api.ApiPic")
	proto.RegisterType((*ApiPicTag)(nil), "pixur.api.ApiPicTag")
	proto.RegisterType((*ApiPicComment)(nil), "pixur.api.ApiPicComment")
	proto.RegisterType((*ApiPicCommentTree)(nil), "pixur.api.ApiPicCommentTree")
	proto.RegisterType((*LookupPicDetailsRequest)(nil), "pixur.api.LookupPicDetailsRequest")
	proto.RegisterType((*LookupPicDetailsResponse)(nil), "pixur.api.LookupPicDetailsResponse")
	proto.RegisterType((*FindIndexPicsRequest)(nil), "pixur.api.FindIndexPicsRequest")
	proto.RegisterType((*FindIndexPicsResponse)(nil), "pixur.api.FindIndexPicsResponse")
	proto.RegisterType((*AddPicTagsRequest)(nil), "pixur.api.AddPicTagsRequest")
	proto.RegisterType((*AddPicTagsResponse)(nil), "pixur.api.AddPicTagsResponse")
	proto.RegisterType((*CreatePicRequest)(nil), "pixur.api.CreatePicRequest")
	proto.RegisterType((*CreatePicResponse)(nil), "pixur.api.CreatePicResponse")
	proto.RegisterType((*FindSimilarPicsRequest)(nil), "pixur.api.FindSimilarPicsRequest")
	proto.RegisterType((*FindSimilarPicsResponse)(nil), "pixur.api.FindSimilarPicsResponse")
	proto.RegisterType((*IncrementViewCountRequest)(nil), "pixur.api.IncrementViewCountRequest")
	proto.RegisterType((*IncrementViewCountResponse)(nil), "pixur.api.IncrementViewCountResponse")
	proto.RegisterType((*PurgePicRequest)(nil), "pixur.api.PurgePicRequest")
	proto.RegisterType((*PurgePicResponse)(nil), "pixur.api.PurgePicResponse")
	proto.RegisterType((*SoftDeletePicRequest)(nil), "pixur.api.SoftDeletePicRequest")
	proto.RegisterType((*SoftDeletePicResponse)(nil), "pixur.api.SoftDeletePicResponse")
	proto.RegisterType((*UpsertPicRequest)(nil), "pixur.api.UpsertPicRequest")
	proto.RegisterType((*UpsertPicResponse)(nil), "pixur.api.UpsertPicResponse")
	proto.RegisterType((*GetXsrfTokenRequest)(nil), "pixur.api.GetXsrfTokenRequest")
	proto.RegisterType((*GetXsrfTokenResponse)(nil), "pixur.api.GetXsrfTokenResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "pixur.api.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "pixur.api.CreateUserResponse")
	proto.RegisterType((*GetRefreshTokenRequest)(nil), "pixur.api.GetRefreshTokenRequest")
	proto.RegisterType((*GetRefreshTokenResponse)(nil), "pixur.api.GetRefreshTokenResponse")
	proto.RegisterType((*PwtHeader)(nil), "pixur.api.PwtHeader")
	proto.RegisterType((*PwtPayload)(nil), "pixur.api.PwtPayload")
	proto.RegisterEnum("pixur.api.DeletionReason", DeletionReason_name, DeletionReason_value)
	proto.RegisterEnum("pixur.api.PwtHeader_Algorithm", PwtHeader_Algorithm_name, PwtHeader_Algorithm_value)
	proto.RegisterEnum("pixur.api.PwtPayload_Type", PwtPayload_Type_name, PwtPayload_Type_value)
}

var fileDescriptor0 = []byte{
	// 1629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x72, 0x1b, 0xc7,
	0x11, 0xce, 0xe2, 0x7f, 0x1b, 0x20, 0xb8, 0x9c, 0x80, 0x24, 0x08, 0x92, 0x12, 0xb4, 0x4a, 0x52,
	0x88, 0xaa, 0x02, 0x29, 0x50, 0xa8, 0x28, 0x15, 0xe5, 0x87, 0x22, 0x29, 0x11, 0x89, 0x0a, 0x44,
	0x2d, 0x41, 0x45, 0x15, 0x1f, 0x50, 0x43, 0xec, 0x00, 0x18, 0x0b, 0xd8, 0x5d, 0xef, 0x0e, 0xf8,
	0xf3, 0x1c, 0xbe, 0xba, 0xca, 0x2f, 0xe0, 0xb3, 0x2f, 0x7e, 0x0d, 0x1f, 0xfc, 0x06, 0xae, 0xf2,
	0x53, 0xb8, 0x66, 0x76, 0x06, 0xd8, 0xc5, 0x0f, 0x69, 0xdd, 0x7c, 0xdb, 0xe9, 0xfe, 0xba, 0x67,
	0xe6, 0xeb, 0x9e, 0xee, 0x5e, 0xd0, 0xb1, 0x47, 0xeb, 0x9e, 0xef, 0x32, 0x17, 0xe9, 0x1e, 0xbd,
	0x99, 0xf8, 0x75, 0xec, 0xd1, 0xca, 0x83, 0x81, 0xeb, 0x0e, 0x46, 0xe4, 0xa9, 0x50, 0x5c, 0x4e,
	0xfa, 0x4f, 0xed, 0x89, 0x8f, 0x19, 0x75, 0x9d, 0x10, 0x5a, 0x79, 0x38, 0xaf, 0x67, 0x74, 0x4c,
	0x02, 0x86, 0xc7, 0x5e, 0x08, 0x30, 0xbf, 0x4f, 0x40, 0xe6, 0xd0, 0xa3, 0x6d, 0xda, 0x43, 0x45,
	0x48, 0x50, 0xbb, 0xac, 0x55, 0xb5, 0x9a, 0x6e, 0x25, 0xa8, 0x8d, 0x4a, 0x90, 0xbe, 0xa6, 0x36,
	0x1b, 0x96, 0x13, 0x55, 0xad, 0x96, 0xb6, 0xc2, 0x05, 0xda, 0x82, 0xcc, 0x90, 0xd0, 0xc1, 0x90,
	0x95, 0x93, 0x42, 0x2c, 0x57, 0xa8, 0x0c, 0xd9, 0x2b, 0xe2, 0x07, 0xd4, 0x75, 0xca, 0xa9, 0xaa,
	0x56, 0x33, 0x2c, 0xb5, 0x44, 0x08, 0x52, 0xec, 0xd6, 0x23, 0xe5, 0xb4, 0xf0, 0x2c, 0xbe, 0xd1,
	0x23, 0x28, 0xf8, 0x64, 0x84, 0x19, 0xbd, 0x22, 0xdd, 0x89, 0x3f, 0x2a, 0x67, 0x84, 0x2e, 0xaf,
	0x64, 0x17, 0xfe, 0x08, 0xfd, 0x05, 0xb6, 0xd8, 0x70, 0x32, 0xbe, 0x74, 0x30, 0x1d, 0x75, 0x63,
	0xe0, 0xac, 0x00, 0x97, 0xa6, 0x5a, 0x2b, 0x62, 0xf5, 0x47, 0x30, 0x3c, 0xe2, 0xd8, 0xd4, 0x19,
	0x74, 0x6d, 0x32, 0x22, 0x9c, 0x8a, 0xb2, 0x5e, 0xd5, 0x6a, 0x39, 0x6b, 0x5d, 0xca, 0x8f, 0xa5,
	0x18, 0xed, 0x03, 0x5c, 0x51, 0x72, 0xdd, 0xed, 0xb9, 0x13, 0x87, 0x95, 0xa1, 0xaa, 0xd5, 0x92,
	0x96, 0xce, 0x25, 0x47, 0x5c, 0x80, 0x0e, 0x20, 0xa7, 0xc8, 0x2c, 0xe7, 0xab, 0x5a, 0x2d, 0xdf,
	0xd8, 0xa9, 0x87, 0x6c, 0xd6, 0x15, 0x9b, 0xf5, 0x63, 0x09, 0xb0, 0xa6, 0xd0, 0xff, 0xa4, 0x72,
	0x39, 0x43, 0x37, 0x7f, 0xd4, 0x40, 0x0f, 0x69, 0xed, 0xe0, 0x01, 0xda, 0x84, 0x8c, 0x47, 0x7b,
	0xdd, 0x29, 0xbb, 0x69, 0x8f, 0xf6, 0x9a, 0x36, 0x17, 0x33, 0x3c, 0xe0, 0xe2, 0x44, 0x28, 0x66,
	0x78, 0xd0, 0xb4, 0x39, 0x5f, 0x0e, 0x1e, 0x13, 0xc1, 0xaf, 0x6e, 0x89, 0x6f, 0xf4, 0x0f, 0x28,
	0xf4, 0x7c, 0x82, 0x19, 0xb1, 0xbb, 0x3c, 0x82, 0x82, 0xe2, 0x7c, 0xa3, 0xb2, 0x70, 0xa0, 0x8e,
	0x0a, 0xaf, 0x95, 0x97, 0x78, 0x2e, 0x41, 0xff, 0x82, 0xb5, 0xb1, 0x6b, 0xd3, 0x3e, 0x55, 0xf6,
	0xe9, 0x7b, 0xed, 0x0b, 0xca, 0x40, 0x38, 0x88, 0x44, 0x37, 0x13, 0x8b, 0xae, 0xf9, 0x75, 0x02,
	0xd6, 0xc2, 0x9b, 0x1e, 0xb9, 0xe3, 0x31, 0x71, 0xd8, 0xaa, 0xdb, 0xee, 0x03, 0xf4, 0x42, 0xc4,
	0xec, 0xc6, 0xba, 0x94, 0x34, 0x6d, 0xf4, 0x04, 0x36, 0x94, 0xda, 0xc3, 0xbe, 0x44, 0x85, 0x14,
	0xac, 0x4b, 0x45, 0x5b, 0xc8, 0x43, 0x86, 0x18, 0xb9, 0x61, 0x32, 0x11, 0xc4, 0xf7, 0xaf, 0x98,
	0xa1, 0xb7, 0xb0, 0x11, 0x23, 0xa8, 0xe3, 0x13, 0x82, 0x1a, 0x90, 0x95, 0xb7, 0x2a, 0x6b, 0xd5,
	0x64, 0x2d, 0xdf, 0x28, 0xd7, 0xa7, 0xaf, 0xba, 0x1e, 0x83, 0x5b, 0x0a, 0x68, 0x3e, 0x83, 0xed,
	0x77, 0xae, 0xfb, 0x71, 0xe2, 0xb5, 0x69, 0xef, 0x98, 0x30, 0x4c, 0x47, 0x81, 0x45, 0xbe, 0x98,
	0x90, 0x60, 0x15, 0xe7, 0xe6, 0xb7, 0x1a, 0x94, 0x17, 0x4d, 0x02, 0xcf, 0x75, 0x02, 0x82, 0x1e,
	0x43, 0xd2, 0xa3, 0x3d, 0x61, 0x90, 0x6f, 0x6c, 0x2c, 0x6c, 0x6f, 0x71, 0x2d, 0xfa, 0x13, 0x64,
	0xb9, 0x63, 0x86, 0x07, 0xe5, 0x84, 0x38, 0x67, 0x69, 0x01, 0xd8, 0xc1, 0x03, 0x8b, 0xef, 0xce,
	0x33, 0xfd, 0x0d, 0x18, 0x1c, 0xae, 0x22, 0xc9, 0x7c, 0x12, 0xe6, 0x71, 0xbe, 0xb1, 0xb7, 0xea,
	0x7e, 0x9c, 0x0e, 0xab, 0xe8, 0xc5, 0xd6, 0xe6, 0x7b, 0x28, 0xbd, 0xa1, 0x8e, 0xdd, 0x74, 0x6c,
	0x72, 0xd3, 0xa6, 0xbd, 0xe9, 0x3d, 0xab, 0x50, 0x08, 0x18, 0xf6, 0x59, 0x37, 0x76, 0x5b, 0x10,
	0xb2, 0xb6, 0x48, 0xb3, 0x3d, 0xd0, 0x71, 0xd0, 0x0b, 0x9f, 0xba, 0xc8, 0xb2, 0x9c, 0x35, 0x13,
	0x98, 0xaf, 0x60, 0x73, 0xce, 0xef, 0x3c, 0x19, 0xc9, 0xd5, 0x64, 0x98, 0xaf, 0x60, 0xe3, 0xd0,
	0xb6, 0xc3, 0x2b, 0xdf, 0x43, 0x3d, 0x32, 0x20, 0xa9, 0x48, 0xd3, 0x2d, 0xfe, 0x69, 0x96, 0x00,
	0x45, 0xad, 0xc3, 0x8d, 0xcd, 0x5b, 0x30, 0x8e, 0x44, 0x1e, 0xf2, 0x5d, 0xa4, 0xcb, 0x5d, 0xd0,
	0xfb, 0x74, 0x44, 0xba, 0x36, 0x66, 0x58, 0x78, 0x2d, 0x58, 0x39, 0x2e, 0x38, 0xc6, 0x0c, 0x4f,
	0x95, 0xa2, 0x46, 0x84, 0xcf, 0x48, 0x28, 0x5b, 0xbc, 0x4e, 0xec, 0x80, 0xf8, 0x16, 0x65, 0x32,
	0x7c, 0x3c, 0x59, 0xbe, 0xe6, 0x95, 0x51, 0x1e, 0x28, 0x35, 0x3b, 0xd0, 0x4b, 0xd8, 0x88, 0x6c,
	0xfd, 0x09, 0x59, 0x61, 0x3e, 0x85, 0x2d, 0x4e, 0xe3, 0x39, 0x1d, 0xd3, 0x11, 0xf6, 0xa3, 0x01,
	0x5a, 0x91, 0x88, 0xcf, 0x60, 0x7b, 0xc1, 0x40, 0x6e, 0x18, 0xb5, 0x48, 0xce, 0x2c, 0x1a, 0xb0,
	0xd3, 0x74, 0x7a, 0x3e, 0xe1, 0x29, 0xf1, 0x5e, 0x15, 0xe5, 0x7b, 0x76, 0xd9, 0x83, 0xca, 0x32,
	0x1b, 0xc9, 0x74, 0x0d, 0xd6, 0xdb, 0x13, 0x7f, 0x10, 0x25, 0x7a, 0x85, 0x1f, 0x04, 0xc6, 0x0c,
	0x29, 0xad, 0xbf, 0xd3, 0xa0, 0x74, 0xee, 0xf6, 0x99, 0x68, 0x1f, 0xf7, 0xfb, 0xe0, 0xf5, 0xc0,
	0x0e, 0x1f, 0x9c, 0x0c, 0x92, 0x5a, 0xa2, 0x3f, 0x43, 0xc6, 0x27, 0x38, 0x70, 0x1d, 0x11, 0xa1,
	0x62, 0x63, 0x27, 0x42, 0xb2, 0x6a, 0x4e, 0x96, 0x00, 0x58, 0x12, 0xc8, 0xab, 0x93, 0xea, 0x66,
	0xbf, 0xb4, 0xba, 0x15, 0x94, 0x01, 0x17, 0x99, 0xdb, 0xb0, 0x39, 0x77, 0xf8, 0x59, 0xfa, 0x5d,
	0x78, 0x01, 0x11, 0xaf, 0x47, 0xdd, 0xc8, 0x80, 0x24, 0xcf, 0x9f, 0xf0, 0x3a, 0xfc, 0x73, 0xda,
	0x92, 0x12, 0x91, 0x96, 0x84, 0x20, 0x25, 0xf2, 0x33, 0x29, 0xf2, 0x53, 0x7c, 0xf3, 0xf4, 0x1b,
	0xdb, 0x07, 0xdd, 0x21, 0x0e, 0x86, 0xe2, 0x88, 0x05, 0x2b, 0x3b, 0xb6, 0x0f, 0x4e, 0x71, 0x30,
	0x54, 0xe9, 0x97, 0x8e, 0xa5, 0x5f, 0x64, 0xeb, 0x4f, 0x49, 0xbf, 0x4d, 0xf8, 0xed, 0x5b, 0xc2,
	0x3e, 0x04, 0x7e, 0xbf, 0xe3, 0x7e, 0x24, 0x8e, 0x3c, 0xb7, 0x79, 0x00, 0xa5, 0xb8, 0x58, 0xfa,
	0xdc, 0x07, 0xb8, 0x09, 0xfc, 0x7e, 0x97, 0x71, 0xa9, 0xbc, 0x96, 0x7e, 0xa3, 0x60, 0xe6, 0xa1,
	0x7a, 0x06, 0x17, 0x01, 0xf1, 0x15, 0x07, 0x25, 0x48, 0x53, 0x3b, 0xac, 0xce, 0x22, 0xa8, 0x62,
	0xc1, 0x87, 0x9f, 0x80, 0xf4, 0x7c, 0xc2, 0x24, 0x13, 0x72, 0xc5, 0x9f, 0x76, 0xd4, 0x85, 0xe4,
	0xf6, 0x23, 0x6c, 0xbd, 0x25, 0xcc, 0x22, 0x7d, 0x9f, 0x04, 0xc3, 0xe8, 0x49, 0x3f, 0xcd, 0x3b,
	0x7a, 0x0c, 0x6b, 0x7e, 0xe8, 0x44, 0x5e, 0x21, 0x7c, 0xd9, 0x05, 0x3f, 0xe2, 0xd9, 0xfc, 0x26,
	0x01, 0xdb, 0x0b, 0xbb, 0x4d, 0x49, 0x9d, 0x73, 0xa0, 0x2d, 0x3a, 0xe0, 0x2c, 0xe1, 0x09, 0x53,
	0x08, 0xd9, 0x9f, 0xb9, 0x24, 0x54, 0xef, 0x02, 0x1f, 0x3b, 0xa5, 0x36, 0x1c, 0xe5, 0x72, 0x1e,
	0xbd, 0x09, 0x95, 0xff, 0x84, 0x75, 0xb5, 0x81, 0x87, 0x6f, 0x47, 0x2e, 0xb6, 0x65, 0xd5, 0xdf,
	0x8c, 0x44, 0xb0, 0x7d, 0xcd, 0xda, 0xa1, 0xd2, 0x2a, 0x4a, 0xb4, 0x5c, 0xa3, 0x97, 0x50, 0x10,
	0x7b, 0x2b, 0xe3, 0xd4, 0x5d, 0xc6, 0x79, 0x0e, 0x55, 0x96, 0x2f, 0x20, 0xcf, 0x8f, 0xa5, 0x0c,
	0x33, 0x77, 0x19, 0x82, 0x47, 0x6f, 0xe4, 0xb7, 0xf9, 0xa5, 0x06, 0x7a, 0xfb, 0x9a, 0x9d, 0x12,
	0x6c, 0x13, 0x1f, 0xbd, 0x02, 0x1d, 0x8f, 0x06, 0xae, 0x4f, 0xd9, 0x70, 0x2c, 0xc8, 0x29, 0x36,
	0x1e, 0xc4, 0x7d, 0x84, 0xc0, 0xfa, 0xa1, 0x42, 0x59, 0x33, 0x83, 0x68, 0xeb, 0x4f, 0x88, 0x29,
	0x72, 0xda, 0xfa, 0xeb, 0xa0, 0x4f, 0x2d, 0x50, 0x1e, 0xb2, 0x17, 0xad, 0xff, 0xb6, 0xce, 0xfe,
	0xd7, 0x32, 0x7e, 0x83, 0x74, 0x48, 0x9f, 0x9e, 0x37, 0x0e, 0x5e, 0x18, 0x1a, 0xff, 0xb4, 0xc4,
	0x67, 0xc2, 0xfc, 0x2a, 0x09, 0x30, 0x3b, 0x30, 0x77, 0x1c, 0x4c, 0x2e, 0x3f, 0x27, 0x3d, 0x95,
	0x28, 0x6a, 0x89, 0xfe, 0x06, 0xe0, 0xb8, 0xac, 0x7b, 0x49, 0xfa, 0xae, 0x1f, 0x3e, 0xcb, 0xbb,
	0xab, 0x81, 0xee, 0xb8, 0xec, 0xb5, 0x00, 0xa3, 0xbf, 0x02, 0x5f, 0x74, 0x71, 0x9f, 0x11, 0x5f,
	0x46, 0xe9, 0x2e, 0xcb, 0x9c, 0xe3, 0xb2, 0x43, 0x8e, 0x45, 0xff, 0x86, 0x62, 0xe0, 0xf6, 0x59,
	0x77, 0x66, 0x9d, 0xb9, 0xbf, 0x0a, 0x71, 0x8b, 0x96, 0xf2, 0xb0, 0x05, 0x19, 0x1a, 0x04, 0x13,
	0xe2, 0x8b, 0x00, 0xeb, 0x96, 0x5c, 0xf1, 0xb2, 0x21, 0xf2, 0x8a, 0x17, 0xd1, 0x74, 0xc8, 0xa0,
	0x58, 0x37, 0x6d, 0xf4, 0x07, 0x58, 0x0f, 0x55, 0xb3, 0xa1, 0x30, 0x27, 0x10, 0x6b, 0x42, 0x3c,
	0x1d, 0x09, 0xeb, 0xf2, 0x27, 0x23, 0x2b, 0x82, 0x57, 0x59, 0x9a, 0x00, 0xf5, 0xce, 0xad, 0x47,
	0xc2, 0x1f, 0x10, 0xf3, 0x39, 0xa4, 0xf8, 0x2a, 0x1e, 0x94, 0x3c, 0x64, 0xad, 0x93, 0x37, 0xd6,
	0xc9, 0xf9, 0xa9, 0xa1, 0xa1, 0x1c, 0xa4, 0x0e, 0x2f, 0x3a, 0xa7, 0x46, 0x02, 0x65, 0x21, 0xd9,
	0x6e, 0x7e, 0x30, 0x92, 0x4f, 0xfe, 0x0e, 0xc5, 0x78, 0x81, 0x8e, 0x9b, 0xe7, 0x20, 0xd5, 0x3a,
	0x6b, 0x9d, 0x18, 0x1a, 0x42, 0x50, 0xb4, 0x2e, 0xde, 0x9d, 0x74, 0xdf, 0x37, 0xcf, 0xde, 0x1d,
	0x76, 0x9a, 0x67, 0x2d, 0x23, 0xd1, 0xf8, 0x29, 0x0b, 0x85, 0x36, 0x3f, 0xd5, 0x39, 0xf1, 0xaf,
	0x68, 0x8f, 0xa0, 0x26, 0xc0, 0xac, 0x68, 0xa0, 0xe8, 0x7c, 0xb4, 0x50, 0x8e, 0x2a, 0xfb, 0x2b,
	0xb4, 0xf2, 0x81, 0x9f, 0x41, 0x21, 0x5a, 0xf9, 0x50, 0x34, 0x79, 0x97, 0x54, 0xca, 0xca, 0xc3,
	0x95, 0x7a, 0xe9, 0xf0, 0x14, 0xf4, 0x69, 0x6d, 0x46, 0xbb, 0x11, 0xf4, 0x7c, 0xb3, 0xa8, 0xec,
	0x2d, 0x57, 0x86, 0x7e, 0x6a, 0x1a, 0xb2, 0x60, 0x2d, 0xd6, 0x79, 0x50, 0x74, 0xef, 0x65, 0x0d,
	0xb5, 0x52, 0x5d, 0x0d, 0x90, 0xa7, 0x3b, 0x82, 0x9c, 0xea, 0xcf, 0x28, 0x16, 0xea, 0x78, 0x7b,
	0xaf, 0xec, 0x2e, 0xd5, 0x49, 0x27, 0x18, 0xd0, 0xe2, 0xb0, 0x80, 0x7e, 0x17, 0x31, 0x59, 0x39,
	0x7f, 0x54, 0x7e, 0x7f, 0x0f, 0x4a, 0x6e, 0xf1, 0x01, 0xd6, 0xe7, 0xa6, 0x1e, 0xf4, 0x28, 0x62,
	0xb9, 0x7c, 0x84, 0xaa, 0x98, 0x77, 0x41, 0x66, 0xf1, 0x99, 0x8e, 0x6e, 0xb1, 0xf8, 0xcc, 0xcf,
	0x92, 0x95, 0xbd, 0xe5, 0xca, 0x69, 0x7c, 0x9a, 0x00, 0xb3, 0xa9, 0x34, 0x96, 0x85, 0x0b, 0xa3,
	0x6e, 0x2c, 0x0b, 0x17, 0x47, 0x59, 0x1e, 0xea, 0xd8, 0x70, 0x1d, 0x0b, 0xf5, 0xb2, 0x71, 0x3e,
	0x16, 0xea, 0xe5, 0x73, 0xf9, 0x67, 0x60, 0xcc, 0xff, 0xc0, 0xa0, 0x28, 0x41, 0x2b, 0x7e, 0x88,
	0x2a, 0x8f, 0xef, 0xc4, 0xcc, 0xe2, 0x33, 0xd7, 0x32, 0x63, 0xf1, 0x59, 0xde, 0xbc, 0x63, 0xf1,
	0x59, 0xd1, 0x71, 0x5f, 0x57, 0x61, 0xcd, 0xf5, 0x07, 0x33, 0xe0, 0x69, 0xa2, 0xad, 0xfd, 0x3f,
	0x37, 0xc4, 0x8e, 0x3d, 0x22, 0x7e, 0xf0, 0x83, 0xa6, 0x5d, 0x66, 0x44, 0xb5, 0x7c, 0xfe, 0x73,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xb7, 0xd0, 0x5a, 0xd8, 0x11, 0x00, 0x00,
}
