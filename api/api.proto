syntax = "proto3";

package pixur.api;

option go_package = "pixur.org/pixur/api;api";
option java_package = "org.pixur.api";
option java_string_check_utf8 = true;
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "pixur.org/pixur/api/data.proto";

message AddPicCommentRequest {
	string pic_id = 1;
	string comment_parent_id = 2;
	
	string text = 3;
}

message AddPicCommentResponse {
	PicComment comment = 1;
}

message AddPicTagsRequest {
	string pic_id = 1;
	repeated string tag = 2;
}

message AddPicTagsResponse {
  // nothing here for now.
}

message CreateUserRequest {
	// ident is the unique identity of the user being created, usually an email address
	string ident = 1;
	// secret is the secret string used to authenticate the user, usually a password
	string secret = 2;
}

message CreateUserResponse {
	// nothing for now.
}

message DeleteTokenRequest {
	// empty, uses out of band auth token
}

message DeleteTokenResponse {
	// empty
}

message FindIndexPicsRequest {
	string start_pic_id = 1;
	
	bool ascending = 2;
}

message FindIndexPicsResponse {
  repeated PicAndThumbnail pic = 4;
  // if set, this field is the next pic id as a
  // continuation token.
  string next_pic_id = 2;
  // if set, this field is the previous pic id as a
  // continuation token.
  string prev_pic_id = 3;
}

message FindPicCommentVotesRequest {
  // the pic id of pic comment votes.  Must be present.
  string pic_id = 1;
  // the comment id of pic comment votes.  If present, pic id must be present too.
  string comment_id = 2;
  // the user_id of the pic votes.  If present, comment id must be present too.
  string user_id = 3;
}

message FindPicCommentVotesResponse {
  // all the votes that matched the prefix, and which the subject user has access to.
  repeated PicCommentVote vote = 1;
}

message FindSchedPicsRequest {
}

message FindSchedPicsResponse {
  repeated PicAndThumbnail pic = 2;
}

message FindSimilarPicsRequest {
  string pic_id = 1;
}

message FindSimilarPicsResponse {
  repeated string pic_id = 1;
}

message FindUserEventsRequest {
  // Optional.  Uses auth token if not specified.
  string user_id = 1;
  // Optional.  If present, specifies the starting user event id to scan for
  string start_user_event_id = 2;

  bool ascending = 3;
}

message FindUserEventsResponse {
  repeated UserEvent user_event = 1;

  string next_user_event_id = 2;
  string prev_user_event_id = 3;
}

message GetRefreshTokenRequest {
	// ident is the unique identity of the user being created, usually an email address
	string ident = 1;
	// secret is the secret string used to authenticate the user, usually a password
	string secret = 2;
	
	string previous_auth_token = 3;
}

message GetRefreshTokenResponse {
	string auth_token = 2;
	string pix_token = 5;
	reserved "refresh_token", "refresh_payload";
	reserved 1, 3;
	PwtPayload auth_payload = 4;
	PwtPayload pix_payload = 6;
}

message IncrementViewCountRequest {
  string pic_id = 1;
}

message IncrementViewCountResponse {
  // nothing for now
}

message LookupPicCommentVoteRequest {
  string pic_id = 1;
  string comment_id = 2;
  // if absent, this comes from the auth token.
  string user_id = 3;
}

message LookupPicCommentVoteResponse {
  PicCommentVote vote = 1;
}

message LookupPicDetailsRequest {
	string pic_id = 1;
}

message LookupPicDetailsResponse {
  Pic pic = 1;
  repeated PicTag pic_tag = 2;
  PicCommentTree pic_comment_tree = 3;
}

message LookupPicExtensionRequest {
  string pic_id = 1;
}

message LookupPicExtensionResponse {
  map<string, google.protobuf.Any> ext = 1;
}

message LookupPicFileRequest {
  string pic_file_id = 1;
  PicFile.Format format = 2;
}

message LookupPicFileResponse {
  PicFile pic_file = 1;
}

message LookupPicVoteRequest {
  string pic_id = 1;
  // Optional.  Uses auth token if not specified.
  string user_id = 2;
}

message LookupPicVoteResponse {
  PicVote vote = 1;
}

message LookupPublicUserInfoRequest {
  // if absent, assumed to come from auth token
  string user_id = 1;
}

message LookupPublicUserInfoResponse {
  PublicUserInfo user_info = 1;
}

message LookupUserRequest {
  // if absent, assumed to come from auth token
  string user_id = 1;
}

message LookupUserResponse {
  User user = 1;
}

message PurgePicRequest {
  string pic_id = 1;
}

message PurgePicResponse {
  // nothing for now
}

message ReadPicFileRequest {
  string pic_file_id = 1;
  PicFile.Format format = 2;

  // The offset into the file to start reading at.  Required
  int64 offset = 3;
  // The maximum number of bytes to read.   Maybe be 0.
  int64 limit = 4;
}

message ReadPicFileResponse {
  // may be empty
  bytes data = 1;
  // indicates that the end of the pic has been reached.
  bool eof = 2;
}

message SoftDeletePicRequest {
	string pic_id = 1;
	string details = 2;
  DeletionReason reason = 3;
  google.protobuf.Timestamp deletion_time = 4;
}

message SoftDeletePicResponse {
  // nothing for now
}

message UpdateUserRequest {
  string user_id = 1;
  sfixed64 version = 2;

  message ChangeIdent {
    string ident = 1;
  }
  ChangeIdent ident = 3;

  message ChangeSecret {
    string secret = 1;
  }
  ChangeSecret secret = 4;

  message ChangeCapability {
    repeated Capability.Cap set_capability = 1;
    repeated Capability.Cap clear_capability = 2;
  }
  ChangeCapability capability = 5;
}

message UpdateUserResponse {
  User user = 1;
}

message UpsertPicCommentVoteRequest {
  string pic_id = 1;
  string comment_id = 2;

  // Optional.   Not necessary when creating for the first time.
  sfixed64 version = 3;

  PicCommentVote.Vote vote = 4;
}

message UpsertPicCommentVoteResponse {
  // empty
}

// UpsertPicRequest is a request to upload and possibly merge with another
// picture.
message UpsertPicRequest {
  // url is an optional field for the Pixur backend to download the pic from.
  // Either url and/or data must be set.   If the data field is set along
  // with the URL, the url is treated as regular metadata and not fetched.
	string url = 1;
	// referrer is the referrer url used to fetch the resource.  If no data is
	// set, the url will be used to retrieve the data, along with the referrer
	// being set in the request.  If data is set, referrer is treated as
	// additional metadata.  May not be used if url is not set.
	string referrer = 5;
	// name is an optional field indicating a reasonable file name for the pic.
	// If name and url are set, the name field will override the name
	// automatically derived from the URL.
	string name = 2;
	// data is the file contents of the upload.  It must contain a valid pic
	// if present.  It may be left absent if there is a valid url instead.  This
	// field takes precedence over the url field if both are specified.
	bytes data = 3;
	// md5_hash is the hash of the pic contents.  It is used to verify the pic
	// is valid when downloading from url, or when set in data.  If the Pixur
	// backend already has a pic with a matching md5_hash, it may not use
	// either data or url (at least one must still be specified, though).
	bytes md5_hash = 4;
	// Optional extension data.  You must have the correct permissions to set this.
	map<string, google.protobuf.Any> ext = 6;
}

message UpsertPicResponse {
  // pic is the newly created or updated picture.
  Pic pic = 1;
}

message UpsertPicVoteRequest {
  string pic_id = 1;

  // Optional.   Not necessary when creating for the first time.
  sfixed64 version = 3;

  PicVote.Vote vote = 2;
}

message UpsertPicVoteResponse {
  // empty
}

message WatchBackendConfigurationRequest {
}

message WatchBackendConfigurationResponse {
  sfixed64 version = 1;
  BackendConfiguration backend_configuration = 2;
}

extend google.protobuf.ServiceOptions {
  ServiceOpts pixur_service_opts = 65537;
}

message ServiceOpts {
  // a vaguely defined, but monotonically increasing "version".
  int64 api_version = 1;

  // The header key used to when using an auth token.
  string auth_token_header_key = 2;

  // The header key used to when using a pix token.
  string pix_token_header_key = 3;

  // Used in responses (e.g. ReadPicFile) to indicate suggested http headers.
  // See pixur.api.HttpHeader
  string http_header_key = 4;
}

// HttpHeader is a message included as a header on some responses.  It is only a suggestion.
// See pixur.api.ServiceOpts.http_header_key
message HttpHeader {
  string key = 1;
  string value = 2;
}

service PixurService {
  option (pixur.api.pixur_service_opts) = {
    api_version: 20200315 // AUTO UPDATED BY generate.go
    auth_token_header_key: "pixur-auth-token"
    pix_token_header_key: "pixur-pix-token"
    http_header_key: "pixur-http-header-bin"
  };

  rpc AddPicComment(AddPicCommentRequest) returns (AddPicCommentResponse);
  rpc AddPicTags(AddPicTagsRequest) returns (AddPicTagsResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse);
  rpc FindIndexPics(FindIndexPicsRequest) returns (FindIndexPicsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc FindPicCommentVotes(FindPicCommentVotesRequest) returns (FindPicCommentVotesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc FindSchedPics(FindSchedPicsRequest) returns (FindSchedPicsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc FindSimilarPics(FindSimilarPicsRequest) returns (FindSimilarPicsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc FindUserEvents(FindUserEventsRequest) returns (FindUserEventsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetRefreshToken(GetRefreshTokenRequest) returns (GetRefreshTokenResponse);
  rpc IncrementViewCount(IncrementViewCountRequest) returns (IncrementViewCountResponse);
  rpc LookupPicCommentVote(LookupPicCommentVoteRequest) returns (LookupPicCommentVoteResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc LookupPicDetails(LookupPicDetailsRequest) returns (LookupPicDetailsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc LookupPicExtension(LookupPicExtensionRequest) returns (LookupPicExtensionResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc LookupPicFile(LookupPicFileRequest) returns (LookupPicFileResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc LookupPicVote(LookupPicVoteRequest) returns (LookupPicVoteResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc LookupPublicUserInfo(LookupPublicUserInfoRequest) returns (LookupPublicUserInfoResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc LookupUser(LookupUserRequest) returns (LookupUserResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc PurgePic(PurgePicRequest) returns (PurgePicResponse);
  rpc ReadPicFile(stream ReadPicFileRequest) returns (stream ReadPicFileResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc SoftDeletePic(SoftDeletePicRequest) returns (SoftDeletePicResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc UpsertPic(UpsertPicRequest) returns (UpsertPicResponse);
  rpc UpsertPicCommentVote(UpsertPicCommentVoteRequest) returns (UpsertPicCommentVoteResponse);
  rpc UpsertPicVote(UpsertPicVoteRequest) returns (UpsertPicVoteResponse);
  rpc WatchBackendConfiguration(WatchBackendConfigurationRequest) returns (
      stream WatchBackendConfigurationResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };
}

