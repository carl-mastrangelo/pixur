// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Pic
	PicFile
	PicTag
	PicComment
	User
	Capability
	LookupUserRequest
	LookupUserResponse
	UpdateUserRequest
	UpdateUserResponse
	PicCommentTree
	LookupPicDetailsRequest
	LookupPicDetailsResponse
	FindIndexPicsRequest
	FindIndexPicsResponse
	AddPicTagsRequest
	AddPicTagsResponse
	CreatePicRequest
	CreatePicResponse
	FindSimilarPicsRequest
	FindSimilarPicsResponse
	IncrementViewCountRequest
	IncrementViewCountResponse
	PurgePicRequest
	PurgePicResponse
	SoftDeletePicRequest
	SoftDeletePicResponse
	UpsertPicRequest
	UpsertPicResponse
	CreateUserRequest
	CreateUserResponse
	GetRefreshTokenRequest
	GetRefreshTokenResponse
	PwtHeader
	PwtPayload
	AddPicCommentRequest
	AddPicCommentResponse
	DeleteTokenRequest
	DeleteTokenResponse
	UpsertPicVoteRequest
	UpsertPicVoteResponse
	LookupPicFileRequest
	LookupPicFileResponse
	ReadPicFileRequest
	ReadPicFileResponse
	ServiceOpts
	HttpHeader
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Copy of schema.proto
type DeletionReason int32

const (
	// The reason is not know, due to limitations of proto
	DeletionReason_UNKNOWN DeletionReason = 0
	// No specific reason.  This is a catch-all reason.
	DeletionReason_NONE DeletionReason = 1
	// The pic is in violation of the rules.
	DeletionReason_RULE_VIOLATION DeletionReason = 2
)

var DeletionReason_name = map[int32]string{
	0: "UNKNOWN",
	1: "NONE",
	2: "RULE_VIOLATION",
}
var DeletionReason_value = map[string]int32{
	"UNKNOWN":        0,
	"NONE":           1,
	"RULE_VIOLATION": 2,
}

func (x DeletionReason) String() string {
	return proto.EnumName(DeletionReason_name, int32(x))
}
func (DeletionReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PicFile_Format int32

const (
	PicFile_UNKNOWN PicFile_Format = 0
	PicFile_JPEG    PicFile_Format = 1
	PicFile_GIF     PicFile_Format = 2
	PicFile_PNG     PicFile_Format = 3
	PicFile_WEBM    PicFile_Format = 4
)

var PicFile_Format_name = map[int32]string{
	0: "UNKNOWN",
	1: "JPEG",
	2: "GIF",
	3: "PNG",
	4: "WEBM",
}
var PicFile_Format_value = map[string]int32{
	"UNKNOWN": 0,
	"JPEG":    1,
	"GIF":     2,
	"PNG":     3,
	"WEBM":    4,
}

func (x PicFile_Format) String() string {
	return proto.EnumName(PicFile_Format_name, int32(x))
}
func (PicFile_Format) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Capability_Cap int32

const (
	Capability_UNKNOWN Capability_Cap = 0
	// Can this user create and upload pictures
	Capability_PIC_CREATE Capability_Cap = 1
	// Can this user view the actual image data (grants pic token)
	Capability_PIC_READ Capability_Cap = 2
	// Can this user perform general pic index queries?
	Capability_PIC_INDEX Capability_Cap = 3
	// Can this user soft delete a pic?
	Capability_PIC_SOFT_DELETE Capability_Cap = 5
	// Can this user hard delete a pic?
	Capability_PIC_HARD_DELETE Capability_Cap = 6
	// Can this user purge a pic?
	Capability_PIC_PURGE Capability_Cap = 7
	// Can this user increment the pic view counter?
	Capability_PIC_UPDATE_VIEW_COUNTER Capability_Cap = 8
	// Can this user add tags and pic tags?
	Capability_PIC_TAG_CREATE Capability_Cap = 9
	// Can this user create comments?
	Capability_PIC_COMMENT_CREATE Capability_Cap = 10
	// Can this user vote?
	Capability_PIC_VOTE_CREATE Capability_Cap = 11
	// Can this user create other users?
	Capability_USER_CREATE Capability_Cap = 4
	// Can this user modify capabilities?
	Capability_USER_UPDATE_CAPABILITY Capability_Cap = 12
	// Can this user read information about themselves?
	Capability_USER_READ_SELF Capability_Cap = 13
	// Can this user read infortmation about others?
	Capability_USER_READ_ALL Capability_Cap = 14
)

var Capability_Cap_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "PIC_CREATE",
	2:  "PIC_READ",
	3:  "PIC_INDEX",
	5:  "PIC_SOFT_DELETE",
	6:  "PIC_HARD_DELETE",
	7:  "PIC_PURGE",
	8:  "PIC_UPDATE_VIEW_COUNTER",
	9:  "PIC_TAG_CREATE",
	10: "PIC_COMMENT_CREATE",
	11: "PIC_VOTE_CREATE",
	4:  "USER_CREATE",
	12: "USER_UPDATE_CAPABILITY",
	13: "USER_READ_SELF",
	14: "USER_READ_ALL",
}
var Capability_Cap_value = map[string]int32{
	"UNKNOWN":                 0,
	"PIC_CREATE":              1,
	"PIC_READ":                2,
	"PIC_INDEX":               3,
	"PIC_SOFT_DELETE":         5,
	"PIC_HARD_DELETE":         6,
	"PIC_PURGE":               7,
	"PIC_UPDATE_VIEW_COUNTER": 8,
	"PIC_TAG_CREATE":          9,
	"PIC_COMMENT_CREATE":      10,
	"PIC_VOTE_CREATE":         11,
	"USER_CREATE":             4,
	"USER_UPDATE_CAPABILITY":  12,
	"USER_READ_SELF":          13,
	"USER_READ_ALL":           14,
}

func (x Capability_Cap) String() string {
	return proto.EnumName(Capability_Cap_name, int32(x))
}
func (Capability_Cap) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type PwtHeader_Algorithm int32

const (
	PwtHeader_UNKNOWN PwtHeader_Algorithm = 0
	PwtHeader_HS256   PwtHeader_Algorithm = 1
	PwtHeader_RS256   PwtHeader_Algorithm = 2
)

var PwtHeader_Algorithm_name = map[int32]string{
	0: "UNKNOWN",
	1: "HS256",
	2: "RS256",
}
var PwtHeader_Algorithm_value = map[string]int32{
	"UNKNOWN": 0,
	"HS256":   1,
	"RS256":   2,
}

func (x PwtHeader_Algorithm) String() string {
	return proto.EnumName(PwtHeader_Algorithm_name, int32(x))
}
func (PwtHeader_Algorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{33, 0} }

type PwtPayload_Type int32

const (
	PwtPayload_UNKNOWN PwtPayload_Type = 0
	PwtPayload_REFRESH PwtPayload_Type = 1
	PwtPayload_AUTH    PwtPayload_Type = 2
	PwtPayload_PIX     PwtPayload_Type = 3
)

var PwtPayload_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "REFRESH",
	2: "AUTH",
	3: "PIX",
}
var PwtPayload_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"REFRESH": 1,
	"AUTH":    2,
	"PIX":     3,
}

func (x PwtPayload_Type) String() string {
	return proto.EnumName(PwtPayload_Type_name, int32(x))
}
func (PwtPayload_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{34, 0} }

type UpsertPicVoteRequest_Vote int32

const (
	UpsertPicVoteRequest_UNKNOWN UpsertPicVoteRequest_Vote = 0
	UpsertPicVoteRequest_UP      UpsertPicVoteRequest_Vote = 1
	UpsertPicVoteRequest_DOWN    UpsertPicVoteRequest_Vote = 2
	UpsertPicVoteRequest_NEUTRAL UpsertPicVoteRequest_Vote = 3
)

var UpsertPicVoteRequest_Vote_name = map[int32]string{
	0: "UNKNOWN",
	1: "UP",
	2: "DOWN",
	3: "NEUTRAL",
}
var UpsertPicVoteRequest_Vote_value = map[string]int32{
	"UNKNOWN": 0,
	"UP":      1,
	"DOWN":    2,
	"NEUTRAL": 3,
}

func (x UpsertPicVoteRequest_Vote) String() string {
	return proto.EnumName(UpsertPicVoteRequest_Vote_name, int32(x))
}
func (UpsertPicVoteRequest_Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

type Pic struct {
	// id is the unique identifier for the pic, in varint form
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// width is the width of pic
	Width int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	// height is the height of the pic
	Height int32 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	// version is the version of the pic.  It is used when updating the pic.
	Version int64 `protobuf:"fixed64,4,opt,name=version" json:"version,omitempty"`
	// type is the mime type of the pic. (JPEG, GIF, PNG, or WEBM)
	Type string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// created_time is when the pic was created.
	CreatedTime *google_protobuf2.Timestamp `protobuf:"bytes,14,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the pic was last modified.
	ModifiedTime *google_protobuf2.Timestamp `protobuf:"bytes,15,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// relative_url is the location of the pic file relative to the root dir.
	RelativeUrl string `protobuf:"bytes,6,opt,name=relative_url,json=relativeUrl" json:"relative_url,omitempty"`
	// thumbnail_relative_url is the location of the the pic thumbnail
	// relative to the root dir.
	ThumbnailRelativeUrl string `protobuf:"bytes,7,opt,name=thumbnail_relative_url,json=thumbnailRelativeUrl" json:"thumbnail_relative_url,omitempty"`
	// pending_deletion indicates if the pic may be deleted soon.
	PendingDeletion bool `protobuf:"varint,9,opt,name=pending_deletion,json=pendingDeletion" json:"pending_deletion,omitempty"`
	// view_count is the number of views this picture has received.
	ViewCount int64 `protobuf:"varint,10,opt,name=view_count,json=viewCount" json:"view_count,omitempty"`
	// duration is present if the image is animated (GIF or WEBM).  Note that
	// GIFs duration is not well defined and is subject to reinterpretation.
	Duration *google_protobuf1.Duration `protobuf:"bytes,11,opt,name=duration" json:"duration,omitempty"`
	// The estimated lower bound of the pic score
	ScoreLo float64 `protobuf:"fixed64,12,opt,name=score_lo,json=scoreLo" json:"score_lo,omitempty"`
	// The estimated upper bound of the pic score
	ScoreHi float64 `protobuf:"fixed64,13,opt,name=score_hi,json=scoreHi" json:"score_hi,omitempty"`
}

func (m *Pic) Reset()                    { *m = Pic{} }
func (m *Pic) String() string            { return proto.CompactTextString(m) }
func (*Pic) ProtoMessage()               {}
func (*Pic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pic) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Pic) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Pic) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Pic) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Pic) GetCreatedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *Pic) GetModifiedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *Pic) GetRelativeUrl() string {
	if m != nil {
		return m.RelativeUrl
	}
	return ""
}

func (m *Pic) GetThumbnailRelativeUrl() string {
	if m != nil {
		return m.ThumbnailRelativeUrl
	}
	return ""
}

func (m *Pic) GetPendingDeletion() bool {
	if m != nil {
		return m.PendingDeletion
	}
	return false
}

func (m *Pic) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *Pic) GetDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Pic) GetScoreLo() float64 {
	if m != nil {
		return m.ScoreLo
	}
	return 0
}

func (m *Pic) GetScoreHi() float64 {
	if m != nil {
		return m.ScoreHi
	}
	return 0
}

type PicFile struct {
	// The fully qualified picfile id.  The first component is always the pic id.
	Id     string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Format PicFile_Format `protobuf:"varint,2,opt,name=format,enum=pixur.api.PicFile_Format" json:"format,omitempty"`
	Width  int32          `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height int32          `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	// duration is present if the image is animated (GIF or WEBM).  Note that
	// GIFs duration is not well defined and is subject to reinterpretation.
	Duration *google_protobuf1.Duration `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	// Is this pic considered a thumbnail
	Thumbnail bool `protobuf:"varint,6,opt,name=thumbnail" json:"thumbnail,omitempty"`
	// created_time is when the PicFile was created.
	CreatedTime *google_protobuf2.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the PicFile was last modified.
	ModifiedTime *google_protobuf2.Timestamp `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// the size in bytes of the file
	Size int64 `protobuf:"varint,9,opt,name=size" json:"size,omitempty"`
}

func (m *PicFile) Reset()                    { *m = PicFile{} }
func (m *PicFile) String() string            { return proto.CompactTextString(m) }
func (*PicFile) ProtoMessage()               {}
func (*PicFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PicFile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PicFile) GetFormat() PicFile_Format {
	if m != nil {
		return m.Format
	}
	return PicFile_UNKNOWN
}

func (m *PicFile) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *PicFile) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PicFile) GetDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *PicFile) GetThumbnail() bool {
	if m != nil {
		return m.Thumbnail
	}
	return false
}

func (m *PicFile) GetCreatedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicFile) GetModifiedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *PicFile) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PicTag struct {
	// pic_id is the unique identifier for the pic, in varint form
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	// tag_id is the unique identifier for the tag, in varint form
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId" json:"tag_id,omitempty"`
	// name is the tag name in utf8 form
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// created_time is when the tag was created.
	CreatedTime *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the tag was last modified.
	ModifiedTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// version is the version of the tag.  It is used when updating the tag.
	Version int64 `protobuf:"fixed64,6,opt,name=version" json:"version,omitempty"`
}

func (m *PicTag) Reset()                    { *m = PicTag{} }
func (m *PicTag) String() string            { return proto.CompactTextString(m) }
func (*PicTag) ProtoMessage()               {}
func (*PicTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PicTag) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *PicTag) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *PicTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PicTag) GetCreatedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicTag) GetModifiedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *PicTag) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PicComment struct {
	// pic_id is the unique identifier for the pic, in varint form
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	// comment_id is the unique identifier for the comment, in varint form
	CommentId string `protobuf:"bytes,2,opt,name=comment_id,json=commentId" json:"comment_id,omitempty"`
	// comment_parent_id is the unique identifier for the parent comment, in varint form
	CommentParentId string `protobuf:"bytes,3,opt,name=comment_parent_id,json=commentParentId" json:"comment_parent_id,omitempty"`
	Text            string `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
	// created_time is when the tag was created.
	CreatedTime *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the tag was last modified.
	ModifiedTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// version is the version of the tag.  It is used when updating the tag.
	Version int64 `protobuf:"fixed64,6,opt,name=version" json:"version,omitempty"`
}

func (m *PicComment) Reset()                    { *m = PicComment{} }
func (m *PicComment) String() string            { return proto.CompactTextString(m) }
func (*PicComment) ProtoMessage()               {}
func (*PicComment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PicComment) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *PicComment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *PicComment) GetCommentParentId() string {
	if m != nil {
		return m.CommentParentId
	}
	return ""
}

func (m *PicComment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PicComment) GetCreatedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicComment) GetModifiedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *PicComment) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type User struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Ident  string `protobuf:"bytes,2,opt,name=ident" json:"ident,omitempty"`
	// created_time is when the user was created.
	CreatedTime *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// modified_time is when the user was last modified.
	ModifiedTime *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=modified_time,json=modifiedTime" json:"modified_time,omitempty"`
	// modified_time is when the user was last modified.
	LastSeenTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=last_seen_time,json=lastSeenTime" json:"last_seen_time,omitempty"`
	// version is the version of the user.  It is used when updating the user.
	Version    int64            `protobuf:"fixed64,6,opt,name=version" json:"version,omitempty"`
	Capability []Capability_Cap `protobuf:"varint,7,rep,packed,name=capability,enum=pixur.api.Capability_Cap" json:"capability,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *User) GetCreatedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *User) GetModifiedTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *User) GetLastSeenTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.LastSeenTime
	}
	return nil
}

func (m *User) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *User) GetCapability() []Capability_Cap {
	if m != nil {
		return m.Capability
	}
	return nil
}

type Capability struct {
}

func (m *Capability) Reset()                    { *m = Capability{} }
func (m *Capability) String() string            { return proto.CompactTextString(m) }
func (*Capability) ProtoMessage()               {}
func (*Capability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type LookupUserRequest struct {
	// if absent, assumed to come from auth token
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *LookupUserRequest) Reset()                    { *m = LookupUserRequest{} }
func (m *LookupUserRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupUserRequest) ProtoMessage()               {}
func (*LookupUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LookupUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type LookupUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *LookupUserResponse) Reset()                    { *m = LookupUserResponse{} }
func (m *LookupUserResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupUserResponse) ProtoMessage()               {}
func (*LookupUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LookupUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateUserRequest struct {
	UserId     string                              `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Version    int64                               `protobuf:"fixed64,2,opt,name=version" json:"version,omitempty"`
	Ident      *UpdateUserRequest_ChangeIdent      `protobuf:"bytes,3,opt,name=ident" json:"ident,omitempty"`
	Secret     *UpdateUserRequest_ChangeSecret     `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
	Capability *UpdateUserRequest_ChangeCapability `protobuf:"bytes,5,opt,name=capability" json:"capability,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateUserRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateUserRequest) GetIdent() *UpdateUserRequest_ChangeIdent {
	if m != nil {
		return m.Ident
	}
	return nil
}

func (m *UpdateUserRequest) GetSecret() *UpdateUserRequest_ChangeSecret {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *UpdateUserRequest) GetCapability() *UpdateUserRequest_ChangeCapability {
	if m != nil {
		return m.Capability
	}
	return nil
}

type UpdateUserRequest_ChangeIdent struct {
	Ident string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
}

func (m *UpdateUserRequest_ChangeIdent) Reset()         { *m = UpdateUserRequest_ChangeIdent{} }
func (m *UpdateUserRequest_ChangeIdent) String() string { return proto.CompactTextString(m) }
func (*UpdateUserRequest_ChangeIdent) ProtoMessage()    {}
func (*UpdateUserRequest_ChangeIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

func (m *UpdateUserRequest_ChangeIdent) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

type UpdateUserRequest_ChangeSecret struct {
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *UpdateUserRequest_ChangeSecret) Reset()         { *m = UpdateUserRequest_ChangeSecret{} }
func (m *UpdateUserRequest_ChangeSecret) String() string { return proto.CompactTextString(m) }
func (*UpdateUserRequest_ChangeSecret) ProtoMessage()    {}
func (*UpdateUserRequest_ChangeSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 1}
}

func (m *UpdateUserRequest_ChangeSecret) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type UpdateUserRequest_ChangeCapability struct {
	SetCapability   []Capability_Cap `protobuf:"varint,1,rep,packed,name=set_capability,json=setCapability,enum=pixur.api.Capability_Cap" json:"set_capability,omitempty"`
	ClearCapability []Capability_Cap `protobuf:"varint,2,rep,packed,name=clear_capability,json=clearCapability,enum=pixur.api.Capability_Cap" json:"clear_capability,omitempty"`
}

func (m *UpdateUserRequest_ChangeCapability) Reset()         { *m = UpdateUserRequest_ChangeCapability{} }
func (m *UpdateUserRequest_ChangeCapability) String() string { return proto.CompactTextString(m) }
func (*UpdateUserRequest_ChangeCapability) ProtoMessage()    {}
func (*UpdateUserRequest_ChangeCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 2}
}

func (m *UpdateUserRequest_ChangeCapability) GetSetCapability() []Capability_Cap {
	if m != nil {
		return m.SetCapability
	}
	return nil
}

func (m *UpdateUserRequest_ChangeCapability) GetClearCapability() []Capability_Cap {
	if m != nil {
		return m.ClearCapability
	}
	return nil
}

type UpdateUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateUserResponse) Reset()                    { *m = UpdateUserResponse{} }
func (m *UpdateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserResponse) ProtoMessage()               {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type PicCommentTree struct {
	// All comments, ordered by a post order traversal.  Protobuf does not handle deeply nested
	// messages well.
	Comment []*PicComment `protobuf:"bytes,1,rep,name=comment" json:"comment,omitempty"`
}

func (m *PicCommentTree) Reset()                    { *m = PicCommentTree{} }
func (m *PicCommentTree) String() string            { return proto.CompactTextString(m) }
func (*PicCommentTree) ProtoMessage()               {}
func (*PicCommentTree) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PicCommentTree) GetComment() []*PicComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type LookupPicDetailsRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *LookupPicDetailsRequest) Reset()                    { *m = LookupPicDetailsRequest{} }
func (m *LookupPicDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupPicDetailsRequest) ProtoMessage()               {}
func (*LookupPicDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LookupPicDetailsRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

type LookupPicDetailsResponse struct {
	Pic            *Pic            `protobuf:"bytes,1,opt,name=pic" json:"pic,omitempty"`
	PicTag         []*PicTag       `protobuf:"bytes,2,rep,name=pic_tag,json=picTag" json:"pic_tag,omitempty"`
	PicCommentTree *PicCommentTree `protobuf:"bytes,3,opt,name=pic_comment_tree,json=picCommentTree" json:"pic_comment_tree,omitempty"`
	PicFile        []*PicFile      `protobuf:"bytes,4,rep,name=pic_file,json=picFile" json:"pic_file,omitempty"`
}

func (m *LookupPicDetailsResponse) Reset()                    { *m = LookupPicDetailsResponse{} }
func (m *LookupPicDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupPicDetailsResponse) ProtoMessage()               {}
func (*LookupPicDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *LookupPicDetailsResponse) GetPic() *Pic {
	if m != nil {
		return m.Pic
	}
	return nil
}

func (m *LookupPicDetailsResponse) GetPicTag() []*PicTag {
	if m != nil {
		return m.PicTag
	}
	return nil
}

func (m *LookupPicDetailsResponse) GetPicCommentTree() *PicCommentTree {
	if m != nil {
		return m.PicCommentTree
	}
	return nil
}

func (m *LookupPicDetailsResponse) GetPicFile() []*PicFile {
	if m != nil {
		return m.PicFile
	}
	return nil
}

type FindIndexPicsRequest struct {
	StartPicId string `protobuf:"bytes,1,opt,name=start_pic_id,json=startPicId" json:"start_pic_id,omitempty"`
	Ascending  bool   `protobuf:"varint,2,opt,name=ascending" json:"ascending,omitempty"`
}

func (m *FindIndexPicsRequest) Reset()                    { *m = FindIndexPicsRequest{} }
func (m *FindIndexPicsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindIndexPicsRequest) ProtoMessage()               {}
func (*FindIndexPicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FindIndexPicsRequest) GetStartPicId() string {
	if m != nil {
		return m.StartPicId
	}
	return ""
}

func (m *FindIndexPicsRequest) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

type FindIndexPicsResponse struct {
	Pic []*Pic `protobuf:"bytes,1,rep,name=pic" json:"pic,omitempty"`
}

func (m *FindIndexPicsResponse) Reset()                    { *m = FindIndexPicsResponse{} }
func (m *FindIndexPicsResponse) String() string            { return proto.CompactTextString(m) }
func (*FindIndexPicsResponse) ProtoMessage()               {}
func (*FindIndexPicsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FindIndexPicsResponse) GetPic() []*Pic {
	if m != nil {
		return m.Pic
	}
	return nil
}

type AddPicTagsRequest struct {
	PicId string   `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	Tag   []string `protobuf:"bytes,2,rep,name=tag" json:"tag,omitempty"`
}

func (m *AddPicTagsRequest) Reset()                    { *m = AddPicTagsRequest{} }
func (m *AddPicTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPicTagsRequest) ProtoMessage()               {}
func (*AddPicTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AddPicTagsRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *AddPicTagsRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

type AddPicTagsResponse struct {
}

func (m *AddPicTagsResponse) Reset()                    { *m = AddPicTagsResponse{} }
func (m *AddPicTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPicTagsResponse) ProtoMessage()               {}
func (*AddPicTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CreatePicRequest struct {
	// file_data is the contents of the pic.  Either file_data or file_url must be present.
	// If sent as part of a stream, this field will be the only one read after the first message.
	FileData []byte `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	// optional, only used if file_data is present.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// URL to get the pic from.  Either file_data or file_url must be present.
	FileUrl string   `protobuf:"bytes,3,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	Tag     []string `protobuf:"bytes,4,rep,name=tag" json:"tag,omitempty"`
}

func (m *CreatePicRequest) Reset()                    { *m = CreatePicRequest{} }
func (m *CreatePicRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePicRequest) ProtoMessage()               {}
func (*CreatePicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreatePicRequest) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *CreatePicRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *CreatePicRequest) GetFileUrl() string {
	if m != nil {
		return m.FileUrl
	}
	return ""
}

func (m *CreatePicRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

type CreatePicResponse struct {
	Pic *Pic `protobuf:"bytes,1,opt,name=pic" json:"pic,omitempty"`
}

func (m *CreatePicResponse) Reset()                    { *m = CreatePicResponse{} }
func (m *CreatePicResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePicResponse) ProtoMessage()               {}
func (*CreatePicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreatePicResponse) GetPic() *Pic {
	if m != nil {
		return m.Pic
	}
	return nil
}

type FindSimilarPicsRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *FindSimilarPicsRequest) Reset()                    { *m = FindSimilarPicsRequest{} }
func (m *FindSimilarPicsRequest) String() string            { return proto.CompactTextString(m) }
func (*FindSimilarPicsRequest) ProtoMessage()               {}
func (*FindSimilarPicsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FindSimilarPicsRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

type FindSimilarPicsResponse struct {
	PicId []string `protobuf:"bytes,1,rep,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *FindSimilarPicsResponse) Reset()                    { *m = FindSimilarPicsResponse{} }
func (m *FindSimilarPicsResponse) String() string            { return proto.CompactTextString(m) }
func (*FindSimilarPicsResponse) ProtoMessage()               {}
func (*FindSimilarPicsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FindSimilarPicsResponse) GetPicId() []string {
	if m != nil {
		return m.PicId
	}
	return nil
}

type IncrementViewCountRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *IncrementViewCountRequest) Reset()                    { *m = IncrementViewCountRequest{} }
func (m *IncrementViewCountRequest) String() string            { return proto.CompactTextString(m) }
func (*IncrementViewCountRequest) ProtoMessage()               {}
func (*IncrementViewCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IncrementViewCountRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

type IncrementViewCountResponse struct {
}

func (m *IncrementViewCountResponse) Reset()                    { *m = IncrementViewCountResponse{} }
func (m *IncrementViewCountResponse) String() string            { return proto.CompactTextString(m) }
func (*IncrementViewCountResponse) ProtoMessage()               {}
func (*IncrementViewCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type PurgePicRequest struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
}

func (m *PurgePicRequest) Reset()                    { *m = PurgePicRequest{} }
func (m *PurgePicRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgePicRequest) ProtoMessage()               {}
func (*PurgePicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PurgePicRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

type PurgePicResponse struct {
}

func (m *PurgePicResponse) Reset()                    { *m = PurgePicResponse{} }
func (m *PurgePicResponse) String() string            { return proto.CompactTextString(m) }
func (*PurgePicResponse) ProtoMessage()               {}
func (*PurgePicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type SoftDeletePicRequest struct {
	PicId        string                      `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	Details      string                      `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	Reason       DeletionReason              `protobuf:"varint,3,opt,name=reason,enum=pixur.api.DeletionReason" json:"reason,omitempty"`
	DeletionTime *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=deletion_time,json=deletionTime" json:"deletion_time,omitempty"`
}

func (m *SoftDeletePicRequest) Reset()                    { *m = SoftDeletePicRequest{} }
func (m *SoftDeletePicRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftDeletePicRequest) ProtoMessage()               {}
func (*SoftDeletePicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SoftDeletePicRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *SoftDeletePicRequest) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *SoftDeletePicRequest) GetReason() DeletionReason {
	if m != nil {
		return m.Reason
	}
	return DeletionReason_UNKNOWN
}

func (m *SoftDeletePicRequest) GetDeletionTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.DeletionTime
	}
	return nil
}

type SoftDeletePicResponse struct {
}

func (m *SoftDeletePicResponse) Reset()                    { *m = SoftDeletePicResponse{} }
func (m *SoftDeletePicResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftDeletePicResponse) ProtoMessage()               {}
func (*SoftDeletePicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type UpsertPicRequest struct {
	Url     string   `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Data    []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Md5Hash []byte   `protobuf:"bytes,4,opt,name=md5_hash,json=md5Hash,proto3" json:"md5_hash,omitempty"`
	Tag     []string `protobuf:"bytes,5,rep,name=tag" json:"tag,omitempty"`
}

func (m *UpsertPicRequest) Reset()                    { *m = UpsertPicRequest{} }
func (m *UpsertPicRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertPicRequest) ProtoMessage()               {}
func (*UpsertPicRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UpsertPicRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UpsertPicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpsertPicRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UpsertPicRequest) GetMd5Hash() []byte {
	if m != nil {
		return m.Md5Hash
	}
	return nil
}

func (m *UpsertPicRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

type UpsertPicResponse struct {
	Pic *Pic `protobuf:"bytes,1,opt,name=pic" json:"pic,omitempty"`
}

func (m *UpsertPicResponse) Reset()                    { *m = UpsertPicResponse{} }
func (m *UpsertPicResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertPicResponse) ProtoMessage()               {}
func (*UpsertPicResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpsertPicResponse) GetPic() *Pic {
	if m != nil {
		return m.Pic
	}
	return nil
}

type CreateUserRequest struct {
	// ident is the unique identity of the user being created, usually an email address
	Ident string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
	// secret is the secret string used to authenticate the user, usually a password
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CreateUserRequest) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *CreateUserRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type CreateUserResponse struct {
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type GetRefreshTokenRequest struct {
	// ident is the unique identity of the user being created, usually an email address
	Ident string `protobuf:"bytes,1,opt,name=ident" json:"ident,omitempty"`
	// secret is the secret string used to authenticate the user, usually a password
	Secret       string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *GetRefreshTokenRequest) Reset()                    { *m = GetRefreshTokenRequest{} }
func (m *GetRefreshTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRefreshTokenRequest) ProtoMessage()               {}
func (*GetRefreshTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetRefreshTokenRequest) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *GetRefreshTokenRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *GetRefreshTokenRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type GetRefreshTokenResponse struct {
	RefreshToken   string      `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	AuthToken      string      `protobuf:"bytes,2,opt,name=auth_token,json=authToken" json:"auth_token,omitempty"`
	PixToken       string      `protobuf:"bytes,5,opt,name=pix_token,json=pixToken" json:"pix_token,omitempty"`
	RefreshPayload *PwtPayload `protobuf:"bytes,3,opt,name=refresh_payload,json=refreshPayload" json:"refresh_payload,omitempty"`
	AuthPayload    *PwtPayload `protobuf:"bytes,4,opt,name=auth_payload,json=authPayload" json:"auth_payload,omitempty"`
	PixPayload     *PwtPayload `protobuf:"bytes,6,opt,name=pix_payload,json=pixPayload" json:"pix_payload,omitempty"`
}

func (m *GetRefreshTokenResponse) Reset()                    { *m = GetRefreshTokenResponse{} }
func (m *GetRefreshTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRefreshTokenResponse) ProtoMessage()               {}
func (*GetRefreshTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetRefreshTokenResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *GetRefreshTokenResponse) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

func (m *GetRefreshTokenResponse) GetPixToken() string {
	if m != nil {
		return m.PixToken
	}
	return ""
}

func (m *GetRefreshTokenResponse) GetRefreshPayload() *PwtPayload {
	if m != nil {
		return m.RefreshPayload
	}
	return nil
}

func (m *GetRefreshTokenResponse) GetAuthPayload() *PwtPayload {
	if m != nil {
		return m.AuthPayload
	}
	return nil
}

func (m *GetRefreshTokenResponse) GetPixPayload() *PwtPayload {
	if m != nil {
		return m.PixPayload
	}
	return nil
}

type PwtHeader struct {
	Algorithm PwtHeader_Algorithm `protobuf:"varint,1,opt,name=algorithm,enum=pixur.api.PwtHeader_Algorithm" json:"algorithm,omitempty"`
	Version   int64               `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *PwtHeader) Reset()                    { *m = PwtHeader{} }
func (m *PwtHeader) String() string            { return proto.CompactTextString(m) }
func (*PwtHeader) ProtoMessage()               {}
func (*PwtHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *PwtHeader) GetAlgorithm() PwtHeader_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return PwtHeader_UNKNOWN
}

func (m *PwtHeader) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PwtPayload struct {
	Subject   string                      `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	NotBefore *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=not_before,json=notBefore" json:"not_before,omitempty"`
	NotAfter  *google_protobuf2.Timestamp `protobuf:"bytes,3,opt,name=not_after,json=notAfter" json:"not_after,omitempty"`
	// represents when this token should be reverified.  Optional.
	SoftNotAfter  *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=soft_not_after,json=softNotAfter" json:"soft_not_after,omitempty"`
	Issuer        string                      `protobuf:"bytes,4,opt,name=issuer" json:"issuer,omitempty"`
	TokenId       int64                       `protobuf:"varint,5,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenParentId int64                       `protobuf:"varint,8,opt,name=token_parent_id,json=tokenParentId" json:"token_parent_id,omitempty"`
	Type          PwtPayload_Type             `protobuf:"varint,7,opt,name=type,enum=pixur.api.PwtPayload_Type" json:"type,omitempty"`
}

func (m *PwtPayload) Reset()                    { *m = PwtPayload{} }
func (m *PwtPayload) String() string            { return proto.CompactTextString(m) }
func (*PwtPayload) ProtoMessage()               {}
func (*PwtPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *PwtPayload) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *PwtPayload) GetNotBefore() *google_protobuf2.Timestamp {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

func (m *PwtPayload) GetNotAfter() *google_protobuf2.Timestamp {
	if m != nil {
		return m.NotAfter
	}
	return nil
}

func (m *PwtPayload) GetSoftNotAfter() *google_protobuf2.Timestamp {
	if m != nil {
		return m.SoftNotAfter
	}
	return nil
}

func (m *PwtPayload) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *PwtPayload) GetTokenId() int64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *PwtPayload) GetTokenParentId() int64 {
	if m != nil {
		return m.TokenParentId
	}
	return 0
}

func (m *PwtPayload) GetType() PwtPayload_Type {
	if m != nil {
		return m.Type
	}
	return PwtPayload_UNKNOWN
}

type AddPicCommentRequest struct {
	PicId           string `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	CommentParentId string `protobuf:"bytes,2,opt,name=comment_parent_id,json=commentParentId" json:"comment_parent_id,omitempty"`
	Text            string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (m *AddPicCommentRequest) Reset()                    { *m = AddPicCommentRequest{} }
func (m *AddPicCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPicCommentRequest) ProtoMessage()               {}
func (*AddPicCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *AddPicCommentRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *AddPicCommentRequest) GetCommentParentId() string {
	if m != nil {
		return m.CommentParentId
	}
	return ""
}

func (m *AddPicCommentRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type AddPicCommentResponse struct {
	Comment *PicComment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (m *AddPicCommentResponse) Reset()                    { *m = AddPicCommentResponse{} }
func (m *AddPicCommentResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPicCommentResponse) ProtoMessage()               {}
func (*AddPicCommentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *AddPicCommentResponse) GetComment() *PicComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type DeleteTokenRequest struct {
}

func (m *DeleteTokenRequest) Reset()                    { *m = DeleteTokenRequest{} }
func (m *DeleteTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTokenRequest) ProtoMessage()               {}
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type DeleteTokenResponse struct {
}

func (m *DeleteTokenResponse) Reset()                    { *m = DeleteTokenResponse{} }
func (m *DeleteTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTokenResponse) ProtoMessage()               {}
func (*DeleteTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type UpsertPicVoteRequest struct {
	PicId string                    `protobuf:"bytes,1,opt,name=pic_id,json=picId" json:"pic_id,omitempty"`
	Vote  UpsertPicVoteRequest_Vote `protobuf:"varint,2,opt,name=vote,enum=pixur.api.UpsertPicVoteRequest_Vote" json:"vote,omitempty"`
}

func (m *UpsertPicVoteRequest) Reset()                    { *m = UpsertPicVoteRequest{} }
func (m *UpsertPicVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*UpsertPicVoteRequest) ProtoMessage()               {}
func (*UpsertPicVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *UpsertPicVoteRequest) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *UpsertPicVoteRequest) GetVote() UpsertPicVoteRequest_Vote {
	if m != nil {
		return m.Vote
	}
	return UpsertPicVoteRequest_UNKNOWN
}

type UpsertPicVoteResponse struct {
}

func (m *UpsertPicVoteResponse) Reset()                    { *m = UpsertPicVoteResponse{} }
func (m *UpsertPicVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*UpsertPicVoteResponse) ProtoMessage()               {}
func (*UpsertPicVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

type LookupPicFileRequest struct {
	PicFileId string         `protobuf:"bytes,1,opt,name=pic_file_id,json=picFileId" json:"pic_file_id,omitempty"`
	Format    PicFile_Format `protobuf:"varint,2,opt,name=format,enum=pixur.api.PicFile_Format" json:"format,omitempty"`
}

func (m *LookupPicFileRequest) Reset()                    { *m = LookupPicFileRequest{} }
func (m *LookupPicFileRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupPicFileRequest) ProtoMessage()               {}
func (*LookupPicFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *LookupPicFileRequest) GetPicFileId() string {
	if m != nil {
		return m.PicFileId
	}
	return ""
}

func (m *LookupPicFileRequest) GetFormat() PicFile_Format {
	if m != nil {
		return m.Format
	}
	return PicFile_UNKNOWN
}

type LookupPicFileResponse struct {
	PicFile *PicFile `protobuf:"bytes,1,opt,name=pic_file,json=picFile" json:"pic_file,omitempty"`
}

func (m *LookupPicFileResponse) Reset()                    { *m = LookupPicFileResponse{} }
func (m *LookupPicFileResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupPicFileResponse) ProtoMessage()               {}
func (*LookupPicFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *LookupPicFileResponse) GetPicFile() *PicFile {
	if m != nil {
		return m.PicFile
	}
	return nil
}

type ReadPicFileRequest struct {
	PicFileId string         `protobuf:"bytes,1,opt,name=pic_file_id,json=picFileId" json:"pic_file_id,omitempty"`
	Format    PicFile_Format `protobuf:"varint,2,opt,name=format,enum=pixur.api.PicFile_Format" json:"format,omitempty"`
	// The offset into the file to start reading at.  Required
	Offset int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	// The maximum number of bytes to read.   Maybe be 0.
	Limit int64 `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *ReadPicFileRequest) Reset()                    { *m = ReadPicFileRequest{} }
func (m *ReadPicFileRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadPicFileRequest) ProtoMessage()               {}
func (*ReadPicFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ReadPicFileRequest) GetPicFileId() string {
	if m != nil {
		return m.PicFileId
	}
	return ""
}

func (m *ReadPicFileRequest) GetFormat() PicFile_Format {
	if m != nil {
		return m.Format
	}
	return PicFile_UNKNOWN
}

func (m *ReadPicFileRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadPicFileRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ReadPicFileResponse struct {
	// may be empty
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// indicates that the end of the pic has been reached.
	Eof bool `protobuf:"varint,2,opt,name=eof" json:"eof,omitempty"`
}

func (m *ReadPicFileResponse) Reset()                    { *m = ReadPicFileResponse{} }
func (m *ReadPicFileResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadPicFileResponse) ProtoMessage()               {}
func (*ReadPicFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ReadPicFileResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReadPicFileResponse) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

type ServiceOpts struct {
	// a vaguely defined, but monotonically increasing "version".
	ApiVersion int64 `protobuf:"varint,1,opt,name=api_version,json=apiVersion" json:"api_version,omitempty"`
	// The header key used to when using an auth token.
	AuthTokenHeaderKey string `protobuf:"bytes,2,opt,name=auth_token_header_key,json=authTokenHeaderKey" json:"auth_token_header_key,omitempty"`
	// The header key used to when using a pix token.
	PixTokenHeaderKey string `protobuf:"bytes,3,opt,name=pix_token_header_key,json=pixTokenHeaderKey" json:"pix_token_header_key,omitempty"`
	// Used in responses (e.g. ReadPicFile) to indicate suggested http headers.
	// See pixur.api.HttpHeader
	HttpHeaderKey string `protobuf:"bytes,4,opt,name=http_header_key,json=httpHeaderKey" json:"http_header_key,omitempty"`
}

func (m *ServiceOpts) Reset()                    { *m = ServiceOpts{} }
func (m *ServiceOpts) String() string            { return proto.CompactTextString(m) }
func (*ServiceOpts) ProtoMessage()               {}
func (*ServiceOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ServiceOpts) GetApiVersion() int64 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *ServiceOpts) GetAuthTokenHeaderKey() string {
	if m != nil {
		return m.AuthTokenHeaderKey
	}
	return ""
}

func (m *ServiceOpts) GetPixTokenHeaderKey() string {
	if m != nil {
		return m.PixTokenHeaderKey
	}
	return ""
}

func (m *ServiceOpts) GetHttpHeaderKey() string {
	if m != nil {
		return m.HttpHeaderKey
	}
	return ""
}

// HttpHeader is a message included as a header on some responses.  It is only a suggestion.
// See pixur.api.ServiceOpts.http_header_key
type HttpHeader struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HttpHeader) Reset()                    { *m = HttpHeader{} }
func (m *HttpHeader) String() string            { return proto.CompactTextString(m) }
func (*HttpHeader) ProtoMessage()               {}
func (*HttpHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *HttpHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HttpHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

var E_PixurServiceOpts = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*ServiceOpts)(nil),
	Field:         65537,
	Name:          "pixur.api.pixur_service_opts",
	Tag:           "bytes,65537,opt,name=pixur_service_opts,json=pixurServiceOpts",
	Filename:      "api.proto",
}

func init() {
	proto.RegisterType((*Pic)(nil), "pixur.api.Pic")
	proto.RegisterType((*PicFile)(nil), "pixur.api.PicFile")
	proto.RegisterType((*PicTag)(nil), "pixur.api.PicTag")
	proto.RegisterType((*PicComment)(nil), "pixur.api.PicComment")
	proto.RegisterType((*User)(nil), "pixur.api.User")
	proto.RegisterType((*Capability)(nil), "pixur.api.Capability")
	proto.RegisterType((*LookupUserRequest)(nil), "pixur.api.LookupUserRequest")
	proto.RegisterType((*LookupUserResponse)(nil), "pixur.api.LookupUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "pixur.api.UpdateUserRequest")
	proto.RegisterType((*UpdateUserRequest_ChangeIdent)(nil), "pixur.api.UpdateUserRequest.ChangeIdent")
	proto.RegisterType((*UpdateUserRequest_ChangeSecret)(nil), "pixur.api.UpdateUserRequest.ChangeSecret")
	proto.RegisterType((*UpdateUserRequest_ChangeCapability)(nil), "pixur.api.UpdateUserRequest.ChangeCapability")
	proto.RegisterType((*UpdateUserResponse)(nil), "pixur.api.UpdateUserResponse")
	proto.RegisterType((*PicCommentTree)(nil), "pixur.api.PicCommentTree")
	proto.RegisterType((*LookupPicDetailsRequest)(nil), "pixur.api.LookupPicDetailsRequest")
	proto.RegisterType((*LookupPicDetailsResponse)(nil), "pixur.api.LookupPicDetailsResponse")
	proto.RegisterType((*FindIndexPicsRequest)(nil), "pixur.api.FindIndexPicsRequest")
	proto.RegisterType((*FindIndexPicsResponse)(nil), "pixur.api.FindIndexPicsResponse")
	proto.RegisterType((*AddPicTagsRequest)(nil), "pixur.api.AddPicTagsRequest")
	proto.RegisterType((*AddPicTagsResponse)(nil), "pixur.api.AddPicTagsResponse")
	proto.RegisterType((*CreatePicRequest)(nil), "pixur.api.CreatePicRequest")
	proto.RegisterType((*CreatePicResponse)(nil), "pixur.api.CreatePicResponse")
	proto.RegisterType((*FindSimilarPicsRequest)(nil), "pixur.api.FindSimilarPicsRequest")
	proto.RegisterType((*FindSimilarPicsResponse)(nil), "pixur.api.FindSimilarPicsResponse")
	proto.RegisterType((*IncrementViewCountRequest)(nil), "pixur.api.IncrementViewCountRequest")
	proto.RegisterType((*IncrementViewCountResponse)(nil), "pixur.api.IncrementViewCountResponse")
	proto.RegisterType((*PurgePicRequest)(nil), "pixur.api.PurgePicRequest")
	proto.RegisterType((*PurgePicResponse)(nil), "pixur.api.PurgePicResponse")
	proto.RegisterType((*SoftDeletePicRequest)(nil), "pixur.api.SoftDeletePicRequest")
	proto.RegisterType((*SoftDeletePicResponse)(nil), "pixur.api.SoftDeletePicResponse")
	proto.RegisterType((*UpsertPicRequest)(nil), "pixur.api.UpsertPicRequest")
	proto.RegisterType((*UpsertPicResponse)(nil), "pixur.api.UpsertPicResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "pixur.api.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "pixur.api.CreateUserResponse")
	proto.RegisterType((*GetRefreshTokenRequest)(nil), "pixur.api.GetRefreshTokenRequest")
	proto.RegisterType((*GetRefreshTokenResponse)(nil), "pixur.api.GetRefreshTokenResponse")
	proto.RegisterType((*PwtHeader)(nil), "pixur.api.PwtHeader")
	proto.RegisterType((*PwtPayload)(nil), "pixur.api.PwtPayload")
	proto.RegisterType((*AddPicCommentRequest)(nil), "pixur.api.AddPicCommentRequest")
	proto.RegisterType((*AddPicCommentResponse)(nil), "pixur.api.AddPicCommentResponse")
	proto.RegisterType((*DeleteTokenRequest)(nil), "pixur.api.DeleteTokenRequest")
	proto.RegisterType((*DeleteTokenResponse)(nil), "pixur.api.DeleteTokenResponse")
	proto.RegisterType((*UpsertPicVoteRequest)(nil), "pixur.api.UpsertPicVoteRequest")
	proto.RegisterType((*UpsertPicVoteResponse)(nil), "pixur.api.UpsertPicVoteResponse")
	proto.RegisterType((*LookupPicFileRequest)(nil), "pixur.api.LookupPicFileRequest")
	proto.RegisterType((*LookupPicFileResponse)(nil), "pixur.api.LookupPicFileResponse")
	proto.RegisterType((*ReadPicFileRequest)(nil), "pixur.api.ReadPicFileRequest")
	proto.RegisterType((*ReadPicFileResponse)(nil), "pixur.api.ReadPicFileResponse")
	proto.RegisterType((*ServiceOpts)(nil), "pixur.api.ServiceOpts")
	proto.RegisterType((*HttpHeader)(nil), "pixur.api.HttpHeader")
	proto.RegisterEnum("pixur.api.DeletionReason", DeletionReason_name, DeletionReason_value)
	proto.RegisterEnum("pixur.api.PicFile_Format", PicFile_Format_name, PicFile_Format_value)
	proto.RegisterEnum("pixur.api.Capability_Cap", Capability_Cap_name, Capability_Cap_value)
	proto.RegisterEnum("pixur.api.PwtHeader_Algorithm", PwtHeader_Algorithm_name, PwtHeader_Algorithm_value)
	proto.RegisterEnum("pixur.api.PwtPayload_Type", PwtPayload_Type_name, PwtPayload_Type_value)
	proto.RegisterEnum("pixur.api.UpsertPicVoteRequest_Vote", UpsertPicVoteRequest_Vote_name, UpsertPicVoteRequest_Vote_value)
	proto.RegisterExtension(E_PixurServiceOpts)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PixurService service

type PixurServiceClient interface {
	AddPicComment(ctx context.Context, in *AddPicCommentRequest, opts ...grpc.CallOption) (*AddPicCommentResponse, error)
	AddPicTags(ctx context.Context, in *AddPicTagsRequest, opts ...grpc.CallOption) (*AddPicTagsResponse, error)
	CreatePic(ctx context.Context, in *CreatePicRequest, opts ...grpc.CallOption) (*CreatePicResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error)
	FindIndexPics(ctx context.Context, in *FindIndexPicsRequest, opts ...grpc.CallOption) (*FindIndexPicsResponse, error)
	FindSimilarPics(ctx context.Context, in *FindSimilarPicsRequest, opts ...grpc.CallOption) (*FindSimilarPicsResponse, error)
	GetRefreshToken(ctx context.Context, in *GetRefreshTokenRequest, opts ...grpc.CallOption) (*GetRefreshTokenResponse, error)
	IncrementViewCount(ctx context.Context, in *IncrementViewCountRequest, opts ...grpc.CallOption) (*IncrementViewCountResponse, error)
	LookupPicDetails(ctx context.Context, in *LookupPicDetailsRequest, opts ...grpc.CallOption) (*LookupPicDetailsResponse, error)
	LookupPicFile(ctx context.Context, in *LookupPicFileRequest, opts ...grpc.CallOption) (*LookupPicFileResponse, error)
	ReadPicFile(ctx context.Context, opts ...grpc.CallOption) (PixurService_ReadPicFileClient, error)
	LookupUser(ctx context.Context, in *LookupUserRequest, opts ...grpc.CallOption) (*LookupUserResponse, error)
	PurgePic(ctx context.Context, in *PurgePicRequest, opts ...grpc.CallOption) (*PurgePicResponse, error)
	SoftDeletePic(ctx context.Context, in *SoftDeletePicRequest, opts ...grpc.CallOption) (*SoftDeletePicResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpsertPic(ctx context.Context, in *UpsertPicRequest, opts ...grpc.CallOption) (*UpsertPicResponse, error)
	UpsertPicVote(ctx context.Context, in *UpsertPicVoteRequest, opts ...grpc.CallOption) (*UpsertPicVoteResponse, error)
}

type pixurServiceClient struct {
	cc *grpc.ClientConn
}

func NewPixurServiceClient(cc *grpc.ClientConn) PixurServiceClient {
	return &pixurServiceClient{cc}
}

func (c *pixurServiceClient) AddPicComment(ctx context.Context, in *AddPicCommentRequest, opts ...grpc.CallOption) (*AddPicCommentResponse, error) {
	out := new(AddPicCommentResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/AddPicComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) AddPicTags(ctx context.Context, in *AddPicTagsRequest, opts ...grpc.CallOption) (*AddPicTagsResponse, error) {
	out := new(AddPicTagsResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/AddPicTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) CreatePic(ctx context.Context, in *CreatePicRequest, opts ...grpc.CallOption) (*CreatePicResponse, error) {
	out := new(CreatePicResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/CreatePic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/DeleteToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) FindIndexPics(ctx context.Context, in *FindIndexPicsRequest, opts ...grpc.CallOption) (*FindIndexPicsResponse, error) {
	out := new(FindIndexPicsResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/FindIndexPics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) FindSimilarPics(ctx context.Context, in *FindSimilarPicsRequest, opts ...grpc.CallOption) (*FindSimilarPicsResponse, error) {
	out := new(FindSimilarPicsResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/FindSimilarPics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) GetRefreshToken(ctx context.Context, in *GetRefreshTokenRequest, opts ...grpc.CallOption) (*GetRefreshTokenResponse, error) {
	out := new(GetRefreshTokenResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/GetRefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) IncrementViewCount(ctx context.Context, in *IncrementViewCountRequest, opts ...grpc.CallOption) (*IncrementViewCountResponse, error) {
	out := new(IncrementViewCountResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/IncrementViewCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) LookupPicDetails(ctx context.Context, in *LookupPicDetailsRequest, opts ...grpc.CallOption) (*LookupPicDetailsResponse, error) {
	out := new(LookupPicDetailsResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/LookupPicDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) LookupPicFile(ctx context.Context, in *LookupPicFileRequest, opts ...grpc.CallOption) (*LookupPicFileResponse, error) {
	out := new(LookupPicFileResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/LookupPicFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) ReadPicFile(ctx context.Context, opts ...grpc.CallOption) (PixurService_ReadPicFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PixurService_serviceDesc.Streams[0], c.cc, "/pixur.api.PixurService/ReadPicFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pixurServiceReadPicFileClient{stream}
	return x, nil
}

type PixurService_ReadPicFileClient interface {
	Send(*ReadPicFileRequest) error
	Recv() (*ReadPicFileResponse, error)
	grpc.ClientStream
}

type pixurServiceReadPicFileClient struct {
	grpc.ClientStream
}

func (x *pixurServiceReadPicFileClient) Send(m *ReadPicFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pixurServiceReadPicFileClient) Recv() (*ReadPicFileResponse, error) {
	m := new(ReadPicFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pixurServiceClient) LookupUser(ctx context.Context, in *LookupUserRequest, opts ...grpc.CallOption) (*LookupUserResponse, error) {
	out := new(LookupUserResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/LookupUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) PurgePic(ctx context.Context, in *PurgePicRequest, opts ...grpc.CallOption) (*PurgePicResponse, error) {
	out := new(PurgePicResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/PurgePic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) SoftDeletePic(ctx context.Context, in *SoftDeletePicRequest, opts ...grpc.CallOption) (*SoftDeletePicResponse, error) {
	out := new(SoftDeletePicResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/SoftDeletePic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) UpsertPic(ctx context.Context, in *UpsertPicRequest, opts ...grpc.CallOption) (*UpsertPicResponse, error) {
	out := new(UpsertPicResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/UpsertPic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixurServiceClient) UpsertPicVote(ctx context.Context, in *UpsertPicVoteRequest, opts ...grpc.CallOption) (*UpsertPicVoteResponse, error) {
	out := new(UpsertPicVoteResponse)
	err := grpc.Invoke(ctx, "/pixur.api.PixurService/UpsertPicVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PixurService service

type PixurServiceServer interface {
	AddPicComment(context.Context, *AddPicCommentRequest) (*AddPicCommentResponse, error)
	AddPicTags(context.Context, *AddPicTagsRequest) (*AddPicTagsResponse, error)
	CreatePic(context.Context, *CreatePicRequest) (*CreatePicResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
	FindIndexPics(context.Context, *FindIndexPicsRequest) (*FindIndexPicsResponse, error)
	FindSimilarPics(context.Context, *FindSimilarPicsRequest) (*FindSimilarPicsResponse, error)
	GetRefreshToken(context.Context, *GetRefreshTokenRequest) (*GetRefreshTokenResponse, error)
	IncrementViewCount(context.Context, *IncrementViewCountRequest) (*IncrementViewCountResponse, error)
	LookupPicDetails(context.Context, *LookupPicDetailsRequest) (*LookupPicDetailsResponse, error)
	LookupPicFile(context.Context, *LookupPicFileRequest) (*LookupPicFileResponse, error)
	ReadPicFile(PixurService_ReadPicFileServer) error
	LookupUser(context.Context, *LookupUserRequest) (*LookupUserResponse, error)
	PurgePic(context.Context, *PurgePicRequest) (*PurgePicResponse, error)
	SoftDeletePic(context.Context, *SoftDeletePicRequest) (*SoftDeletePicResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpsertPic(context.Context, *UpsertPicRequest) (*UpsertPicResponse, error)
	UpsertPicVote(context.Context, *UpsertPicVoteRequest) (*UpsertPicVoteResponse, error)
}

func RegisterPixurServiceServer(s *grpc.Server, srv PixurServiceServer) {
	s.RegisterService(&_PixurService_serviceDesc, srv)
}

func _PixurService_AddPicComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPicCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).AddPicComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/AddPicComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).AddPicComment(ctx, req.(*AddPicCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_AddPicTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPicTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).AddPicTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/AddPicTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).AddPicTags(ctx, req.(*AddPicTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_CreatePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).CreatePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/CreatePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).CreatePic(ctx, req.(*CreatePicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_FindIndexPics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIndexPicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).FindIndexPics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/FindIndexPics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).FindIndexPics(ctx, req.(*FindIndexPicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_FindSimilarPics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSimilarPicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).FindSimilarPics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/FindSimilarPics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).FindSimilarPics(ctx, req.(*FindSimilarPicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_GetRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).GetRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/GetRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).GetRefreshToken(ctx, req.(*GetRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_IncrementViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementViewCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).IncrementViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/IncrementViewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).IncrementViewCount(ctx, req.(*IncrementViewCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_LookupPicDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupPicDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).LookupPicDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/LookupPicDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).LookupPicDetails(ctx, req.(*LookupPicDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_LookupPicFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupPicFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).LookupPicFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/LookupPicFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).LookupPicFile(ctx, req.(*LookupPicFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_ReadPicFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PixurServiceServer).ReadPicFile(&pixurServiceReadPicFileServer{stream})
}

type PixurService_ReadPicFileServer interface {
	Send(*ReadPicFileResponse) error
	Recv() (*ReadPicFileRequest, error)
	grpc.ServerStream
}

type pixurServiceReadPicFileServer struct {
	grpc.ServerStream
}

func (x *pixurServiceReadPicFileServer) Send(m *ReadPicFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pixurServiceReadPicFileServer) Recv() (*ReadPicFileRequest, error) {
	m := new(ReadPicFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PixurService_LookupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).LookupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/LookupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).LookupUser(ctx, req.(*LookupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_PurgePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgePicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).PurgePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/PurgePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).PurgePic(ctx, req.(*PurgePicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_SoftDeletePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftDeletePicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).SoftDeletePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/SoftDeletePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).SoftDeletePic(ctx, req.(*SoftDeletePicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_UpsertPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).UpsertPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/UpsertPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).UpsertPic(ctx, req.(*UpsertPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixurService_UpsertPicVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPicVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixurServiceServer).UpsertPicVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixur.api.PixurService/UpsertPicVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixurServiceServer).UpsertPicVote(ctx, req.(*UpsertPicVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PixurService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pixur.api.PixurService",
	HandlerType: (*PixurServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPicComment",
			Handler:    _PixurService_AddPicComment_Handler,
		},
		{
			MethodName: "AddPicTags",
			Handler:    _PixurService_AddPicTags_Handler,
		},
		{
			MethodName: "CreatePic",
			Handler:    _PixurService_CreatePic_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _PixurService_CreateUser_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _PixurService_DeleteToken_Handler,
		},
		{
			MethodName: "FindIndexPics",
			Handler:    _PixurService_FindIndexPics_Handler,
		},
		{
			MethodName: "FindSimilarPics",
			Handler:    _PixurService_FindSimilarPics_Handler,
		},
		{
			MethodName: "GetRefreshToken",
			Handler:    _PixurService_GetRefreshToken_Handler,
		},
		{
			MethodName: "IncrementViewCount",
			Handler:    _PixurService_IncrementViewCount_Handler,
		},
		{
			MethodName: "LookupPicDetails",
			Handler:    _PixurService_LookupPicDetails_Handler,
		},
		{
			MethodName: "LookupPicFile",
			Handler:    _PixurService_LookupPicFile_Handler,
		},
		{
			MethodName: "LookupUser",
			Handler:    _PixurService_LookupUser_Handler,
		},
		{
			MethodName: "PurgePic",
			Handler:    _PixurService_PurgePic_Handler,
		},
		{
			MethodName: "SoftDeletePic",
			Handler:    _PixurService_SoftDeletePic_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _PixurService_UpdateUser_Handler,
		},
		{
			MethodName: "UpsertPic",
			Handler:    _PixurService_UpsertPic_Handler,
		},
		{
			MethodName: "UpsertPicVote",
			Handler:    _PixurService_UpsertPicVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadPicFile",
			Handler:       _PixurService_ReadPicFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x18, 0x4b, 0x8f, 0x23, 0x47,
	0x99, 0x76, 0x7b, 0x6c, 0xf7, 0xe7, 0x57, 0x4f, 0x65, 0x66, 0xd6, 0xeb, 0x7d, 0xc4, 0xf4, 0x92,
	0x68, 0x12, 0xb1, 0xde, 0x64, 0xc2, 0x86, 0x2c, 0x1b, 0x12, 0xbc, 0x33, 0x9e, 0x1d, 0x27, 0xb3,
	0x1e, 0xab, 0xc7, 0x9e, 0x0d, 0x48, 0xa8, 0xe9, 0x75, 0x97, 0xed, 0x62, 0x6d, 0x77, 0xd3, 0x5d,
	0xde, 0x9d, 0xe1, 0x14, 0x38, 0x72, 0x42, 0x42, 0x08, 0x09, 0x72, 0xe0, 0xc4, 0x01, 0xf1, 0x07,
	0x80, 0xbf, 0x80, 0xc4, 0x15, 0x21, 0xb8, 0xf1, 0x43, 0x50, 0x3d, 0xda, 0xdd, 0x6d, 0x7b, 0x1e,
	0x9b, 0x08, 0x89, 0x5b, 0xd5, 0xf7, 0xaa, 0xaf, 0xbe, 0xfa, 0x9e, 0x05, 0x9a, 0xed, 0x91, 0xba,
	0xe7, 0xbb, 0xd4, 0x45, 0x9a, 0x47, 0x4e, 0x67, 0x7e, 0xdd, 0xf6, 0x48, 0xb5, 0x36, 0x74, 0xdd,
	0xe1, 0x18, 0xdf, 0xe3, 0x88, 0x67, 0xb3, 0xc1, 0x3d, 0x07, 0x07, 0x7d, 0x9f, 0x78, 0xd4, 0xf5,
	0x05, 0x71, 0xf5, 0xf6, 0x12, 0xc5, 0xcc, 0xb7, 0x29, 0x71, 0xa7, 0x12, 0xff, 0xfa, 0x22, 0x9e,
	0x92, 0x09, 0x0e, 0xa8, 0x3d, 0xf1, 0x04, 0x81, 0xf1, 0x9b, 0x34, 0xa8, 0x1d, 0xd2, 0x47, 0x25,
	0x48, 0x11, 0xa7, 0xa2, 0xd4, 0x94, 0x6d, 0xcd, 0x4c, 0x11, 0x07, 0x6d, 0xc0, 0xda, 0x4b, 0xe2,
	0xd0, 0x51, 0x25, 0x55, 0x53, 0xb6, 0xd7, 0x4c, 0xb1, 0x41, 0x5b, 0x90, 0x19, 0x61, 0x32, 0x1c,
	0xd1, 0x8a, 0xca, 0xc1, 0x72, 0x87, 0x2a, 0x90, 0x7d, 0x81, 0xfd, 0x80, 0xb8, 0xd3, 0x4a, 0xba,
	0xa6, 0x6c, 0xeb, 0x66, 0xb8, 0x45, 0x5b, 0x90, 0xa6, 0x67, 0x1e, 0xae, 0xac, 0x31, 0xc9, 0x8f,
	0x52, 0x15, 0xc5, 0xe4, 0x7b, 0xf4, 0x5d, 0x28, 0xf4, 0x7d, 0x6c, 0x53, 0xec, 0x58, 0x4c, 0xa5,
	0x4a, 0xa9, 0xa6, 0x6c, 0xe7, 0x77, 0xaa, 0x75, 0xa1, 0x6f, 0x3d, 0xd4, 0xb7, 0xde, 0x0d, 0xf5,
	0x35, 0xf3, 0x92, 0x9e, 0x41, 0xd0, 0xc7, 0x50, 0x9c, 0xb8, 0x0e, 0x19, 0x90, 0x90, 0xbf, 0x7c,
	0x29, 0x7f, 0x21, 0x64, 0xe0, 0x02, 0xde, 0x80, 0x82, 0x8f, 0xc7, 0x36, 0x25, 0x2f, 0xb0, 0x35,
	0xf3, 0xc7, 0x95, 0xcc, 0x5c, 0xbf, 0x7c, 0x08, 0xef, 0xf9, 0x63, 0xf4, 0x01, 0x6c, 0xd1, 0xd1,
	0x6c, 0xf2, 0x6c, 0x6a, 0x93, 0xb1, 0x95, 0x60, 0xc8, 0xce, 0x19, 0x36, 0xe6, 0x14, 0x66, 0x8c,
	0xf3, 0x2d, 0xd0, 0x3d, 0x3c, 0x75, 0xc8, 0x74, 0x68, 0x39, 0x78, 0x8c, 0xd9, 0x9b, 0x54, 0xb4,
	0x9a, 0xb2, 0x9d, 0x33, 0xcb, 0x12, 0xbe, 0x27, 0xc1, 0xe8, 0x16, 0xc0, 0x0b, 0x82, 0x5f, 0x5a,
	0x7d, 0x77, 0x36, 0xa5, 0x15, 0xa8, 0x29, 0xdb, 0xaa, 0xa9, 0x31, 0xc8, 0x2e, 0x03, 0xa0, 0x07,
	0x90, 0x0b, 0x5f, 0xb5, 0x92, 0xe7, 0xd7, 0xbc, 0xbe, 0x74, 0xcd, 0x3d, 0x49, 0xc0, 0x15, 0x9a,
	0x93, 0xa3, 0xeb, 0x90, 0x0b, 0xfa, 0xae, 0x8f, 0xad, 0xb1, 0x5b, 0x29, 0xd4, 0x94, 0x6d, 0xc5,
	0xcc, 0xf2, 0xfd, 0xa1, 0x1b, 0xa1, 0x46, 0xa4, 0x52, 0x8c, 0xa1, 0x0e, 0xc8, 0x27, 0xe9, 0x5c,
	0x4e, 0xd7, 0x8c, 0xdf, 0xab, 0x90, 0xed, 0x90, 0xfe, 0x3e, 0x19, 0xe3, 0x25, 0xef, 0x78, 0x17,
	0x32, 0x03, 0xd7, 0x9f, 0xd8, 0x94, 0xbb, 0x47, 0x69, 0xe7, 0x7a, 0x7d, 0xee, 0xb4, 0x75, 0xc9,
	0x53, 0xdf, 0xe7, 0x04, 0xa6, 0x24, 0x8c, 0x1c, 0x4a, 0x5d, 0xed, 0x50, 0xe9, 0x84, 0x43, 0xdd,
	0x8f, 0xdd, 0x79, 0xed, 0x92, 0x3b, 0xc7, 0xee, 0x7b, 0x13, 0xb4, 0xf9, 0x63, 0xf0, 0x27, 0xcd,
	0x99, 0x11, 0x60, 0xc9, 0xe7, 0xb2, 0x5f, 0xd1, 0xe7, 0x72, 0xaf, 0xe8, 0x73, 0x08, 0xd2, 0x01,
	0xf9, 0x29, 0xe6, 0x6e, 0xa0, 0x9a, 0x7c, 0x6d, 0x3c, 0x84, 0x8c, 0x30, 0x14, 0xca, 0x43, 0xb6,
	0xd7, 0xfe, 0xb4, 0x7d, 0xf4, 0xb4, 0xad, 0x7f, 0x0d, 0xe5, 0x20, 0xfd, 0x49, 0xa7, 0xf9, 0x58,
	0x57, 0x50, 0x16, 0xd4, 0xc7, 0xad, 0x7d, 0x3d, 0xc5, 0x16, 0x9d, 0xf6, 0x63, 0x5d, 0x65, 0xb8,
	0xa7, 0xcd, 0x47, 0x4f, 0xf4, 0xb4, 0xf1, 0x1f, 0x05, 0x32, 0x1d, 0xd2, 0xef, 0xda, 0x43, 0xb4,
	0x09, 0x19, 0x8f, 0xf4, 0xad, 0xf9, 0x2b, 0xad, 0x79, 0xa4, 0xdf, 0x72, 0x18, 0x98, 0xda, 0x43,
	0x06, 0x4e, 0x09, 0x30, 0xb5, 0x87, 0x2d, 0x87, 0x69, 0x32, 0xb5, 0x27, 0x98, 0xbf, 0x85, 0x66,
	0xf2, 0xf5, 0x92, 0x75, 0xd2, 0x5f, 0xd1, 0x3a, 0x6b, 0xaf, 0x68, 0x9d, 0x58, 0x0e, 0xc9, 0x24,
	0x72, 0x88, 0xf1, 0x45, 0x0a, 0xa0, 0x43, 0xfa, 0xbb, 0xee, 0x64, 0x82, 0xa7, 0xf4, 0xbc, 0xab,
	0xde, 0x02, 0xe8, 0x0b, 0x8a, 0xe8, 0xba, 0x9a, 0x84, 0xb4, 0x1c, 0xf4, 0x36, 0xac, 0x87, 0x68,
	0xcf, 0xf6, 0x25, 0x95, 0xb8, 0x7f, 0x59, 0x22, 0x3a, 0x1c, 0x2e, 0xcc, 0x43, 0xf1, 0x29, 0x15,
	0x31, 0x6e, 0xf2, 0xf5, 0xff, 0xb1, 0x79, 0xfe, 0x96, 0x82, 0x74, 0x2f, 0xc0, 0x3e, 0xba, 0x06,
	0xd9, 0x59, 0x80, 0xfd, 0xc8, 0x32, 0x19, 0xb6, 0x6d, 0xf1, 0x64, 0x4e, 0x1c, 0x3c, 0xa5, 0xa1,
	0x13, 0xf0, 0xcd, 0xd2, 0x8d, 0xd4, 0xaf, 0x78, 0xa3, 0xf4, 0x2b, 0xde, 0xe8, 0x7b, 0x50, 0x1a,
	0xdb, 0x01, 0xb5, 0x02, 0x8c, 0xa7, 0x57, 0xb6, 0x09, 0xe3, 0x38, 0xc6, 0x78, 0x7a, 0xb1, 0x4d,
	0xd0, 0x03, 0x80, 0xbe, 0xed, 0xd9, 0xcf, 0xc8, 0x98, 0xd0, 0xb3, 0x4a, 0xb6, 0xa6, 0x2e, 0x24,
	0xa9, 0xdd, 0x39, 0x92, 0x2d, 0xcd, 0x18, 0xb1, 0xf1, 0xe7, 0x14, 0x40, 0x84, 0x36, 0xfe, 0x98,
	0x02, 0x75, 0xd7, 0xf6, 0x92, 0xe1, 0x59, 0x02, 0xe8, 0xb4, 0x76, 0xad, 0x5d, 0xb3, 0xd9, 0xe8,
	0x36, 0x75, 0x05, 0x15, 0x20, 0xc7, 0xf6, 0x66, 0xb3, 0xb1, 0xa7, 0xa7, 0x50, 0x11, 0x34, 0xb6,
	0x6b, 0xb5, 0xf7, 0x9a, 0x9f, 0xe9, 0x2a, 0x7a, 0x0d, 0xca, 0x6c, 0x7b, 0x7c, 0xb4, 0xdf, 0xb5,
	0xf6, 0x9a, 0x87, 0xcd, 0x6e, 0x53, 0x5f, 0x0b, 0x81, 0x07, 0x0d, 0x73, 0x2f, 0x04, 0x66, 0x42,
	0xc6, 0x4e, 0xcf, 0x7c, 0xdc, 0xd4, 0xb3, 0xe8, 0x06, 0x5c, 0x63, 0xdb, 0x5e, 0x67, 0xaf, 0xd1,
	0x6d, 0x5a, 0x27, 0xad, 0xe6, 0x53, 0x6b, 0xf7, 0xa8, 0xd7, 0xee, 0x36, 0x4d, 0x3d, 0x87, 0x10,
	0x94, 0x18, 0xb2, 0xdb, 0x78, 0x1c, 0xaa, 0xa1, 0xa1, 0x2d, 0x40, 0x5c, 0xad, 0xa3, 0x27, 0x4f,
	0x9a, 0xed, 0x6e, 0x08, 0x87, 0xf0, 0xb0, 0x93, 0xa3, 0x6e, 0x33, 0x04, 0xe6, 0x51, 0x19, 0xf2,
	0xbd, 0xe3, 0xa6, 0x19, 0x02, 0xd2, 0xa8, 0x0a, 0x5b, 0x1c, 0x20, 0xcf, 0xdb, 0x6d, 0x74, 0x1a,
	0x8f, 0x5a, 0x87, 0xad, 0xee, 0xf7, 0xf5, 0x02, 0x3b, 0x8d, 0xe3, 0xd8, 0x0d, 0xad, 0xe3, 0xe6,
	0xe1, 0xbe, 0x5e, 0x44, 0xeb, 0x50, 0x8c, 0x60, 0x8d, 0xc3, 0x43, 0xbd, 0x64, 0x7c, 0x13, 0xd6,
	0x0f, 0x5d, 0xf7, 0xf9, 0xcc, 0x63, 0xfe, 0x68, 0xe2, 0x9f, 0xcc, 0x70, 0x40, 0xcf, 0x75, 0x4b,
	0xe3, 0x01, 0xa0, 0x38, 0x75, 0xe0, 0xb9, 0xd3, 0x00, 0xa3, 0x3b, 0x90, 0x66, 0x78, 0x4e, 0x9b,
	0xdf, 0x29, 0xc7, 0x1e, 0x8d, 0x93, 0x71, 0xa4, 0xf1, 0xf3, 0x34, 0xac, 0xf7, 0x3c, 0xc7, 0xa6,
	0xf8, 0x2a, 0x27, 0xc5, 0x1d, 0x25, 0x95, 0x74, 0x94, 0x8f, 0xc2, 0xd0, 0x10, 0xde, 0xbf, 0x1d,
	0x3f, 0x6e, 0x51, 0x7e, 0x7d, 0x77, 0x64, 0x4f, 0x87, 0xb8, 0xc5, 0xe8, 0xc3, 0x20, 0x6a, 0x40,
	0x26, 0xc0, 0x7d, 0x1f, 0x53, 0xe9, 0xfe, 0x6f, 0x5d, 0x41, 0xc0, 0x31, 0x67, 0x30, 0x25, 0x23,
	0x7a, 0x92, 0xf0, 0x55, 0x11, 0x03, 0x77, 0xaf, 0x20, 0x26, 0x72, 0xd2, 0xb8, 0xff, 0x56, 0xef,
	0x40, 0x3e, 0xa6, 0x67, 0x14, 0xfb, 0x4a, 0x2c, 0xf6, 0xab, 0x6f, 0x42, 0x21, 0xae, 0x0b, 0xab,
	0xc3, 0xf2, 0x1a, 0xd2, 0x70, 0x62, 0x57, 0xfd, 0xad, 0x02, 0xfa, 0xe2, 0x69, 0x2c, 0x70, 0x03,
	0x4c, 0xad, 0x98, 0xd2, 0xca, 0x65, 0x01, 0x56, 0x0c, 0x30, 0x8d, 0x49, 0xd8, 0x03, 0xbd, 0x3f,
	0xc6, 0xb6, 0x1f, 0x97, 0x91, 0xba, 0x4c, 0x46, 0x99, 0xb3, 0xc4, 0x42, 0xf3, 0x01, 0xa0, 0xb8,
	0x6d, 0x5e, 0xc5, 0x7f, 0x1a, 0x50, 0x8a, 0x2a, 0x4a, 0xd7, 0xc7, 0x18, 0xdd, 0x83, 0xac, 0x2c,
	0x03, 0xfc, 0x36, 0xf9, 0x9d, 0xcd, 0x64, 0x4f, 0x23, 0x69, 0xcd, 0x90, 0xca, 0x78, 0x07, 0xae,
	0x09, 0xef, 0xed, 0x90, 0xfe, 0x1e, 0xa6, 0x36, 0x19, 0x07, 0xa1, 0x1f, 0xae, 0xae, 0x50, 0xc6,
	0xbf, 0x14, 0xa8, 0x2c, 0xb3, 0x48, 0xb5, 0x6b, 0xa0, 0x7a, 0xa4, 0x2f, 0xb5, 0x2e, 0x25, 0xcf,
	0x36, 0x19, 0x0a, 0xbd, 0x0d, 0x59, 0x26, 0x95, 0xda, 0x43, 0x6e, 0xab, 0xfc, 0xce, 0x7a, 0x92,
	0xaa, 0x6b, 0x0f, 0x4d, 0x76, 0x2e, 0x6b, 0x07, 0x76, 0x41, 0x67, 0xb4, 0x61, 0xc5, 0xa3, 0x3e,
	0x0e, 0xf3, 0xfb, 0xf5, 0x95, 0xd7, 0x62, 0x26, 0x30, 0x4b, 0x5e, 0xd2, 0x24, 0x77, 0x21, 0xc7,
	0x84, 0x0c, 0xc8, 0x98, 0x25, 0x77, 0x76, 0x22, 0x5a, 0xee, 0xf3, 0x4c, 0xa6, 0x14, 0x5b, 0x18,
	0x27, 0xb0, 0xb1, 0x4f, 0xa6, 0x4e, 0x6b, 0xea, 0xe0, 0xd3, 0x0e, 0xe9, 0xcf, 0xad, 0x51, 0x83,
	0x42, 0x40, 0x6d, 0x9f, 0x5a, 0x09, 0x9b, 0x00, 0x87, 0x75, 0x78, 0xe9, 0xbe, 0x09, 0x9a, 0x1d,
	0xf4, 0x45, 0x57, 0xcc, 0x03, 0x34, 0x67, 0x46, 0x00, 0xe3, 0x01, 0x6c, 0x2e, 0xc8, 0x5d, 0x34,
	0x99, 0x7a, 0x8e, 0xc9, 0x8c, 0x0f, 0x61, 0xbd, 0xe1, 0x38, 0xc2, 0x36, 0x97, 0xbc, 0x0e, 0xd2,
	0x41, 0x0d, 0x4d, 0xab, 0x99, 0x6c, 0x69, 0x6c, 0x00, 0x8a, 0x73, 0x8b, 0x53, 0x8d, 0x33, 0xd0,
	0x77, 0x79, 0x19, 0x64, 0xa7, 0x48, 0x91, 0x37, 0x40, 0x63, 0x56, 0xb2, 0x1c, 0x9b, 0xda, 0x5c,
	0x6a, 0xc1, 0xcc, 0x31, 0xc0, 0x9e, 0x4d, 0xed, 0x39, 0x92, 0x77, 0x5c, 0xa2, 0x02, 0x73, 0x64,
	0x9b, 0x75, 0x5d, 0xd7, 0x81, 0xaf, 0xf9, 0x48, 0x21, 0xba, 0x91, 0x2c, 0xdb, 0xb3, 0x09, 0x42,
	0x2a, 0x94, 0x8e, 0x14, 0xba, 0x0f, 0xeb, 0xb1, 0xa3, 0xaf, 0xea, 0x38, 0xc6, 0x3d, 0xd8, 0x62,
	0x06, 0x3c, 0x26, 0x13, 0x32, 0xb6, 0xfd, 0xf8, 0xd3, 0x9c, 0xe3, 0xa8, 0xef, 0xc0, 0xb5, 0x25,
	0x06, 0x79, 0x5a, 0x9c, 0x43, 0x8d, 0x38, 0x76, 0xe0, 0x7a, 0x6b, 0xda, 0xf7, 0x31, 0xf3, 0x9d,
	0x93, 0x70, 0x72, 0xb9, 0xe4, 0x94, 0x9b, 0x50, 0x5d, 0xc5, 0x23, 0xcd, 0xbc, 0x0d, 0xe5, 0xce,
	0xcc, 0x1f, 0xc6, 0xad, 0x7c, 0x8e, 0x1c, 0x04, 0x7a, 0x44, 0x29, 0xb9, 0xff, 0xaa, 0xc0, 0xc6,
	0xb1, 0x3b, 0xa0, 0x7c, 0xc6, 0xba, 0x5c, 0x06, 0x2b, 0x10, 0x8e, 0x08, 0x48, 0xf9, 0x42, 0xe1,
	0x96, 0x8d, 0x3a, 0x3e, 0xb6, 0x03, 0x77, 0xca, 0x9f, 0x27, 0x99, 0xa0, 0xc2, 0x09, 0xce, 0xe4,
	0x04, 0xa6, 0x24, 0x64, 0x9d, 0x51, 0x38, 0xf2, 0x5d, 0xb9, 0x33, 0x0a, 0x19, 0x18, 0xc8, 0xb8,
	0x06, 0x9b, 0x0b, 0xca, 0x47, 0xbe, 0xd7, 0xf3, 0x02, 0xcc, 0xe3, 0x26, 0xbc, 0x91, 0x0e, 0x2a,
	0x73, 0x1e, 0x71, 0x1d, 0xb6, 0x9c, 0x77, 0xf7, 0xa9, 0x58, 0x77, 0x8f, 0x20, 0xcd, 0x9d, 0x53,
	0xe5, 0xce, 0xc9, 0xd7, 0xcc, 0xf7, 0x26, 0xce, 0x7d, 0x6b, 0x64, 0x07, 0x23, 0xae, 0x62, 0xc1,
	0xcc, 0x4e, 0x9c, 0xfb, 0x07, 0x76, 0x30, 0x0a, 0x7d, 0x6f, 0x2d, 0xe1, 0x7b, 0xb1, 0xa3, 0xaf,
	0xec, 0x7b, 0x8d, 0xd0, 0x65, 0xe3, 0x75, 0x7a, 0x65, 0x4d, 0x8a, 0xd5, 0xa0, 0x54, 0xbc, 0x06,
	0xb1, 0x30, 0x8c, 0x8b, 0x90, 0xa6, 0x78, 0x0e, 0x5b, 0x8f, 0x31, 0x35, 0xf1, 0xc0, 0xc7, 0xc1,
	0xa8, 0xeb, 0x3e, 0xc7, 0xd3, 0x2f, 0x25, 0x1d, 0xdd, 0x81, 0xa2, 0x2f, 0x84, 0x58, 0x94, 0x49,
	0x91, 0x51, 0x58, 0xf0, 0x63, 0x92, 0x8d, 0x3f, 0xa5, 0xe0, 0xda, 0xd2, 0x69, 0xf3, 0x7a, 0xb3,
	0x20, 0x40, 0x59, 0x16, 0xc0, 0x86, 0x13, 0x7b, 0x46, 0x43, 0x0a, 0x39, 0x9c, 0x30, 0x88, 0x40,
	0xdf, 0x00, 0xcd, 0x23, 0xa7, 0x12, 0xbb, 0x26, 0x52, 0x84, 0x47, 0x4e, 0x05, 0xf2, 0x23, 0x28,
	0x87, 0x07, 0x78, 0xf6, 0xd9, 0xd8, 0xb5, 0x1d, 0x99, 0xca, 0x13, 0x15, 0xea, 0x25, 0xed, 0x08,
	0xa4, 0x59, 0x92, 0xd4, 0x72, 0x8f, 0x3e, 0x80, 0x02, 0x3f, 0x3b, 0x64, 0x4e, 0x5f, 0xc4, 0x9c,
	0x67, 0xa4, 0x21, 0xe7, 0xfb, 0x90, 0x67, 0x6a, 0x85, 0x8c, 0x99, 0x8b, 0x18, 0xc1, 0x23, 0xa7,
	0x72, 0x6d, 0xfc, 0x4a, 0x01, 0xad, 0xf3, 0x92, 0x1e, 0x60, 0xdb, 0xc1, 0x3e, 0xfa, 0x10, 0x34,
	0x7b, 0x3c, 0x74, 0x7d, 0x42, 0x47, 0x13, 0x6e, 0x9c, 0xd2, 0xce, 0xed, 0xa4, 0x0c, 0x41, 0x58,
	0x6f, 0x84, 0x54, 0x66, 0xc4, 0xb0, 0xd8, 0xba, 0xa9, 0xd1, 0xdc, 0x53, 0x07, 0x6d, 0xce, 0x91,
	0x6c, 0xcf, 0x35, 0x58, 0x3b, 0x38, 0xde, 0xb9, 0xff, 0xbe, 0xae, 0xb0, 0xa5, 0xc9, 0x97, 0x29,
	0xe3, 0x0b, 0x15, 0x20, 0x52, 0x98, 0x09, 0x0e, 0x66, 0xcf, 0x7e, 0x8c, 0xfb, 0xa1, 0xa3, 0x84,
	0x5b, 0x36, 0x3c, 0x4c, 0x5d, 0x6a, 0x3d, 0xc3, 0x03, 0xd7, 0x17, 0x51, 0x74, 0x71, 0xf0, 0x6a,
	0x53, 0x97, 0x3e, 0xe2, 0xc4, 0xe8, 0xdb, 0xc0, 0x36, 0x96, 0x3d, 0xa0, 0xd8, 0xbf, 0xc2, 0x40,
	0x95, 0x9b, 0xba, 0xb4, 0xc1, 0x68, 0x79, 0x4f, 0xe5, 0x0e, 0xa8, 0x15, 0x71, 0x67, 0x2e, 0x4f,
	0x1a, 0x8c, 0xa3, 0x1d, 0x4a, 0xd8, 0x82, 0x0c, 0x09, 0x82, 0x19, 0xf6, 0xf9, 0x03, 0x6b, 0xa6,
	0xdc, 0xb1, 0x28, 0xe7, 0x7e, 0xc5, 0x72, 0xde, 0x9a, 0xb0, 0x20, 0xdf, 0xb7, 0x1c, 0xf4, 0x26,
	0x94, 0x05, 0x2a, 0x9a, 0x88, 0x73, 0x9c, 0xa2, 0xc8, 0xc1, 0xf3, 0x79, 0xb8, 0x2e, 0x3f, 0xf1,
	0xb2, 0xfc, 0xf1, 0xaa, 0x2b, 0x1d, 0xa0, 0xde, 0x3d, 0xf3, 0xb0, 0xf8, 0xdc, 0x33, 0xde, 0x83,
	0x34, 0xdb, 0x25, 0x1f, 0x25, 0x0f, 0x59, 0xb3, 0xb9, 0x6f, 0x36, 0x8f, 0x0f, 0x74, 0x05, 0xe5,
	0x20, 0xdd, 0xe8, 0x75, 0x0f, 0xe4, 0xb7, 0x46, 0xeb, 0x33, 0x5d, 0x35, 0x26, 0xb0, 0x21, 0xaa,
	0x6d, 0xd8, 0x69, 0x5d, 0x9c, 0xb1, 0x57, 0xce, 0xf3, 0xa9, 0x8b, 0xe7, 0x79, 0x35, 0x9a, 0xe7,
	0x8d, 0x03, 0xd8, 0x5c, 0x38, 0x4e, 0xc6, 0x73, 0xa2, 0x11, 0x54, 0xae, 0xd0, 0x08, 0x6e, 0x00,
	0x12, 0x99, 0x3a, 0x9e, 0x85, 0x8c, 0x4d, 0x78, 0x2d, 0x01, 0x95, 0x69, 0xeb, 0x77, 0x0a, 0x6c,
	0xcc, 0xf3, 0xe8, 0x89, 0x4b, 0xf1, 0x25, 0xd7, 0xfc, 0x00, 0xd2, 0x2f, 0x5c, 0x8a, 0xe5, 0x3f,
	0xdb, 0x37, 0x12, 0x63, 0xc1, 0xb2, 0x94, 0x3a, 0x5f, 0x73, 0x0e, 0x63, 0x07, 0xd2, 0x6c, 0x97,
	0x7c, 0x84, 0x0c, 0xa4, 0x7a, 0x1d, 0x61, 0xff, 0x3d, 0x06, 0x49, 0x31, 0x74, 0xbb, 0xd9, 0xeb,
	0x9a, 0x8d, 0x43, 0x5d, 0x65, 0x85, 0x67, 0x41, 0xac, 0x54, 0x9b, 0xc0, 0xc6, 0xbc, 0x73, 0xe5,
	0x5d, 0x9f, 0xd4, 0xfa, 0x36, 0xcb, 0x10, 0xa2, 0x45, 0x8c, 0x54, 0xd7, 0x64, 0x47, 0xd8, 0xfa,
	0x32, 0x1f, 0x85, 0xc6, 0x3e, 0x6c, 0x2e, 0x1c, 0x25, 0x1f, 0x26, 0xde, 0x8e, 0x8a, 0x97, 0xb9,
	0xb0, 0x1d, 0xfd, 0xb5, 0x02, 0xc8, 0xc4, 0xb6, 0xf3, 0x3f, 0xd7, 0x98, 0x45, 0x9e, 0x3b, 0x18,
	0x04, 0x58, 0x38, 0x98, 0x6a, 0xca, 0x1d, 0x2b, 0x44, 0x63, 0x32, 0x21, 0x62, 0x34, 0x54, 0x4d,
	0xb1, 0x31, 0x1e, 0xc2, 0x6b, 0x09, 0xb5, 0xe4, 0xed, 0xc2, 0x02, 0xad, 0xc4, 0x0a, 0xb4, 0x0e,
	0x2a, 0x76, 0x07, 0xb2, 0x23, 0x66, 0x4b, 0xe3, 0x2f, 0x0a, 0xe4, 0x8f, 0xb1, 0xff, 0x82, 0xf4,
	0xf1, 0x91, 0x47, 0x03, 0xf4, 0x3a, 0xe4, 0x6d, 0x8f, 0x58, 0x61, 0x86, 0x54, 0xf8, 0x41, 0x60,
	0x7b, 0xe4, 0x44, 0xce, 0xb7, 0xef, 0xc2, 0x66, 0x54, 0x78, 0xac, 0x11, 0x4f, 0xb4, 0xd6, 0x73,
	0x7c, 0x26, 0x43, 0x05, 0xcd, 0x6b, 0x90, 0xc8, 0xc1, 0x9f, 0xe2, 0x33, 0x74, 0x0f, 0x36, 0xe6,
	0xc5, 0x28, 0xce, 0x21, 0xa2, 0x67, 0x3d, 0xac, 0x4b, 0x11, 0xc3, 0x9b, 0x50, 0x1e, 0x51, 0xea,
	0xc5, 0x69, 0x45, 0x0a, 0x2a, 0x32, 0xf0, 0x9c, 0xce, 0xf8, 0x16, 0xc0, 0xc1, 0x1c, 0xc0, 0x2e,
	0xc7, 0x28, 0x65, 0xdf, 0xf2, 0x1c, 0x9f, 0x31, 0x7b, 0xbd, 0xb0, 0xc7, 0xb3, 0xb0, 0x71, 0x11,
	0x9b, 0xb7, 0x1f, 0x42, 0x29, 0xd9, 0x67, 0x2d, 0xfd, 0x94, 0xb6, 0x8f, 0xda, 0x4d, 0x5d, 0x41,
	0x08, 0x4a, 0x66, 0xef, 0xb0, 0x69, 0x9d, 0xb4, 0x8e, 0x0e, 0x1b, 0xdd, 0xd6, 0x51, 0x5b, 0x4f,
	0xed, 0xfc, 0xa1, 0x00, 0x85, 0x0e, 0x7b, 0x3f, 0x69, 0x34, 0x64, 0x42, 0x31, 0x11, 0xf6, 0xe8,
	0xf5, 0xd8, 0xfb, 0xae, 0xca, 0x3f, 0xd5, 0xda, 0xf9, 0x04, 0xf2, 0xe9, 0x5a, 0x00, 0xd1, 0x9c,
	0x80, 0x6e, 0x2e, 0xd1, 0xc7, 0x86, 0x8f, 0xea, 0xad, 0x73, 0xb0, 0x52, 0xd4, 0x3e, 0x68, 0xf3,
	0x0e, 0x1f, 0xdd, 0x88, 0xcf, 0xc2, 0x0b, 0x23, 0x47, 0xf5, 0xe6, 0x6a, 0x64, 0xa4, 0x52, 0xd4,
	0x33, 0xa1, 0x65, 0xda, 0x58, 0x37, 0x96, 0x50, 0x69, 0xb9, 0xd1, 0x42, 0x87, 0x90, 0x8f, 0x25,
	0x32, 0x74, 0x6b, 0xb1, 0xff, 0x4d, 0xa4, 0xbd, 0xea, 0xed, 0xf3, 0xd0, 0x52, 0xda, 0x53, 0x28,
	0x26, 0x86, 0xb9, 0x84, 0xfd, 0x57, 0x8d, 0x8f, 0x09, 0xfb, 0xaf, 0x9c, 0x03, 0x0d, 0xf5, 0x97,
	0x29, 0x05, 0xfd, 0x10, 0xca, 0x0b, 0x33, 0x0b, 0xfa, 0xfa, 0x02, 0xe7, 0xf2, 0x00, 0x54, 0x35,
	0x2e, 0x22, 0x89, 0x8b, 0xff, 0x0c, 0xca, 0x0b, 0x0d, 0x60, 0x42, 0xfc, 0xea, 0x56, 0x34, 0x21,
	0xfe, 0xbc, 0xfe, 0xd1, 0x06, 0xb4, 0x3c, 0x06, 0xa1, 0x78, 0xa6, 0x3f, 0x77, 0xb2, 0xaa, 0xbe,
	0x71, 0x09, 0x95, 0x3c, 0xe2, 0x47, 0xa0, 0x2f, 0xfe, 0x3b, 0xa0, 0xb8, 0x6a, 0xe7, 0xfc, 0x63,
	0x54, 0xef, 0x5c, 0x48, 0x13, 0x37, 0xcf, 0x53, 0x28, 0x26, 0x92, 0x76, 0xe2, 0x59, 0x57, 0x55,
	0x8e, 0xc4, 0xb3, 0xae, 0xcc, 0xf7, 0x42, 0x70, 0x0f, 0xf2, 0xb1, 0x6c, 0x99, 0xf0, 0xbe, 0xe5,
	0xe4, 0x9e, 0xf0, 0xbe, 0x15, 0x49, 0x96, 0x8b, 0xdc, 0x56, 0xde, 0x51, 0x50, 0x1b, 0x20, 0xfa,
	0x7a, 0x4c, 0xc4, 0xc7, 0xd2, 0xff, 0x65, 0x22, 0x3e, 0x96, 0xff, 0x2b, 0x85, 0x9a, 0xbb, 0x90,
	0x0b, 0x67, 0x50, 0x94, 0xe8, 0x8f, 0x92, 0x23, 0x6c, 0xf5, 0xc6, 0x4a, 0x9c, 0x7c, 0x26, 0x13,
	0x8a, 0x89, 0xb1, 0x2f, 0x61, 0xc4, 0x55, 0xd3, 0x6c, 0xc2, 0x88, 0x2b, 0x27, 0x46, 0x96, 0x08,
	0xa2, 0x3f, 0xb2, 0xc4, 0x45, 0x97, 0xbe, 0x15, 0x13, 0x17, 0x5d, 0xf1, 0xb1, 0xb6, 0x0f, 0xda,
	0xbc, 0x39, 0x48, 0xe4, 0xa6, 0xc5, 0x91, 0xb4, 0x7a, 0x73, 0x35, 0x32, 0xba, 0x66, 0xa2, 0xc9,
	0x48, 0x5c, 0x73, 0x55, 0x57, 0x93, 0xb8, 0xe6, 0xca, 0xfe, 0xa4, 0xfa, 0xf1, 0x2f, 0x3e, 0xaf,
	0x3d, 0xcc, 0xfd, 0xfb, 0x9f, 0x7f, 0xd7, 0x90, 0xce, 0xf3, 0xfd, 0xdd, 0xc6, 0x8c, 0x8e, 0xee,
	0xf2, 0x48, 0xab, 0x96, 0x05, 0xa4, 0x43, 0x4e, 0x05, 0xc0, 0x58, 0x17, 0x80, 0x83, 0x6e, 0xb7,
	0x73, 0x57, 0x54, 0xa3, 0xef, 0x0c, 0x01, 0xf1, 0x33, 0xac, 0x40, 0x14, 0x0a, 0xcb, 0xe5, 0xe5,
	0x75, 0xa9, 0xfb, 0x8e, 0x8a, 0x2f, 0x71, 0xa7, 0x41, 0xe5, 0x67, 0x9f, 0x8b, 0x69, 0x6a, 0x2b,
	0xfe, 0x10, 0x51, 0x7d, 0x36, 0x75, 0x2f, 0x56, 0x7c, 0x18, 0xe4, 0xd1, 0x0d, 0x28, 0xba, 0xfe,
	0x30, 0x22, 0x3f, 0x48, 0x75, 0x94, 0x1f, 0xa8, 0xb6, 0x47, 0xfe, 0xa1, 0x28, 0xcf, 0x32, 0xfc,
	0x9c, 0xf7, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x1d, 0xa9, 0xec, 0x0f, 0x20, 0x00, 0x00,
}
