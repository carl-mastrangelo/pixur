// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Copy of schema.proto
type DeletionReason int32

const (
	// The reason is not know, due to limitations of proto
	DeletionReason_UNKNOWN DeletionReason = 0
	// No specific reason.  This is a catch-all reason.
	DeletionReason_NONE DeletionReason = 1
	// The pic is in violation of the rules.
	DeletionReason_RULE_VIOLATION DeletionReason = 2
)

var DeletionReason_name = map[int32]string{
	0: "UNKNOWN",
	1: "NONE",
	2: "RULE_VIOLATION",
}

var DeletionReason_value = map[string]int32{
	"UNKNOWN":        0,
	"NONE":           1,
	"RULE_VIOLATION": 2,
}

func (x DeletionReason) String() string {
	return proto.EnumName(DeletionReason_name, int32(x))
}

func (DeletionReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}

type Capability_Cap int32

const (
	Capability_UNKNOWN Capability_Cap = 0
	// Can this user create and upload pictures
	Capability_PIC_CREATE Capability_Cap = 1
	// Can this user view the actual image data (grants pic token)
	Capability_PIC_READ Capability_Cap = 2
	// Can this user perform general pic index queries?
	Capability_PIC_INDEX Capability_Cap = 3
	// Can this user soft delete a pic?
	Capability_PIC_SOFT_DELETE Capability_Cap = 5
	// Can this user hard delete a pic?
	Capability_PIC_HARD_DELETE Capability_Cap = 6
	// Can this user purge a pic?
	Capability_PIC_PURGE Capability_Cap = 7
	// Can this user increment the pic view counter?
	Capability_PIC_UPDATE_VIEW_COUNTER Capability_Cap = 8
	// Can this user add tags and pic tags?
	Capability_PIC_TAG_CREATE Capability_Cap = 9
	// Can this user create comments?
	Capability_PIC_COMMENT_CREATE Capability_Cap = 10
	// Can this user vote?
	Capability_PIC_VOTE_CREATE Capability_Cap = 11
	// Can this user create other users?
	Capability_USER_CREATE Capability_Cap = 4
	// Can this user modify capabilities?
	Capability_USER_UPDATE_CAPABILITY Capability_Cap = 12
	// Can this user read information about themselves?
	Capability_USER_READ_SELF Capability_Cap = 13
	// Can this user read infortmation about others?
	Capability_USER_READ_ALL Capability_Cap = 14
	// Can this user create arbitrary extension data on a pic?
	Capability_PIC_EXTENSION_CREATE Capability_Cap = 15
	// Can this user read arbitrary extension data on a pic?
	Capability_PIC_EXTENSION_READ Capability_Cap = 16
	// Can this user create arbitrary extension data on a comment?
	Capability_PIC_COMMENT_EXTENSION_CREATE Capability_Cap = 17
	// Can this user read arbitrary extension data on a comment?
	Capability_PIC_COMMENT_EXTENSION_READ Capability_Cap = 18
	// Can this user create arbitrary extension data on a pic tag?
	Capability_PIC_TAG_EXTENSION_CREATE Capability_Cap = 19
	// Can this user read arbitrary extension data on a pic tag?
	Capability_PIC_TAG_EXTENSION_READ Capability_Cap = 20
	// Can this user create arbitrary extension data on a pic vote?
	Capability_PIC_VOTE_EXTENSION_CREATE Capability_Cap = 21
	// Can this user read arbitrary extension data on a pic vote?
	Capability_PIC_VOTE_EXTENSION_READ Capability_Cap = 22
	// Can this user read public information about other users?  Currently,
	// public means user id, user name, and created time
	Capability_USER_READ_PUBLIC Capability_Cap = 23
	// Can this user read pics that other users have created?  Currently,
	// this is Pic.FileSource.User and UserEvents.UpsertPic.
	Capability_USER_READ_PICS Capability_Cap = 24
	// Can this user read pic tags that other users have created?  Currently,
	// this is PicTag.UserId.
	Capability_USER_READ_PIC_TAG Capability_Cap = 25
	// Can this user read pic comments that other users have created?  This
	// implies that a user can see who else made comments.
	Capability_USER_READ_PIC_COMMENT Capability_Cap = 26
	// Can this user read pic votes that other users have created?  This
	// implies that a user can see who voted on a pic, and what votes they
	// have made.
	Capability_USER_READ_PIC_VOTE Capability_Cap = 27
	// Can this user vote on pic comments?
	Capability_PIC_COMMENT_VOTE_CREATE Capability_Cap = 28
	// Can this user create arbitrary extension data on a comment vote?
	Capability_PIC_COMMENT_VOTE_EXTENSION_CREATE Capability_Cap = 29
)

var Capability_Cap_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "PIC_CREATE",
	2:  "PIC_READ",
	3:  "PIC_INDEX",
	5:  "PIC_SOFT_DELETE",
	6:  "PIC_HARD_DELETE",
	7:  "PIC_PURGE",
	8:  "PIC_UPDATE_VIEW_COUNTER",
	9:  "PIC_TAG_CREATE",
	10: "PIC_COMMENT_CREATE",
	11: "PIC_VOTE_CREATE",
	4:  "USER_CREATE",
	12: "USER_UPDATE_CAPABILITY",
	13: "USER_READ_SELF",
	14: "USER_READ_ALL",
	15: "PIC_EXTENSION_CREATE",
	16: "PIC_EXTENSION_READ",
	17: "PIC_COMMENT_EXTENSION_CREATE",
	18: "PIC_COMMENT_EXTENSION_READ",
	19: "PIC_TAG_EXTENSION_CREATE",
	20: "PIC_TAG_EXTENSION_READ",
	21: "PIC_VOTE_EXTENSION_CREATE",
	22: "PIC_VOTE_EXTENSION_READ",
	23: "USER_READ_PUBLIC",
	24: "USER_READ_PICS",
	25: "USER_READ_PIC_TAG",
	26: "USER_READ_PIC_COMMENT",
	27: "USER_READ_PIC_VOTE",
	28: "PIC_COMMENT_VOTE_CREATE",
	29: "PIC_COMMENT_VOTE_EXTENSION_CREATE",
}

var Capability_Cap_value = map[string]int32{
	"UNKNOWN":                           0,
	"PIC_CREATE":                        1,
	"PIC_READ":                          2,
	"PIC_INDEX":                         3,
	"PIC_SOFT_DELETE":                   5,
	"PIC_HARD_DELETE":                   6,
	"PIC_PURGE":                         7,
	"PIC_UPDATE_VIEW_COUNTER":           8,
	"PIC_TAG_CREATE":                    9,
	"PIC_COMMENT_CREATE":                10,
	"PIC_VOTE_CREATE":                   11,
	"USER_CREATE":                       4,
	"USER_UPDATE_CAPABILITY":            12,
	"USER_READ_SELF":                    13,
	"USER_READ_ALL":                     14,
	"PIC_EXTENSION_CREATE":              15,
	"PIC_EXTENSION_READ":                16,
	"PIC_COMMENT_EXTENSION_CREATE":      17,
	"PIC_COMMENT_EXTENSION_READ":        18,
	"PIC_TAG_EXTENSION_CREATE":          19,
	"PIC_TAG_EXTENSION_READ":            20,
	"PIC_VOTE_EXTENSION_CREATE":         21,
	"PIC_VOTE_EXTENSION_READ":           22,
	"USER_READ_PUBLIC":                  23,
	"USER_READ_PICS":                    24,
	"USER_READ_PIC_TAG":                 25,
	"USER_READ_PIC_COMMENT":             26,
	"USER_READ_PIC_VOTE":                27,
	"PIC_COMMENT_VOTE_CREATE":           28,
	"PIC_COMMENT_VOTE_EXTENSION_CREATE": 29,
}

func (x Capability_Cap) String() string {
	return proto.EnumName(Capability_Cap_name, int32(x))
}

func (Capability_Cap) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{1, 0}
}

type PicCommentVote_Vote int32

const (
	PicCommentVote_UNKNOWN PicCommentVote_Vote = 0
	PicCommentVote_UP      PicCommentVote_Vote = 1
	PicCommentVote_DOWN    PicCommentVote_Vote = 2
	PicCommentVote_NEUTRAL PicCommentVote_Vote = 3
)

var PicCommentVote_Vote_name = map[int32]string{
	0: "UNKNOWN",
	1: "UP",
	2: "DOWN",
	3: "NEUTRAL",
}

var PicCommentVote_Vote_value = map[string]int32{
	"UNKNOWN": 0,
	"UP":      1,
	"DOWN":    2,
	"NEUTRAL": 3,
}

func (x PicCommentVote_Vote) String() string {
	return proto.EnumName(PicCommentVote_Vote_name, int32(x))
}

func (PicCommentVote_Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{6, 0}
}

type PicFile_Format int32

const (
	PicFile_UNKNOWN PicFile_Format = 0
	PicFile_JPEG    PicFile_Format = 1
	PicFile_GIF     PicFile_Format = 2
	PicFile_PNG     PicFile_Format = 3
	PicFile_WEBM    PicFile_Format = 4
	PicFile_MP4     PicFile_Format = 5
)

var PicFile_Format_name = map[int32]string{
	0: "UNKNOWN",
	1: "JPEG",
	2: "GIF",
	3: "PNG",
	4: "WEBM",
	5: "MP4",
}

var PicFile_Format_value = map[string]int32{
	"UNKNOWN": 0,
	"JPEG":    1,
	"GIF":     2,
	"PNG":     3,
	"WEBM":    4,
	"MP4":     5,
}

func (x PicFile_Format) String() string {
	return proto.EnumName(PicFile_Format_name, int32(x))
}

func (PicFile_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{7, 0}
}

type PicVote_Vote int32

const (
	PicVote_UNKNOWN PicVote_Vote = 0
	PicVote_UP      PicVote_Vote = 1
	PicVote_DOWN    PicVote_Vote = 2
	PicVote_NEUTRAL PicVote_Vote = 3
)

var PicVote_Vote_name = map[int32]string{
	0: "UNKNOWN",
	1: "UP",
	2: "DOWN",
	3: "NEUTRAL",
}

var PicVote_Vote_value = map[string]int32{
	"UNKNOWN": 0,
	"UP":      1,
	"DOWN":    2,
	"NEUTRAL": 3,
}

func (x PicVote_Vote) String() string {
	return proto.EnumName(PicVote_Vote_name, int32(x))
}

func (PicVote_Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{10, 0}
}

type PwtHeader_Algorithm int32

const (
	PwtHeader_UNKNOWN   PwtHeader_Algorithm = 0
	PwtHeader_HS256     PwtHeader_Algorithm = 1
	PwtHeader_RS256     PwtHeader_Algorithm = 2
	PwtHeader_HS512_256 PwtHeader_Algorithm = 3
)

var PwtHeader_Algorithm_name = map[int32]string{
	0: "UNKNOWN",
	1: "HS256",
	2: "RS256",
	3: "HS512_256",
}

var PwtHeader_Algorithm_value = map[string]int32{
	"UNKNOWN":   0,
	"HS256":     1,
	"RS256":     2,
	"HS512_256": 3,
}

func (x PwtHeader_Algorithm) String() string {
	return proto.EnumName(PwtHeader_Algorithm_name, int32(x))
}

func (PwtHeader_Algorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{12, 0}
}

type PwtPayload_Type int32

const (
	PwtPayload_UNKNOWN PwtPayload_Type = 0
	PwtPayload_AUTH    PwtPayload_Type = 2
	PwtPayload_PIX     PwtPayload_Type = 3
)

var PwtPayload_Type_name = map[int32]string{
	0: "UNKNOWN",
	2: "AUTH",
	3: "PIX",
}

var PwtPayload_Type_value = map[string]int32{
	"UNKNOWN": 0,
	"AUTH":    2,
	"PIX":     3,
}

func (x PwtPayload_Type) String() string {
	return proto.EnumName(PwtPayload_Type_name, int32(x))
}

func (PwtPayload_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{13, 0}
}

// BackendConfiguration is the backend configuration used by Pixur.  All fields are optional
// unless explicitly called out.
type BackendConfiguration struct {
	// the minimum comment length in bytes.
	MinCommentLength *wrappers.Int64Value `protobuf:"bytes,1,opt,name=min_comment_length,json=minCommentLength,proto3" json:"min_comment_length,omitempty"`
	// the maximum comment length in bytes.
	MaxCommentLength *wrappers.Int64Value `protobuf:"bytes,2,opt,name=max_comment_length,json=maxCommentLength,proto3" json:"max_comment_length,omitempty"`
	// the minimum ident length for a user in bytes.
	MinIdentLength *wrappers.Int64Value `protobuf:"bytes,3,opt,name=min_ident_length,json=minIdentLength,proto3" json:"min_ident_length,omitempty"`
	// the maximum ident length for a user in bytes.
	MaxIdentLength *wrappers.Int64Value `protobuf:"bytes,4,opt,name=max_ident_length,json=maxIdentLength,proto3" json:"max_ident_length,omitempty"`
	// the minimum file name length in bytes.
	MinFileNameLength *wrappers.Int64Value `protobuf:"bytes,5,opt,name=min_file_name_length,json=minFileNameLength,proto3" json:"min_file_name_length,omitempty"`
	// the maximum file name length in bytes.
	MaxFileNameLength *wrappers.Int64Value `protobuf:"bytes,6,opt,name=max_file_name_length,json=maxFileNameLength,proto3" json:"max_file_name_length,omitempty"`
	// the minimum url length for pic upsert in bytes.
	MinUrlLength *wrappers.Int64Value `protobuf:"bytes,7,opt,name=min_url_length,json=minUrlLength,proto3" json:"min_url_length,omitempty"`
	// the maximum url length for pic upsert in bytes.
	MaxUrlLength *wrappers.Int64Value `protobuf:"bytes,8,opt,name=max_url_length,json=maxUrlLength,proto3" json:"max_url_length,omitempty"`
	// the minimum tag length in bytes.
	MinTagLength *wrappers.Int64Value `protobuf:"bytes,9,opt,name=min_tag_length,json=minTagLength,proto3" json:"min_tag_length,omitempty"`
	// the maximum tag length in bytes.
	MaxTagLength *wrappers.Int64Value `protobuf:"bytes,10,opt,name=max_tag_length,json=maxTagLength,proto3" json:"max_tag_length,omitempty"`
	// the capabilities of the anonymous user.
	AnonymousCapability *BackendConfiguration_CapabilitySet `protobuf:"bytes,11,opt,name=anonymous_capability,json=anonymousCapability,proto3" json:"anonymous_capability,omitempty"`
	// the capabilities of a newly created user.
	NewUserCapability *BackendConfiguration_CapabilitySet `protobuf:"bytes,12,opt,name=new_user_capability,json=newUserCapability,proto3" json:"new_user_capability,omitempty"`
	// the default number of index pics to return
	DefaultFindIndexPics *wrappers.Int64Value `protobuf:"bytes,13,opt,name=default_find_index_pics,json=defaultFindIndexPics,proto3" json:"default_find_index_pics,omitempty"`
	// the max number of index pics to return
	MaxFindIndexPics *wrappers.Int64Value `protobuf:"bytes,14,opt,name=max_find_index_pics,json=maxFindIndexPics,proto3" json:"max_find_index_pics,omitempty"`
	// the max duration a WEBM/MP4 pic can be
	MaxVideoDuration *duration.Duration `protobuf:"bytes,15,opt,name=max_video_duration,json=maxVideoDuration,proto3" json:"max_video_duration,omitempty"`
	// allows users to reply to their own comments
	EnablePicCommentSelfReply *wrappers.BoolValue `protobuf:"bytes,16,opt,name=enable_pic_comment_self_reply,json=enablePicCommentSelfReply,proto3" json:"enable_pic_comment_self_reply,omitempty"`
	// allows a single user to reply multiple times to one comment
	EnablePicCommentSiblingReply *wrappers.BoolValue `protobuf:"bytes,17,opt,name=enable_pic_comment_sibling_reply,json=enablePicCommentSiblingReply,proto3" json:"enable_pic_comment_sibling_reply,omitempty"`
	// the default number of user events to return
	DefaultFindUserEvents *wrappers.Int64Value `protobuf:"bytes,18,opt,name=default_find_user_events,json=defaultFindUserEvents,proto3" json:"default_find_user_events,omitempty"`
	// the max number of user events to return
	MaxFindUserEvents    *wrappers.Int64Value `protobuf:"bytes,19,opt,name=max_find_user_events,json=maxFindUserEvents,proto3" json:"max_find_user_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BackendConfiguration) Reset()         { *m = BackendConfiguration{} }
func (m *BackendConfiguration) String() string { return proto.CompactTextString(m) }
func (*BackendConfiguration) ProtoMessage()    {}
func (*BackendConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0}
}

func (m *BackendConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackendConfiguration.Unmarshal(m, b)
}
func (m *BackendConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackendConfiguration.Marshal(b, m, deterministic)
}
func (m *BackendConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackendConfiguration.Merge(m, src)
}
func (m *BackendConfiguration) XXX_Size() int {
	return xxx_messageInfo_BackendConfiguration.Size(m)
}
func (m *BackendConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BackendConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BackendConfiguration proto.InternalMessageInfo

func (m *BackendConfiguration) GetMinCommentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinCommentLength
	}
	return nil
}

func (m *BackendConfiguration) GetMaxCommentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxCommentLength
	}
	return nil
}

func (m *BackendConfiguration) GetMinIdentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinIdentLength
	}
	return nil
}

func (m *BackendConfiguration) GetMaxIdentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxIdentLength
	}
	return nil
}

func (m *BackendConfiguration) GetMinFileNameLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinFileNameLength
	}
	return nil
}

func (m *BackendConfiguration) GetMaxFileNameLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxFileNameLength
	}
	return nil
}

func (m *BackendConfiguration) GetMinUrlLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinUrlLength
	}
	return nil
}

func (m *BackendConfiguration) GetMaxUrlLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxUrlLength
	}
	return nil
}

func (m *BackendConfiguration) GetMinTagLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinTagLength
	}
	return nil
}

func (m *BackendConfiguration) GetMaxTagLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTagLength
	}
	return nil
}

func (m *BackendConfiguration) GetAnonymousCapability() *BackendConfiguration_CapabilitySet {
	if m != nil {
		return m.AnonymousCapability
	}
	return nil
}

func (m *BackendConfiguration) GetNewUserCapability() *BackendConfiguration_CapabilitySet {
	if m != nil {
		return m.NewUserCapability
	}
	return nil
}

func (m *BackendConfiguration) GetDefaultFindIndexPics() *wrappers.Int64Value {
	if m != nil {
		return m.DefaultFindIndexPics
	}
	return nil
}

func (m *BackendConfiguration) GetMaxFindIndexPics() *wrappers.Int64Value {
	if m != nil {
		return m.MaxFindIndexPics
	}
	return nil
}

func (m *BackendConfiguration) GetMaxVideoDuration() *duration.Duration {
	if m != nil {
		return m.MaxVideoDuration
	}
	return nil
}

func (m *BackendConfiguration) GetEnablePicCommentSelfReply() *wrappers.BoolValue {
	if m != nil {
		return m.EnablePicCommentSelfReply
	}
	return nil
}

func (m *BackendConfiguration) GetEnablePicCommentSiblingReply() *wrappers.BoolValue {
	if m != nil {
		return m.EnablePicCommentSiblingReply
	}
	return nil
}

func (m *BackendConfiguration) GetDefaultFindUserEvents() *wrappers.Int64Value {
	if m != nil {
		return m.DefaultFindUserEvents
	}
	return nil
}

func (m *BackendConfiguration) GetMaxFindUserEvents() *wrappers.Int64Value {
	if m != nil {
		return m.MaxFindUserEvents
	}
	return nil
}

type BackendConfiguration_CapabilitySet struct {
	Capability           []Capability_Cap `protobuf:"varint,1,rep,packed,name=capability,proto3,enum=pixur.api.Capability_Cap" json:"capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BackendConfiguration_CapabilitySet) Reset()         { *m = BackendConfiguration_CapabilitySet{} }
func (m *BackendConfiguration_CapabilitySet) String() string { return proto.CompactTextString(m) }
func (*BackendConfiguration_CapabilitySet) ProtoMessage()    {}
func (*BackendConfiguration_CapabilitySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{0, 0}
}

func (m *BackendConfiguration_CapabilitySet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackendConfiguration_CapabilitySet.Unmarshal(m, b)
}
func (m *BackendConfiguration_CapabilitySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackendConfiguration_CapabilitySet.Marshal(b, m, deterministic)
}
func (m *BackendConfiguration_CapabilitySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackendConfiguration_CapabilitySet.Merge(m, src)
}
func (m *BackendConfiguration_CapabilitySet) XXX_Size() int {
	return xxx_messageInfo_BackendConfiguration_CapabilitySet.Size(m)
}
func (m *BackendConfiguration_CapabilitySet) XXX_DiscardUnknown() {
	xxx_messageInfo_BackendConfiguration_CapabilitySet.DiscardUnknown(m)
}

var xxx_messageInfo_BackendConfiguration_CapabilitySet proto.InternalMessageInfo

func (m *BackendConfiguration_CapabilitySet) GetCapability() []Capability_Cap {
	if m != nil {
		return m.Capability
	}
	return nil
}

type Capability struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Capability) Reset()         { *m = Capability{} }
func (m *Capability) String() string { return proto.CompactTextString(m) }
func (*Capability) ProtoMessage()    {}
func (*Capability) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{1}
}

func (m *Capability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Capability.Unmarshal(m, b)
}
func (m *Capability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Capability.Marshal(b, m, deterministic)
}
func (m *Capability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Capability.Merge(m, src)
}
func (m *Capability) XXX_Size() int {
	return xxx_messageInfo_Capability.Size(m)
}
func (m *Capability) XXX_DiscardUnknown() {
	xxx_messageInfo_Capability.DiscardUnknown(m)
}

var xxx_messageInfo_Capability proto.InternalMessageInfo

type Pic struct {
	// id is the unique identifier for the pic, in varint form
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// version is the version of the pic.  It is used when updating the pic.
	Version int64 `protobuf:"fixed64,4,opt,name=version,proto3" json:"version,omitempty"`
	// created_time is when the pic was created.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// modified_time is when the pic was last modified.
	ModifiedTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// pending_deletion indicates if the pic may be deleted soon.
	PendingDeletion bool `protobuf:"varint,9,opt,name=pending_deletion,json=pendingDeletion,proto3" json:"pending_deletion,omitempty"`
	// view_count is the number of views this picture has received.
	ViewCount int64 `protobuf:"varint,10,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	// The estimated lower bound of the pic score
	ScoreLo float64 `protobuf:"fixed64,12,opt,name=score_lo,json=scoreLo,proto3" json:"score_lo,omitempty"`
	// The estimated upper bound of the pic score
	ScoreHi float64      `protobuf:"fixed64,13,opt,name=score_hi,json=scoreHi,proto3" json:"score_hi,omitempty"`
	File    *PicFile     `protobuf:"bytes,16,opt,name=file,proto3" json:"file,omitempty"`
	Source  []*PicSource `protobuf:"bytes,18,rep,name=source,proto3" json:"source,omitempty"`
	// The user id of the first user who uploading this pic.  May be absent.
	FirstUserId          *wrappers.StringValue `protobuf:"bytes,19,opt,name=first_user_id,json=firstUserId,proto3" json:"first_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Pic) Reset()         { *m = Pic{} }
func (m *Pic) String() string { return proto.CompactTextString(m) }
func (*Pic) ProtoMessage()    {}
func (*Pic) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{2}
}

func (m *Pic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pic.Unmarshal(m, b)
}
func (m *Pic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pic.Marshal(b, m, deterministic)
}
func (m *Pic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pic.Merge(m, src)
}
func (m *Pic) XXX_Size() int {
	return xxx_messageInfo_Pic.Size(m)
}
func (m *Pic) XXX_DiscardUnknown() {
	xxx_messageInfo_Pic.DiscardUnknown(m)
}

var xxx_messageInfo_Pic proto.InternalMessageInfo

func (m *Pic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pic) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Pic) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *Pic) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *Pic) GetPendingDeletion() bool {
	if m != nil {
		return m.PendingDeletion
	}
	return false
}

func (m *Pic) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *Pic) GetScoreLo() float64 {
	if m != nil {
		return m.ScoreLo
	}
	return 0
}

func (m *Pic) GetScoreHi() float64 {
	if m != nil {
		return m.ScoreHi
	}
	return 0
}

func (m *Pic) GetFile() *PicFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Pic) GetSource() []*PicSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Pic) GetFirstUserId() *wrappers.StringValue {
	if m != nil {
		return m.FirstUserId
	}
	return nil
}

type PicAndThumbnail struct {
	Pic                  *Pic       `protobuf:"bytes,1,opt,name=pic,proto3" json:"pic,omitempty"`
	Thumbnail            []*PicFile `protobuf:"bytes,2,rep,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Derived              []*PicFile `protobuf:"bytes,3,rep,name=derived,proto3" json:"derived,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PicAndThumbnail) Reset()         { *m = PicAndThumbnail{} }
func (m *PicAndThumbnail) String() string { return proto.CompactTextString(m) }
func (*PicAndThumbnail) ProtoMessage()    {}
func (*PicAndThumbnail) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{3}
}

func (m *PicAndThumbnail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicAndThumbnail.Unmarshal(m, b)
}
func (m *PicAndThumbnail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicAndThumbnail.Marshal(b, m, deterministic)
}
func (m *PicAndThumbnail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicAndThumbnail.Merge(m, src)
}
func (m *PicAndThumbnail) XXX_Size() int {
	return xxx_messageInfo_PicAndThumbnail.Size(m)
}
func (m *PicAndThumbnail) XXX_DiscardUnknown() {
	xxx_messageInfo_PicAndThumbnail.DiscardUnknown(m)
}

var xxx_messageInfo_PicAndThumbnail proto.InternalMessageInfo

func (m *PicAndThumbnail) GetPic() *Pic {
	if m != nil {
		return m.Pic
	}
	return nil
}

func (m *PicAndThumbnail) GetThumbnail() []*PicFile {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

func (m *PicAndThumbnail) GetDerived() []*PicFile {
	if m != nil {
		return m.Derived
	}
	return nil
}

type PicComment struct {
	// pic_id is the unique identifier for the pic, in varint form
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	// comment_id is the unique identifier for the comment, in varint form
	CommentId string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	// comment_parent_id is the unique identifier for the parent comment, in varint form
	CommentParentId string `protobuf:"bytes,3,opt,name=comment_parent_id,json=commentParentId,proto3" json:"comment_parent_id,omitempty"`
	Text            string `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	// created_time is when the tag was created.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// modified_time is when the tag was last modified.
	ModifiedTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// version is the version of the tag.  It is used when updating the tag.
	Version int64 `protobuf:"fixed64,6,opt,name=version,proto3" json:"version,omitempty"`
	// The user id of comment author.  May be absent.
	UserId               *wrappers.StringValue `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PicComment) Reset()         { *m = PicComment{} }
func (m *PicComment) String() string { return proto.CompactTextString(m) }
func (*PicComment) ProtoMessage()    {}
func (*PicComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{4}
}

func (m *PicComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicComment.Unmarshal(m, b)
}
func (m *PicComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicComment.Marshal(b, m, deterministic)
}
func (m *PicComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicComment.Merge(m, src)
}
func (m *PicComment) XXX_Size() int {
	return xxx_messageInfo_PicComment.Size(m)
}
func (m *PicComment) XXX_DiscardUnknown() {
	xxx_messageInfo_PicComment.DiscardUnknown(m)
}

var xxx_messageInfo_PicComment proto.InternalMessageInfo

func (m *PicComment) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *PicComment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *PicComment) GetCommentParentId() string {
	if m != nil {
		return m.CommentParentId
	}
	return ""
}

func (m *PicComment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PicComment) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicComment) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *PicComment) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PicComment) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

type PicCommentTree struct {
	// All comments, ordered by a post order traversal.  Protobuf does not handle deeply nested
	// messages well.
	Comment              []*PicComment `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PicCommentTree) Reset()         { *m = PicCommentTree{} }
func (m *PicCommentTree) String() string { return proto.CompactTextString(m) }
func (*PicCommentTree) ProtoMessage()    {}
func (*PicCommentTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{5}
}

func (m *PicCommentTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicCommentTree.Unmarshal(m, b)
}
func (m *PicCommentTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicCommentTree.Marshal(b, m, deterministic)
}
func (m *PicCommentTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicCommentTree.Merge(m, src)
}
func (m *PicCommentTree) XXX_Size() int {
	return xxx_messageInfo_PicCommentTree.Size(m)
}
func (m *PicCommentTree) XXX_DiscardUnknown() {
	xxx_messageInfo_PicCommentTree.DiscardUnknown(m)
}

var xxx_messageInfo_PicCommentTree proto.InternalMessageInfo

func (m *PicCommentTree) GetComment() []*PicComment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type PicCommentVote struct {
	PicId     string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	CommentId string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	// user_id is the user who created this vote.  May be absent if unknown or due to lack of access.
	UserId               *wrappers.StringValue `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Vote                 PicCommentVote_Vote   `protobuf:"varint,4,opt,name=vote,proto3,enum=pixur.api.PicCommentVote_Vote" json:"vote,omitempty"`
	Version              int64                 `protobuf:"fixed64,5,opt,name=version,proto3" json:"version,omitempty"`
	CreatedTime          *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	ModifiedTime         *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PicCommentVote) Reset()         { *m = PicCommentVote{} }
func (m *PicCommentVote) String() string { return proto.CompactTextString(m) }
func (*PicCommentVote) ProtoMessage()    {}
func (*PicCommentVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{6}
}

func (m *PicCommentVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicCommentVote.Unmarshal(m, b)
}
func (m *PicCommentVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicCommentVote.Marshal(b, m, deterministic)
}
func (m *PicCommentVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicCommentVote.Merge(m, src)
}
func (m *PicCommentVote) XXX_Size() int {
	return xxx_messageInfo_PicCommentVote.Size(m)
}
func (m *PicCommentVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PicCommentVote.DiscardUnknown(m)
}

var xxx_messageInfo_PicCommentVote proto.InternalMessageInfo

func (m *PicCommentVote) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *PicCommentVote) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *PicCommentVote) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *PicCommentVote) GetVote() PicCommentVote_Vote {
	if m != nil {
		return m.Vote
	}
	return PicCommentVote_UNKNOWN
}

func (m *PicCommentVote) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PicCommentVote) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicCommentVote) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

type PicFile struct {
	// The fully qualified picfile id.  The first component is always the pic id.
	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format PicFile_Format `protobuf:"varint,2,opt,name=format,proto3,enum=pixur.api.PicFile_Format" json:"format,omitempty"`
	// width is the width of pic file
	Width int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// height is the height of the pic file
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// duration is present if the image is animated (GIF or WEBM or MP4).  Note that
	// GIFs duration is not well defined and is subject to reinterpretation.
	Duration *duration.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// Is this pic considered a thumbnail
	Thumbnail bool `protobuf:"varint,6,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	// created_time is when the PicFile was created.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// modified_time is when the PicFile was last modified.
	ModifiedTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// the size in bytes of the file
	Size                 int64    `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PicFile) Reset()         { *m = PicFile{} }
func (m *PicFile) String() string { return proto.CompactTextString(m) }
func (*PicFile) ProtoMessage()    {}
func (*PicFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{7}
}

func (m *PicFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicFile.Unmarshal(m, b)
}
func (m *PicFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicFile.Marshal(b, m, deterministic)
}
func (m *PicFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicFile.Merge(m, src)
}
func (m *PicFile) XXX_Size() int {
	return xxx_messageInfo_PicFile.Size(m)
}
func (m *PicFile) XXX_DiscardUnknown() {
	xxx_messageInfo_PicFile.DiscardUnknown(m)
}

var xxx_messageInfo_PicFile proto.InternalMessageInfo

func (m *PicFile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PicFile) GetFormat() PicFile_Format {
	if m != nil {
		return m.Format
	}
	return PicFile_UNKNOWN
}

func (m *PicFile) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *PicFile) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PicFile) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *PicFile) GetThumbnail() bool {
	if m != nil {
		return m.Thumbnail
	}
	return false
}

func (m *PicFile) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicFile) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *PicFile) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PicSource struct {
	// url is optional and is the location the pic came from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// referrer is optional and is the location the pic was referred from.
	Referrer string `protobuf:"bytes,3,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// name is optional and the file name for this source.  It may be derived
	// from the url, from the content-disposition, or from the user who
	// upload the file.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PicSource) Reset()         { *m = PicSource{} }
func (m *PicSource) String() string { return proto.CompactTextString(m) }
func (*PicSource) ProtoMessage()    {}
func (*PicSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{8}
}

func (m *PicSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicSource.Unmarshal(m, b)
}
func (m *PicSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicSource.Marshal(b, m, deterministic)
}
func (m *PicSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicSource.Merge(m, src)
}
func (m *PicSource) XXX_Size() int {
	return xxx_messageInfo_PicSource.Size(m)
}
func (m *PicSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PicSource.DiscardUnknown(m)
}

var xxx_messageInfo_PicSource proto.InternalMessageInfo

func (m *PicSource) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PicSource) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *PicSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PicTag struct {
	// pic_id is the unique identifier for the pic, in varint form
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	// tag_id is the unique identifier for the tag, in varint form
	TagId string `protobuf:"bytes,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// name is the tag name in utf8 form
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// created_time is when the tag was created.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// modified_time is when the tag was last modified.
	ModifiedTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// version is the version of the tag.  It is used when updating the tag.
	Version              int64    `protobuf:"fixed64,6,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PicTag) Reset()         { *m = PicTag{} }
func (m *PicTag) String() string { return proto.CompactTextString(m) }
func (*PicTag) ProtoMessage()    {}
func (*PicTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{9}
}

func (m *PicTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicTag.Unmarshal(m, b)
}
func (m *PicTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicTag.Marshal(b, m, deterministic)
}
func (m *PicTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicTag.Merge(m, src)
}
func (m *PicTag) XXX_Size() int {
	return xxx_messageInfo_PicTag.Size(m)
}
func (m *PicTag) XXX_DiscardUnknown() {
	xxx_messageInfo_PicTag.DiscardUnknown(m)
}

var xxx_messageInfo_PicTag proto.InternalMessageInfo

func (m *PicTag) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *PicTag) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *PicTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PicTag) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicTag) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *PicTag) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PicVote struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	// user_id is the user who created this vote.  May be absent if unknown or due to lack of access.
	UserId               *wrappers.StringValue `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Vote                 PicVote_Vote          `protobuf:"varint,3,opt,name=vote,proto3,enum=pixur.api.PicVote_Vote" json:"vote,omitempty"`
	Version              int64                 `protobuf:"fixed64,4,opt,name=version,proto3" json:"version,omitempty"`
	CreatedTime          *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	ModifiedTime         *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PicVote) Reset()         { *m = PicVote{} }
func (m *PicVote) String() string { return proto.CompactTextString(m) }
func (*PicVote) ProtoMessage()    {}
func (*PicVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{10}
}

func (m *PicVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicVote.Unmarshal(m, b)
}
func (m *PicVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicVote.Marshal(b, m, deterministic)
}
func (m *PicVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicVote.Merge(m, src)
}
func (m *PicVote) XXX_Size() int {
	return xxx_messageInfo_PicVote.Size(m)
}
func (m *PicVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PicVote.DiscardUnknown(m)
}

var xxx_messageInfo_PicVote proto.InternalMessageInfo

func (m *PicVote) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *PicVote) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *PicVote) GetVote() PicVote_Vote {
	if m != nil {
		return m.Vote
	}
	return PicVote_UNKNOWN
}

func (m *PicVote) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PicVote) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *PicVote) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

// PublicUserInfo is information about a user
type PublicUserInfo struct {
	// user_id is the id of the user.  It is always present.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// ident is the public name of the user.  It may be absent if the user does not have a name.
	Ident string `protobuf:"bytes,2,opt,name=ident,proto3" json:"ident,omitempty"`
	// created_time is when the user was created.
	CreatedTime          *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PublicUserInfo) Reset()         { *m = PublicUserInfo{} }
func (m *PublicUserInfo) String() string { return proto.CompactTextString(m) }
func (*PublicUserInfo) ProtoMessage()    {}
func (*PublicUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{11}
}

func (m *PublicUserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicUserInfo.Unmarshal(m, b)
}
func (m *PublicUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicUserInfo.Marshal(b, m, deterministic)
}
func (m *PublicUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicUserInfo.Merge(m, src)
}
func (m *PublicUserInfo) XXX_Size() int {
	return xxx_messageInfo_PublicUserInfo.Size(m)
}
func (m *PublicUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PublicUserInfo proto.InternalMessageInfo

func (m *PublicUserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PublicUserInfo) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *PublicUserInfo) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

type PwtHeader struct {
	Algorithm            PwtHeader_Algorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=pixur.api.PwtHeader_Algorithm" json:"algorithm,omitempty"`
	Version              int64               `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PwtHeader) Reset()         { *m = PwtHeader{} }
func (m *PwtHeader) String() string { return proto.CompactTextString(m) }
func (*PwtHeader) ProtoMessage()    {}
func (*PwtHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{12}
}

func (m *PwtHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PwtHeader.Unmarshal(m, b)
}
func (m *PwtHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PwtHeader.Marshal(b, m, deterministic)
}
func (m *PwtHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PwtHeader.Merge(m, src)
}
func (m *PwtHeader) XXX_Size() int {
	return xxx_messageInfo_PwtHeader.Size(m)
}
func (m *PwtHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PwtHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PwtHeader proto.InternalMessageInfo

func (m *PwtHeader) GetAlgorithm() PwtHeader_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return PwtHeader_UNKNOWN
}

func (m *PwtHeader) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PwtPayload struct {
	Subject   string               `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	NotBefore *timestamp.Timestamp `protobuf:"bytes,2,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	// represents when this token should be reverified.  Optional.
	SoftNotAfter         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=soft_not_after,json=softNotAfter,proto3" json:"soft_not_after,omitempty"`
	Issuer               string               `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	TokenId              int64                `protobuf:"varint,5,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Type                 PwtPayload_Type      `protobuf:"varint,7,opt,name=type,proto3,enum=pixur.api.PwtPayload_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PwtPayload) Reset()         { *m = PwtPayload{} }
func (m *PwtPayload) String() string { return proto.CompactTextString(m) }
func (*PwtPayload) ProtoMessage()    {}
func (*PwtPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{13}
}

func (m *PwtPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PwtPayload.Unmarshal(m, b)
}
func (m *PwtPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PwtPayload.Marshal(b, m, deterministic)
}
func (m *PwtPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PwtPayload.Merge(m, src)
}
func (m *PwtPayload) XXX_Size() int {
	return xxx_messageInfo_PwtPayload.Size(m)
}
func (m *PwtPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PwtPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PwtPayload proto.InternalMessageInfo

func (m *PwtPayload) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *PwtPayload) GetNotBefore() *timestamp.Timestamp {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

func (m *PwtPayload) GetNotAfter() *timestamp.Timestamp {
	if m != nil {
		return m.NotAfter
	}
	return nil
}

func (m *PwtPayload) GetSoftNotAfter() *timestamp.Timestamp {
	if m != nil {
		return m.SoftNotAfter
	}
	return nil
}

func (m *PwtPayload) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *PwtPayload) GetTokenId() int64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *PwtPayload) GetType() PwtPayload_Type {
	if m != nil {
		return m.Type
	}
	return PwtPayload_UNKNOWN
}

type User struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ident  string `protobuf:"bytes,2,opt,name=ident,proto3" json:"ident,omitempty"`
	// created_time is when the user was created.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// modified_time is when the user was last modified.
	ModifiedTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// modified_time is when the user was last modified.
	LastSeenTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_seen_time,json=lastSeenTime,proto3" json:"last_seen_time,omitempty"`
	// version is the version of the user.  It is used when updating the user.
	Version              int64            `protobuf:"fixed64,6,opt,name=version,proto3" json:"version,omitempty"`
	Capability           []Capability_Cap `protobuf:"varint,7,rep,packed,name=capability,proto3,enum=pixur.api.Capability_Cap" json:"capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{14}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *User) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *User) GetModifiedTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTime
	}
	return nil
}

func (m *User) GetLastSeenTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastSeenTime
	}
	return nil
}

func (m *User) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *User) GetCapability() []Capability_Cap {
	if m != nil {
		return m.Capability
	}
	return nil
}

type UserEvent struct {
	// user_id is the id of the user this event applies to.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// user_event_id is the unique identifier for this event.  It should be considered as an opaque
	// token.  It generally consistes of the user_id, created_time and an optional identifier.
	UserEventId string `protobuf:"bytes,2,opt,name=user_event_id,json=userEventId,proto3" json:"user_event_id,omitempty"`
	// created_time is when the user event was created.
	CreatedTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Types that are valid to be assigned to Evt:
	//	*UserEvent_OutgoingUpsertPicVote_
	//	*UserEvent_IncomingUpsertPicVote_
	//	*UserEvent_OutgoingPicComment_
	//	*UserEvent_IncomingPicComment_
	//	*UserEvent_UpsertPic_
	Evt                  isUserEvent_Evt `protobuf_oneof:"evt"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserEvent) Reset()         { *m = UserEvent{} }
func (m *UserEvent) String() string { return proto.CompactTextString(m) }
func (*UserEvent) ProtoMessage()    {}
func (*UserEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{15}
}

func (m *UserEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent.Unmarshal(m, b)
}
func (m *UserEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent.Marshal(b, m, deterministic)
}
func (m *UserEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent.Merge(m, src)
}
func (m *UserEvent) XXX_Size() int {
	return xxx_messageInfo_UserEvent.Size(m)
}
func (m *UserEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent proto.InternalMessageInfo

func (m *UserEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserEvent) GetUserEventId() string {
	if m != nil {
		return m.UserEventId
	}
	return ""
}

func (m *UserEvent) GetCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

type isUserEvent_Evt interface {
	isUserEvent_Evt()
}

type UserEvent_OutgoingUpsertPicVote_ struct {
	OutgoingUpsertPicVote *UserEvent_OutgoingUpsertPicVote `protobuf:"bytes,4,opt,name=outgoing_upsert_pic_vote,json=outgoingUpsertPicVote,proto3,oneof"`
}

type UserEvent_IncomingUpsertPicVote_ struct {
	IncomingUpsertPicVote *UserEvent_IncomingUpsertPicVote `protobuf:"bytes,5,opt,name=incoming_upsert_pic_vote,json=incomingUpsertPicVote,proto3,oneof"`
}

type UserEvent_OutgoingPicComment_ struct {
	OutgoingPicComment *UserEvent_OutgoingPicComment `protobuf:"bytes,6,opt,name=outgoing_pic_comment,json=outgoingPicComment,proto3,oneof"`
}

type UserEvent_IncomingPicComment_ struct {
	IncomingPicComment *UserEvent_IncomingPicComment `protobuf:"bytes,7,opt,name=incoming_pic_comment,json=incomingPicComment,proto3,oneof"`
}

type UserEvent_UpsertPic_ struct {
	UpsertPic *UserEvent_UpsertPic `protobuf:"bytes,8,opt,name=upsert_pic,json=upsertPic,proto3,oneof"`
}

func (*UserEvent_OutgoingUpsertPicVote_) isUserEvent_Evt() {}

func (*UserEvent_IncomingUpsertPicVote_) isUserEvent_Evt() {}

func (*UserEvent_OutgoingPicComment_) isUserEvent_Evt() {}

func (*UserEvent_IncomingPicComment_) isUserEvent_Evt() {}

func (*UserEvent_UpsertPic_) isUserEvent_Evt() {}

func (m *UserEvent) GetEvt() isUserEvent_Evt {
	if m != nil {
		return m.Evt
	}
	return nil
}

func (m *UserEvent) GetOutgoingUpsertPicVote() *UserEvent_OutgoingUpsertPicVote {
	if x, ok := m.GetEvt().(*UserEvent_OutgoingUpsertPicVote_); ok {
		return x.OutgoingUpsertPicVote
	}
	return nil
}

func (m *UserEvent) GetIncomingUpsertPicVote() *UserEvent_IncomingUpsertPicVote {
	if x, ok := m.GetEvt().(*UserEvent_IncomingUpsertPicVote_); ok {
		return x.IncomingUpsertPicVote
	}
	return nil
}

func (m *UserEvent) GetOutgoingPicComment() *UserEvent_OutgoingPicComment {
	if x, ok := m.GetEvt().(*UserEvent_OutgoingPicComment_); ok {
		return x.OutgoingPicComment
	}
	return nil
}

func (m *UserEvent) GetIncomingPicComment() *UserEvent_IncomingPicComment {
	if x, ok := m.GetEvt().(*UserEvent_IncomingPicComment_); ok {
		return x.IncomingPicComment
	}
	return nil
}

func (m *UserEvent) GetUpsertPic() *UserEvent_UpsertPic {
	if x, ok := m.GetEvt().(*UserEvent_UpsertPic_); ok {
		return x.UpsertPic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserEvent_OutgoingUpsertPicVote_)(nil),
		(*UserEvent_IncomingUpsertPicVote_)(nil),
		(*UserEvent_OutgoingPicComment_)(nil),
		(*UserEvent_IncomingPicComment_)(nil),
		(*UserEvent_UpsertPic_)(nil),
	}
}

// IncomingUpsertPicVote represents sending a vote on a pic another user made.  If a user
// self-votes, OutgoingUpsertPicVote will be created instead of IncomingUpsertPicVote.
type UserEvent_OutgoingUpsertPicVote struct {
	PicId                string   `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserEvent_OutgoingUpsertPicVote) Reset()         { *m = UserEvent_OutgoingUpsertPicVote{} }
func (m *UserEvent_OutgoingUpsertPicVote) String() string { return proto.CompactTextString(m) }
func (*UserEvent_OutgoingUpsertPicVote) ProtoMessage()    {}
func (*UserEvent_OutgoingUpsertPicVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{15, 0}
}

func (m *UserEvent_OutgoingUpsertPicVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent_OutgoingUpsertPicVote.Unmarshal(m, b)
}
func (m *UserEvent_OutgoingUpsertPicVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent_OutgoingUpsertPicVote.Marshal(b, m, deterministic)
}
func (m *UserEvent_OutgoingUpsertPicVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent_OutgoingUpsertPicVote.Merge(m, src)
}
func (m *UserEvent_OutgoingUpsertPicVote) XXX_Size() int {
	return xxx_messageInfo_UserEvent_OutgoingUpsertPicVote.Size(m)
}
func (m *UserEvent_OutgoingUpsertPicVote) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent_OutgoingUpsertPicVote.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent_OutgoingUpsertPicVote proto.InternalMessageInfo

func (m *UserEvent_OutgoingUpsertPicVote) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

// IncomingUpsertPicVote represents receiving a vote on a pic they made.  If a user
// self-votes, OutgoingUpsertPicVote will be created instead of IncomingUpsertPicVote.
type UserEvent_IncomingUpsertPicVote struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	// The user who made the vote.  May be absent
	SubjectUserId        string   `protobuf:"bytes,2,opt,name=subject_user_id,json=subjectUserId,proto3" json:"subject_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserEvent_IncomingUpsertPicVote) Reset()         { *m = UserEvent_IncomingUpsertPicVote{} }
func (m *UserEvent_IncomingUpsertPicVote) String() string { return proto.CompactTextString(m) }
func (*UserEvent_IncomingUpsertPicVote) ProtoMessage()    {}
func (*UserEvent_IncomingUpsertPicVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{15, 1}
}

func (m *UserEvent_IncomingUpsertPicVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent_IncomingUpsertPicVote.Unmarshal(m, b)
}
func (m *UserEvent_IncomingUpsertPicVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent_IncomingUpsertPicVote.Marshal(b, m, deterministic)
}
func (m *UserEvent_IncomingUpsertPicVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent_IncomingUpsertPicVote.Merge(m, src)
}
func (m *UserEvent_IncomingUpsertPicVote) XXX_Size() int {
	return xxx_messageInfo_UserEvent_IncomingUpsertPicVote.Size(m)
}
func (m *UserEvent_IncomingUpsertPicVote) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent_IncomingUpsertPicVote.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent_IncomingUpsertPicVote proto.InternalMessageInfo

func (m *UserEvent_IncomingUpsertPicVote) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *UserEvent_IncomingUpsertPicVote) GetSubjectUserId() string {
	if m != nil {
		return m.SubjectUserId
	}
	return ""
}

// OutgoingPicComment represents commenting on someone else's pic.  If a user comments on
// their own pic, OutgoingPicComment will be used instead of IncomingPicComment.
type UserEvent_OutgoingPicComment struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	// comment_id is the comment that this user created.
	CommentId            string   `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserEvent_OutgoingPicComment) Reset()         { *m = UserEvent_OutgoingPicComment{} }
func (m *UserEvent_OutgoingPicComment) String() string { return proto.CompactTextString(m) }
func (*UserEvent_OutgoingPicComment) ProtoMessage()    {}
func (*UserEvent_OutgoingPicComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{15, 2}
}

func (m *UserEvent_OutgoingPicComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent_OutgoingPicComment.Unmarshal(m, b)
}
func (m *UserEvent_OutgoingPicComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent_OutgoingPicComment.Marshal(b, m, deterministic)
}
func (m *UserEvent_OutgoingPicComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent_OutgoingPicComment.Merge(m, src)
}
func (m *UserEvent_OutgoingPicComment) XXX_Size() int {
	return xxx_messageInfo_UserEvent_OutgoingPicComment.Size(m)
}
func (m *UserEvent_OutgoingPicComment) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent_OutgoingPicComment.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent_OutgoingPicComment proto.InternalMessageInfo

func (m *UserEvent_OutgoingPicComment) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *UserEvent_OutgoingPicComment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

// IncomingPicComment represents commenting on someone else's pic.  If a user comments on
// their own pic, OutgoingPicComment will be used instead of IncomingPicComment.
type UserEvent_IncomingPicComment struct {
	PicId string `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	// comment_id is the newly created child comment, **not** the one owned by user_id.  The
	// comment_parent_id of the given comment is owned by user_id.
	CommentId            string   `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	CommentParentId      string   `protobuf:"bytes,3,opt,name=comment_parent_id,json=commentParentId,proto3" json:"comment_parent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserEvent_IncomingPicComment) Reset()         { *m = UserEvent_IncomingPicComment{} }
func (m *UserEvent_IncomingPicComment) String() string { return proto.CompactTextString(m) }
func (*UserEvent_IncomingPicComment) ProtoMessage()    {}
func (*UserEvent_IncomingPicComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{15, 3}
}

func (m *UserEvent_IncomingPicComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent_IncomingPicComment.Unmarshal(m, b)
}
func (m *UserEvent_IncomingPicComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent_IncomingPicComment.Marshal(b, m, deterministic)
}
func (m *UserEvent_IncomingPicComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent_IncomingPicComment.Merge(m, src)
}
func (m *UserEvent_IncomingPicComment) XXX_Size() int {
	return xxx_messageInfo_UserEvent_IncomingPicComment.Size(m)
}
func (m *UserEvent_IncomingPicComment) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent_IncomingPicComment.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent_IncomingPicComment proto.InternalMessageInfo

func (m *UserEvent_IncomingPicComment) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func (m *UserEvent_IncomingPicComment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *UserEvent_IncomingPicComment) GetCommentParentId() string {
	if m != nil {
		return m.CommentParentId
	}
	return ""
}

type UserEvent_UpsertPic struct {
	PicId                string   `protobuf:"bytes,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserEvent_UpsertPic) Reset()         { *m = UserEvent_UpsertPic{} }
func (m *UserEvent_UpsertPic) String() string { return proto.CompactTextString(m) }
func (*UserEvent_UpsertPic) ProtoMessage()    {}
func (*UserEvent_UpsertPic) Descriptor() ([]byte, []int) {
	return fileDescriptor_871986018790d2fd, []int{15, 4}
}

func (m *UserEvent_UpsertPic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserEvent_UpsertPic.Unmarshal(m, b)
}
func (m *UserEvent_UpsertPic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserEvent_UpsertPic.Marshal(b, m, deterministic)
}
func (m *UserEvent_UpsertPic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEvent_UpsertPic.Merge(m, src)
}
func (m *UserEvent_UpsertPic) XXX_Size() int {
	return xxx_messageInfo_UserEvent_UpsertPic.Size(m)
}
func (m *UserEvent_UpsertPic) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEvent_UpsertPic.DiscardUnknown(m)
}

var xxx_messageInfo_UserEvent_UpsertPic proto.InternalMessageInfo

func (m *UserEvent_UpsertPic) GetPicId() string {
	if m != nil {
		return m.PicId
	}
	return ""
}

func init() {
	proto.RegisterEnum("pixur.api.DeletionReason", DeletionReason_name, DeletionReason_value)
	proto.RegisterEnum("pixur.api.Capability_Cap", Capability_Cap_name, Capability_Cap_value)
	proto.RegisterEnum("pixur.api.PicCommentVote_Vote", PicCommentVote_Vote_name, PicCommentVote_Vote_value)
	proto.RegisterEnum("pixur.api.PicFile_Format", PicFile_Format_name, PicFile_Format_value)
	proto.RegisterEnum("pixur.api.PicVote_Vote", PicVote_Vote_name, PicVote_Vote_value)
	proto.RegisterEnum("pixur.api.PwtHeader_Algorithm", PwtHeader_Algorithm_name, PwtHeader_Algorithm_value)
	proto.RegisterEnum("pixur.api.PwtPayload_Type", PwtPayload_Type_name, PwtPayload_Type_value)
	proto.RegisterType((*BackendConfiguration)(nil), "pixur.api.BackendConfiguration")
	proto.RegisterType((*BackendConfiguration_CapabilitySet)(nil), "pixur.api.BackendConfiguration.CapabilitySet")
	proto.RegisterType((*Capability)(nil), "pixur.api.Capability")
	proto.RegisterType((*Pic)(nil), "pixur.api.Pic")
	proto.RegisterType((*PicAndThumbnail)(nil), "pixur.api.PicAndThumbnail")
	proto.RegisterType((*PicComment)(nil), "pixur.api.PicComment")
	proto.RegisterType((*PicCommentTree)(nil), "pixur.api.PicCommentTree")
	proto.RegisterType((*PicCommentVote)(nil), "pixur.api.PicCommentVote")
	proto.RegisterType((*PicFile)(nil), "pixur.api.PicFile")
	proto.RegisterType((*PicSource)(nil), "pixur.api.PicSource")
	proto.RegisterType((*PicTag)(nil), "pixur.api.PicTag")
	proto.RegisterType((*PicVote)(nil), "pixur.api.PicVote")
	proto.RegisterType((*PublicUserInfo)(nil), "pixur.api.PublicUserInfo")
	proto.RegisterType((*PwtHeader)(nil), "pixur.api.PwtHeader")
	proto.RegisterType((*PwtPayload)(nil), "pixur.api.PwtPayload")
	proto.RegisterType((*User)(nil), "pixur.api.User")
	proto.RegisterType((*UserEvent)(nil), "pixur.api.UserEvent")
	proto.RegisterType((*UserEvent_OutgoingUpsertPicVote)(nil), "pixur.api.UserEvent.OutgoingUpsertPicVote")
	proto.RegisterType((*UserEvent_IncomingUpsertPicVote)(nil), "pixur.api.UserEvent.IncomingUpsertPicVote")
	proto.RegisterType((*UserEvent_OutgoingPicComment)(nil), "pixur.api.UserEvent.OutgoingPicComment")
	proto.RegisterType((*UserEvent_IncomingPicComment)(nil), "pixur.api.UserEvent.IncomingPicComment")
	proto.RegisterType((*UserEvent_UpsertPic)(nil), "pixur.api.UserEvent.UpsertPic")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor_871986018790d2fd) }

var fileDescriptor_871986018790d2fd = []byte{
	// 2284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x73, 0xe2, 0xc8,
	0xf9, 0x1f, 0x90, 0x00, 0xf1, 0x60, 0x63, 0xb9, 0x6d, 0x8f, 0x31, 0xe3, 0x99, 0xbf, 0xff, 0x54,
	0x65, 0x33, 0x99, 0xec, 0x32, 0x59, 0x67, 0x67, 0x53, 0xa9, 0xcd, 0xd6, 0x0e, 0xc6, 0xb2, 0x2d,
	0xc2, 0x60, 0x95, 0x00, 0xcf, 0xe4, 0xad, 0x14, 0x19, 0x35, 0xb8, 0xb3, 0x42, 0xa2, 0x24, 0x61,
	0xe3, 0x1c, 0xf2, 0x0d, 0x72, 0xca, 0x37, 0xc8, 0x2d, 0x5f, 0x22, 0xd7, 0x5c, 0xf6, 0x94, 0x5c,
	0x52, 0x95, 0x6b, 0xbe, 0x43, 0x8e, 0x49, 0x75, 0xeb, 0x05, 0xc9, 0xc2, 0x36, 0x9e, 0xa9, 0x6c,
	0xe5, 0x42, 0xd1, 0xcf, 0xcb, 0xaf, 0x9f, 0x7e, 0xfa, 0xe9, 0x5f, 0x3f, 0x2d, 0x00, 0x43, 0xf7,
	0xf4, 0xfa, 0xc4, 0xb1, 0x3d, 0x1b, 0x15, 0x27, 0x64, 0x36, 0x75, 0xea, 0xfa, 0x84, 0x54, 0x9f,
	0x8d, 0x6c, 0x7b, 0x64, 0xe2, 0x97, 0x4c, 0x71, 0x3e, 0x1d, 0xbe, 0x34, 0xa6, 0x8e, 0xee, 0x11,
	0xdb, 0xf2, 0x4d, 0xab, 0xff, 0x77, 0x53, 0xef, 0x91, 0x31, 0x76, 0x3d, 0x7d, 0x3c, 0x09, 0x0c,
	0x52, 0x00, 0x57, 0x8e, 0x3e, 0x99, 0x60, 0xc7, 0xf5, 0xf5, 0xb5, 0x3f, 0xaf, 0xc0, 0xe6, 0x81,
	0x3e, 0xf8, 0x1a, 0x5b, 0x46, 0xd3, 0xb6, 0x86, 0x64, 0x14, 0xe0, 0x23, 0x19, 0xd0, 0x98, 0x58,
	0xda, 0xc0, 0x1e, 0x8f, 0xb1, 0xe5, 0x69, 0x26, 0xb6, 0x46, 0xde, 0x45, 0x25, 0xb3, 0x97, 0x79,
	0x5e, 0xda, 0x7f, 0x52, 0xf7, 0x51, 0xeb, 0x21, 0x6a, 0x5d, 0xb6, 0xbc, 0xcf, 0x3f, 0x3b, 0xd3,
	0xcd, 0x29, 0x56, 0xc5, 0x31, 0xb1, 0x9a, 0xbe, 0x57, 0x9b, 0x39, 0x31, 0x28, 0x7d, 0x76, 0x13,
	0x2a, 0xbb, 0x0c, 0x94, 0x3e, 0x4b, 0x42, 0x49, 0x40, 0xe1, 0x35, 0x62, 0xc4, 0x80, 0xb8, 0xfb,
	0x81, 0xca, 0x63, 0x62, 0xc9, 0x46, 0x12, 0x46, 0x9f, 0x25, 0x61, 0xf8, 0x65, 0x60, 0xf4, 0x59,
	0x1c, 0xa6, 0x0d, 0x9b, 0x34, 0x9a, 0x21, 0x31, 0xb1, 0x66, 0xe9, 0x63, 0x1c, 0x42, 0xe5, 0xee,
	0x87, 0x5a, 0x1f, 0x13, 0xeb, 0x88, 0x98, 0xb8, 0xa3, 0x8f, 0x71, 0x0c, 0x4d, 0x9f, 0xa5, 0xd1,
	0xf2, 0xcb, 0xa0, 0xe9, 0xb3, 0x1b, 0x68, 0x0d, 0xa0, 0x8b, 0xd6, 0xa6, 0x8e, 0x19, 0xe2, 0x14,
	0xee, 0xc7, 0x59, 0x19, 0x13, 0xab, 0xef, 0x98, 0x31, 0x08, 0x7d, 0x16, 0x87, 0x10, 0x96, 0x81,
	0xd0, 0x67, 0x49, 0x08, 0x62, 0x69, 0x9e, 0x3e, 0x0a, 0x21, 0x8a, 0xcb, 0x45, 0xd1, 0xd3, 0x47,
	0xc9, 0x28, 0x62, 0x10, 0xb0, 0x5c, 0x14, 0x73, 0x88, 0x5f, 0xc3, 0xa6, 0x6e, 0xd9, 0xd6, 0xf5,
	0xd8, 0x9e, 0xba, 0xda, 0x40, 0x9f, 0xe8, 0xe7, 0xc4, 0x24, 0xde, 0x75, 0xa5, 0xc4, 0x80, 0x3e,
	0xa9, 0x47, 0xe7, 0xad, 0xbe, 0xe8, 0x28, 0xd4, 0x9b, 0x91, 0x47, 0x17, 0x7b, 0xea, 0x46, 0x04,
	0x35, 0x97, 0xa3, 0x5f, 0xc1, 0x86, 0x85, 0xaf, 0xb4, 0xa9, 0x8b, 0x9d, 0xf8, 0x04, 0x2b, 0xef,
	0x33, 0xc1, 0xba, 0x85, 0xaf, 0xfa, 0x2e, 0x76, 0x62, 0xf0, 0x2a, 0x6c, 0x1b, 0x78, 0xa8, 0x4f,
	0x4d, 0x4f, 0x1b, 0x12, 0xcb, 0xd0, 0x88, 0x65, 0xe0, 0x99, 0x36, 0x21, 0x03, 0xb7, 0xb2, 0x7a,
	0x7f, 0x32, 0x36, 0x03, 0xdf, 0x23, 0x62, 0x19, 0x32, 0xf5, 0x54, 0xc8, 0xc0, 0x45, 0x2d, 0xd8,
	0xf0, 0xcb, 0x2d, 0x89, 0x57, 0x5e, 0xee, 0x58, 0x26, 0xb1, 0x8e, 0xfd, 0x13, 0x7e, 0x49, 0x0c,
	0x6c, 0x6b, 0x21, 0x45, 0x55, 0xd6, 0x18, 0xd4, 0x4e, 0x0a, 0xea, 0x30, 0x30, 0x60, 0x40, 0x67,
	0xd4, 0x27, 0x94, 0xa0, 0x5f, 0xc2, 0x53, 0x6c, 0xe9, 0xe7, 0x26, 0xa6, 0xc1, 0x44, 0x8c, 0xe1,
	0x62, 0x73, 0xa8, 0x39, 0x78, 0x62, 0x5e, 0x57, 0x44, 0x86, 0x59, 0x4d, 0x61, 0x1e, 0xd8, 0xb6,
	0xe9, 0x47, 0xb7, 0xe3, 0x03, 0x28, 0x64, 0x10, 0x50, 0x47, 0x17, 0x9b, 0x43, 0x95, 0x3a, 0xa3,
	0x73, 0xd8, 0x5b, 0x84, 0x4e, 0xce, 0x4d, 0x62, 0x8d, 0x82, 0x09, 0xd6, 0xef, 0x9d, 0x60, 0x37,
	0x35, 0x81, 0x0f, 0xe0, 0xcf, 0xd1, 0x83, 0x4a, 0x62, 0xab, 0x58, 0x49, 0xe0, 0x4b, 0x6c, 0x79,
	0x6e, 0x05, 0xdd, 0x9f, 0xdb, 0xad, 0xd8, 0x5e, 0xd1, 0x22, 0x90, 0x98, 0xe7, 0x9c, 0x1b, 0x6e,
	0x20, 0x6e, 0x2c, 0xcb, 0x0d, 0x71, 0xb4, 0x6a, 0x0b, 0x56, 0x13, 0x25, 0x87, 0x7e, 0x0c, 0x10,
	0xab, 0xda, 0xcc, 0x1e, 0xf7, 0xbc, 0xbc, 0xbf, 0x13, 0xab, 0xda, 0xb9, 0x35, 0xfd, 0xab, 0xc6,
	0x8c, 0x6b, 0xff, 0xc8, 0x01, 0xcc, 0xd5, 0xb5, 0x6f, 0x72, 0xc0, 0x35, 0xf5, 0x09, 0x2a, 0x41,
	0xa1, 0xdf, 0xf9, 0x69, 0xe7, 0xf4, 0x6d, 0x47, 0x7c, 0x84, 0xca, 0x00, 0x8a, 0xdc, 0xd4, 0x9a,
	0xaa, 0xd4, 0xe8, 0x49, 0x62, 0x06, 0xad, 0x80, 0x40, 0xc7, 0xaa, 0xd4, 0x38, 0x14, 0xb3, 0x68,
	0x15, 0x8a, 0x74, 0x24, 0x77, 0x0e, 0xa5, 0x77, 0x22, 0x87, 0x36, 0x60, 0x8d, 0x0e, 0xbb, 0xa7,
	0x47, 0x3d, 0xed, 0x50, 0x6a, 0x4b, 0x3d, 0x49, 0xcc, 0x85, 0xc2, 0x93, 0x86, 0x7a, 0x18, 0x0a,
	0xf3, 0xa1, 0xa3, 0xd2, 0x57, 0x8f, 0x25, 0xb1, 0x80, 0x9e, 0xc0, 0x36, 0x1d, 0xf6, 0x95, 0xc3,
	0x46, 0x4f, 0xd2, 0xce, 0x64, 0xe9, 0xad, 0xd6, 0x3c, 0xed, 0x77, 0x7a, 0x92, 0x2a, 0x0a, 0x08,
	0x41, 0x99, 0x2a, 0x7b, 0x8d, 0xe3, 0x30, 0x8c, 0x22, 0x7a, 0x0c, 0x88, 0x85, 0x75, 0xfa, 0xe6,
	0x8d, 0xd4, 0xe9, 0x85, 0x72, 0x08, 0x27, 0x3b, 0x3b, 0xed, 0x49, 0xa1, 0xb0, 0x84, 0xd6, 0xa0,
	0xd4, 0xef, 0x4a, 0x6a, 0x28, 0xe0, 0x51, 0x15, 0x1e, 0x33, 0x41, 0x30, 0x5f, 0xb3, 0xa1, 0x34,
	0x0e, 0xe4, 0xb6, 0xdc, 0xfb, 0x99, 0xb8, 0x42, 0x67, 0x63, 0x3a, 0xba, 0x42, 0xad, 0x2b, 0xb5,
	0x8f, 0xc4, 0x55, 0xb4, 0x0e, 0xab, 0x73, 0x59, 0xa3, 0xdd, 0x16, 0xcb, 0xa8, 0x02, 0x9b, 0x74,
	0x22, 0xe9, 0x5d, 0x4f, 0xea, 0x74, 0xe5, 0xd3, 0x4e, 0x08, 0xbe, 0x16, 0x86, 0x36, 0xd7, 0xb0,
	0x5c, 0x89, 0x68, 0x0f, 0x76, 0xe3, 0x21, 0xa7, 0x3c, 0xd7, 0xd1, 0x33, 0xa8, 0x2e, 0xb6, 0x60,
	0x08, 0x08, 0xed, 0x42, 0x25, 0x4c, 0x44, 0xca, 0x7b, 0x83, 0x2e, 0x2a, 0xad, 0x65, 0x9e, 0x9b,
	0xe8, 0x29, 0xec, 0x44, 0x69, 0x49, 0xb9, 0x6e, 0x85, 0xe9, 0xbf, 0xa1, 0x66, 0xbe, 0x8f, 0xd1,
	0x26, 0x88, 0xf3, 0xc5, 0x2b, 0xfd, 0x83, 0xb6, 0xdc, 0x14, 0xb7, 0x93, 0x69, 0x52, 0xe4, 0x66,
	0x57, 0xac, 0xa0, 0x2d, 0x58, 0x4f, 0xc8, 0x68, 0x2c, 0xe2, 0x0e, 0xda, 0x81, 0xad, 0xa4, 0x38,
	0x58, 0xa0, 0x58, 0xa5, 0xb9, 0x4a, 0xaa, 0x68, 0x08, 0xe2, 0x93, 0x30, 0xa0, 0x30, 0x13, 0xf1,
	0xed, 0xdc, 0x45, 0xdf, 0x81, 0xff, 0x4f, 0x29, 0x53, 0x8b, 0x7a, 0x5a, 0xfb, 0x17, 0x07, 0x9c,
	0x42, 0x06, 0xa8, 0x0c, 0x59, 0x62, 0xb0, 0xee, 0xa7, 0xa8, 0x66, 0x89, 0x81, 0x2a, 0x50, 0xb8,
	0xc4, 0x8e, 0x4b, 0x59, 0x8e, 0xf6, 0x0d, 0xa2, 0x1a, 0x0e, 0xd1, 0x97, 0xb0, 0x32, 0x70, 0xb0,
	0xee, 0x61, 0x43, 0xa3, 0xbd, 0x58, 0xc0, 0xa7, 0x69, 0x3e, 0xe9, 0x85, 0x8d, 0x9a, 0x5a, 0x0a,
	0xec, 0xa9, 0x04, 0x7d, 0x05, 0xab, 0x63, 0xdb, 0x20, 0x43, 0x12, 0xfa, 0xaf, 0xdd, 0xeb, 0xbf,
	0x12, 0x3a, 0x30, 0x80, 0xef, 0x81, 0x38, 0xc1, 0x96, 0x41, 0x09, 0xcd, 0xc0, 0x26, 0x66, 0x44,
	0x4c, 0xef, 0x5c, 0x41, 0x5d, 0x0b, 0xe4, 0x87, 0x81, 0x18, 0x3d, 0x05, 0xb8, 0x24, 0xf8, 0x4a,
	0x1b, 0xd8, 0x53, 0xcb, 0x63, 0xb7, 0x2a, 0xa7, 0x16, 0xa9, 0xa4, 0x49, 0x05, 0x68, 0x07, 0x04,
	0x77, 0x60, 0x3b, 0x58, 0x33, 0x6d, 0x76, 0x91, 0x65, 0xd4, 0x02, 0x1b, 0xb7, 0xed, 0xb9, 0xea,
	0x82, 0xb0, 0x0b, 0x28, 0x54, 0x9d, 0x10, 0xf4, 0x11, 0xf0, 0xb4, 0x83, 0x09, 0x88, 0x1a, 0xc5,
	0x48, 0x44, 0x21, 0x03, 0xda, 0xa3, 0xa8, 0x4c, 0x8f, 0x3e, 0x86, 0xbc, 0x6b, 0x4f, 0x9d, 0x01,
	0xae, 0xa0, 0x3d, 0xee, 0x79, 0x69, 0x7f, 0x33, 0x69, 0xd9, 0x65, 0x3a, 0x35, 0xb0, 0x41, 0xaf,
	0x61, 0x75, 0x48, 0x1c, 0xd7, 0xf3, 0xc9, 0x8f, 0x18, 0x01, 0xf1, 0xed, 0xa6, 0xd2, 0xd2, 0xf5,
	0x1c, 0x62, 0x8d, 0x7c, 0xe6, 0x2b, 0x31, 0x17, 0xca, 0x7b, 0xb2, 0xd1, 0xe2, 0x85, 0xac, 0xc8,
	0xb5, 0x78, 0x81, 0x13, 0xf9, 0x16, 0x2f, 0xe4, 0xc4, 0x7c, 0x8b, 0x17, 0xf2, 0x62, 0xa1, 0xc5,
	0x0b, 0x05, 0x51, 0x68, 0xf1, 0x82, 0x20, 0x16, 0x5b, 0xbc, 0x50, 0x12, 0x57, 0x5a, 0xbc, 0xb0,
	0x2e, 0xa2, 0xda, 0x1f, 0x32, 0xb0, 0xa6, 0x90, 0x41, 0xc3, 0x32, 0x7a, 0x17, 0xd3, 0xf1, 0xb9,
	0xa5, 0x13, 0x13, 0xed, 0x01, 0x37, 0x21, 0x83, 0xa0, 0x09, 0x2e, 0x27, 0x03, 0x56, 0xa9, 0x0a,
	0xfd, 0x00, 0x8a, 0x5e, 0x68, 0x5e, 0xc9, 0xb2, 0x85, 0x2d, 0x4a, 0xc1, 0xdc, 0x08, 0x7d, 0x0c,
	0x05, 0x03, 0x3b, 0xe4, 0x12, 0x1b, 0x15, 0xee, 0x56, 0xfb, 0xd0, 0xa4, 0xf6, 0xb7, 0x2c, 0xc0,
	0xfc, 0xe2, 0x41, 0x5b, 0x90, 0xa7, 0x37, 0x59, 0x54, 0x9a, 0xb9, 0x09, 0x19, 0xc8, 0x06, 0xdd,
	0xd8, 0xf0, 0x72, 0x23, 0x06, 0x6b, 0xb4, 0x8b, 0x6a, 0x31, 0x90, 0xc8, 0x06, 0x7a, 0x01, 0xeb,
	0xa1, 0x7a, 0xa2, 0x3b, 0x81, 0x15, 0xc7, 0xac, 0xd6, 0x02, 0x85, 0xc2, 0xe4, 0xb2, 0x81, 0x10,
	0xf0, 0x1e, 0x9e, 0x79, 0xac, 0x79, 0x2c, 0xaa, 0xec, 0x7f, 0xaa, 0xc4, 0xf9, 0x0f, 0x2c, 0xf1,
	0xdc, 0x03, 0x4b, 0x3c, 0x76, 0xf8, 0xf2, 0xc9, 0xc3, 0xf7, 0x0a, 0x0a, 0x61, 0x81, 0x08, 0x4b,
	0x14, 0x48, 0x7e, 0xca, 0x6a, 0xa3, 0xd6, 0x80, 0xf2, 0x3c, 0xa9, 0x3d, 0x07, 0x63, 0xf4, 0x12,
	0x0a, 0x41, 0x26, 0xd8, 0x6d, 0x58, 0xda, 0xdf, 0x4a, 0xee, 0x4a, 0x60, 0xab, 0x86, 0x56, 0xb5,
	0x7f, 0x67, 0xe3, 0x18, 0x67, 0xb6, 0x87, 0xdf, 0x73, 0x73, 0x62, 0x4b, 0xe0, 0x96, 0x5f, 0x02,
	0xda, 0x07, 0xfe, 0xd2, 0xf6, 0xfc, 0xbd, 0x28, 0xef, 0x3f, 0x5b, 0x18, 0x2d, 0x8d, 0xaa, 0x4e,
	0x7f, 0x54, 0x66, 0x1b, 0xcf, 0x63, 0xee, 0x6e, 0x12, 0xcb, 0x7f, 0xe0, 0x0e, 0x17, 0x1e, 0xb6,
	0xc3, 0xb5, 0x7d, 0xe0, 0x59, 0x0a, 0x13, 0x5d, 0x44, 0x1e, 0xb2, 0x7d, 0x45, 0xcc, 0x20, 0x01,
	0xf8, 0x43, 0x2a, 0xc9, 0x52, 0x75, 0x47, 0xea, 0xf7, 0xd4, 0x46, 0x5b, 0xe4, 0x6a, 0x7f, 0xe2,
	0xa0, 0x10, 0x9c, 0x97, 0x14, 0x5d, 0x7f, 0x0a, 0xf9, 0xa1, 0xed, 0x8c, 0x75, 0x8f, 0xe5, 0x3b,
	0xd9, 0xdb, 0x04, 0x3e, 0xf5, 0x23, 0x66, 0xa0, 0x06, 0x86, 0x68, 0x13, 0x72, 0x57, 0xc4, 0x08,
	0x9e, 0x97, 0x39, 0xd5, 0x1f, 0xa0, 0xc7, 0x90, 0xbf, 0xc0, 0x64, 0x74, 0xe1, 0xb1, 0x44, 0xe7,
	0xd4, 0x60, 0x84, 0x5e, 0x81, 0x10, 0xb5, 0xbd, 0xb9, 0xfb, 0xda, 0xde, 0xc8, 0x14, 0xed, 0xc6,
	0xe9, 0x22, 0xcf, 0x58, 0x3a, 0x46, 0x0d, 0x37, 0x77, 0xa1, 0xf0, 0x81, 0xbb, 0x20, 0x3c, 0xf0,
	0x9c, 0x21, 0xe0, 0x5d, 0xf2, 0x5b, 0xcc, 0xae, 0x0f, 0x4e, 0x65, 0xff, 0x6b, 0x87, 0x90, 0xf7,
	0x13, 0x95, 0xdc, 0x1b, 0x01, 0xf8, 0x96, 0x22, 0x1d, 0x8b, 0x19, 0x54, 0x00, 0xee, 0x58, 0x3e,
	0x12, 0xb3, 0xf4, 0x8f, 0xd2, 0x39, 0x16, 0x39, 0xaa, 0x7b, 0x2b, 0x1d, 0xbc, 0x11, 0x79, 0x2a,
	0x7a, 0xa3, 0x7c, 0x26, 0xe6, 0x6a, 0x6f, 0xa0, 0x18, 0x71, 0x3c, 0x12, 0x81, 0x9b, 0x3a, 0x66,
	0xb0, 0x5b, 0xf4, 0x2f, 0xaa, 0x82, 0xe0, 0xe0, 0x21, 0x76, 0x1c, 0xec, 0x04, 0xbc, 0x14, 0x8d,
	0x69, 0x50, 0xf4, 0x71, 0x1c, 0x1c, 0x1c, 0xf6, 0xbf, 0xf6, 0xcf, 0x0c, 0xe4, 0x15, 0x32, 0xe8,
	0xe9, 0xa3, 0xdb, 0x0e, 0xdd, 0x16, 0xe4, 0xe9, 0x03, 0x32, 0x3a, 0x70, 0x39, 0x4f, 0x1f, 0xf9,
	0xec, 0xc6, 0xc0, 0xb8, 0x39, 0xd8, 0xff, 0x2e, 0xbb, 0xd5, 0xfe, 0x9a, 0x65, 0x15, 0x7e, 0x17,
	0xb9, 0xc4, 0xd8, 0xa3, 0xf0, 0x00, 0xf6, 0xf8, 0x7e, 0xc0, 0x1e, 0x1c, 0x3b, 0x1d, 0xdb, 0xc9,
	0xd3, 0x71, 0x07, 0x6d, 0xdc, 0xd3, 0xfb, 0xe4, 0x3e, 0x30, 0x75, 0xf9, 0x6f, 0x81, 0x36, 0x7e,
	0x07, 0x65, 0x65, 0x7a, 0x6e, 0x92, 0x01, 0xeb, 0x13, 0xac, 0xa1, 0x8d, 0xb6, 0xe7, 0x39, 0xf4,
	0x73, 0x1b, 0x66, 0x69, 0x13, 0x72, 0xec, 0x8b, 0x51, 0x58, 0x43, 0x6c, 0x90, 0x5a, 0x34, 0xf7,
	0xa0, 0x45, 0xd7, 0xfe, 0x98, 0x81, 0xa2, 0x72, 0xe5, 0x9d, 0x60, 0xdd, 0xc0, 0x0e, 0xfa, 0x09,
	0x14, 0x75, 0x73, 0x64, 0x3b, 0xc4, 0xbb, 0x18, 0xb3, 0xd9, 0x6f, 0x70, 0x79, 0x68, 0x58, 0x6f,
	0x84, 0x56, 0xea, 0xdc, 0x21, 0xbe, 0x33, 0x59, 0x76, 0x66, 0xa3, 0xd2, 0xf9, 0x12, 0x8a, 0x91,
	0x47, 0x32, 0x3d, 0x45, 0xc8, 0x9d, 0x74, 0xf7, 0x5f, 0x7d, 0x2e, 0x66, 0xe8, 0x5f, 0x95, 0xfd,
	0x65, 0x6f, 0xb2, 0x93, 0xee, 0xab, 0x4f, 0xf7, 0x35, 0x3a, 0xe4, 0x6a, 0xbf, 0xe7, 0x00, 0x94,
	0x2b, 0x4f, 0xd1, 0xaf, 0x4d, 0x5b, 0x67, 0xdd, 0xaf, 0x3b, 0x3d, 0xff, 0x0d, 0x1e, 0x78, 0x41,
	0x86, 0xc2, 0x21, 0x7d, 0x48, 0x5a, 0xb6, 0xa7, 0x9d, 0xe3, 0xa1, 0xed, 0xe0, 0xe0, 0x13, 0xdf,
	0x5d, 0xa9, 0x28, 0x5a, 0xb6, 0x77, 0xc0, 0x8c, 0xd1, 0x8f, 0x80, 0x0e, 0x34, 0x7d, 0xe8, 0x05,
	0xa7, 0xfe, 0x6e, 0x4f, 0xc1, 0xb2, 0xbd, 0x06, 0xb5, 0x45, 0xaf, 0xa1, 0xec, 0xda, 0x43, 0x4f,
	0x9b, 0x7b, 0x2f, 0x51, 0x37, 0xd4, 0xa3, 0x13, 0x22, 0x3c, 0x86, 0x3c, 0x71, 0xdd, 0x29, 0x76,
	0x58, 0x41, 0x17, 0xd5, 0x60, 0x44, 0xdb, 0x5c, 0xcf, 0xfe, 0x1a, 0x5b, 0xb4, 0x14, 0x72, 0x7e,
	0x42, 0xd9, 0x58, 0x36, 0x50, 0x1d, 0x78, 0xef, 0x7a, 0xe2, 0x73, 0x72, 0x79, 0xbf, 0x9a, 0xdc,
	0xa3, 0x20, 0x4f, 0xf5, 0xde, 0xf5, 0x04, 0xab, 0xcc, 0xae, 0xf6, 0x0a, 0x78, 0x3a, 0x4a, 0xb1,
	0x66, 0xa3, 0xdf, 0x3b, 0x09, 0xc8, 0x52, 0x7e, 0x27, 0x72, 0x35, 0x5e, 0xc8, 0x88, 0x99, 0x17,
	0x05, 0x55, 0x3a, 0x52, 0xa5, 0xee, 0x89, 0xdf, 0x97, 0xaa, 0x6b, 0x7e, 0x14, 0x51, 0xb3, 0x56,
	0xfb, 0x26, 0x0b, 0x3c, 0xad, 0xd7, 0x6f, 0xb7, 0x56, 0xd3, 0x07, 0x94, 0x7f, 0x20, 0xb7, 0xbd,
	0x86, 0xb2, 0xa9, 0xbb, 0x9e, 0xe6, 0x62, 0x6c, 0x2d, 0xcd, 0x8e, 0xd4, 0xa3, 0x8b, 0xb1, 0x75,
	0x4f, 0xef, 0x97, 0xfc, 0x86, 0x51, 0x78, 0xc8, 0x37, 0x8c, 0xbf, 0x14, 0xa0, 0x18, 0x7d, 0x1e,
	0xb9, 0x3d, 0xa7, 0x35, 0x58, 0x9d, 0x7f, 0x7b, 0x99, 0xdf, 0x25, 0xa5, 0x69, 0xe8, 0x2a, 0x1b,
	0x1f, 0x9a, 0x61, 0x0c, 0x15, 0x7b, 0xea, 0x8d, 0x6c, 0xfa, 0x7c, 0x9b, 0x4e, 0x5c, 0xec, 0x78,
	0xec, 0x53, 0x55, 0xd4, 0xda, 0x95, 0xf6, 0x5f, 0xc4, 0x96, 0x14, 0xc5, 0x5c, 0x3f, 0x0d, 0x9c,
	0xfa, 0xcc, 0x27, 0x20, 0xed, 0x93, 0x47, 0xea, 0x96, 0xbd, 0x48, 0x41, 0xa7, 0x21, 0xd6, 0xc0,
	0x1e, 0x2f, 0x9a, 0x26, 0x77, 0xc7, 0x34, 0x72, 0xe0, 0x94, 0x9a, 0x86, 0x2c, 0x52, 0xa0, 0x5f,
	0xc0, 0x66, 0xb4, 0x9a, 0xd8, 0x17, 0xb7, 0xe0, 0x7c, 0x7e, 0xf7, 0xce, 0x95, 0xcc, 0xdb, 0xd6,
	0x93, 0x47, 0x2a, 0xb2, 0x53, 0x52, 0x0a, 0x1e, 0xad, 0x21, 0x0e, 0x5e, 0xb8, 0x03, 0x3c, 0x8c,
	0x3f, 0x09, 0x4e, 0x52, 0x52, 0xf4, 0x15, 0xc0, 0x3c, 0x2f, 0x41, 0xe3, 0xf4, 0x6c, 0x21, 0x64,
	0xb4, 0xe2, 0x93, 0x47, 0x6a, 0x71, 0x1a, 0x0e, 0xaa, 0x75, 0xd8, 0x5a, 0xb8, 0x27, 0xb7, 0x5c,
	0xdc, 0xd5, 0x33, 0xd8, 0x5a, 0x98, 0xdc, 0xdb, 0x2e, 0xfa, 0x8f, 0x60, 0x2d, 0xe0, 0xdc, 0xe8,
	0x49, 0xec, 0x57, 0xe3, 0x6a, 0x20, 0xf6, 0x9f, 0xbd, 0xd5, 0x16, 0xa0, 0x74, 0x46, 0xdf, 0xef,
	0x69, 0x52, 0xbd, 0x04, 0x94, 0x4e, 0xe0, 0x7f, 0xff, 0x0d, 0x5a, 0xad, 0x41, 0x31, 0xca, 0xc9,
	0x2d, 0xd3, 0x1d, 0xe4, 0x80, 0xc3, 0x97, 0xde, 0x8b, 0x2f, 0xa0, 0x1c, 0x7e, 0xde, 0x50, 0xb1,
	0xee, 0xda, 0x56, 0x8a, 0x70, 0x3b, 0xa7, 0x1d, 0x49, 0xcc, 0x20, 0x04, 0x65, 0xb5, 0xdf, 0x96,
	0xb4, 0x33, 0xf9, 0xb4, 0xdd, 0xe8, 0xc9, 0xa7, 0x1d, 0x31, 0x7b, 0xf0, 0x09, 0xac, 0xda, 0xce,
	0x68, 0xbe, 0xcb, 0x4a, 0xe6, 0xe7, 0xdb, 0xfe, 0xc0, 0x76, 0x46, 0x2f, 0xd9, 0xbf, 0x97, 0xfa,
	0x84, 0x7c, 0xa1, 0x4f, 0xc8, 0xdf, 0x33, 0x99, 0xf3, 0x3c, 0x3b, 0xcc, 0x3f, 0xfc, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd4, 0x26, 0xf3, 0x37, 0xbb, 0x1b, 0x00, 0x00,
}
