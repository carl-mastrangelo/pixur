syntax = "proto3";

package pixur;

option go_package = "schema";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message Pic {
  int64 pic_id = 1;
  File file = 22;

  reserved 2, 3, 4, 5, 9, 13;

  google.protobuf.Timestamp created_ts = 10;
  google.protobuf.Timestamp modified_ts = 11;

  // If present, the pic is on the path to removal.  When the pic is marked
  // for deletion, it is delisted from normal indexing operations.  When the
  // pic is actually "deleted" only the pic object is removed.
  DeletionStatus deletion_status = 12;

  message DeletionStatus {
    // Represents when this Pic was marked for deletion
    google.protobuf.Timestamp marked_deleted_ts = 1;
    // Represents when this picture will be auto deleted.  Note that the Pic
    // may exist for a short period after this time.  (may be absent)
    google.protobuf.Timestamp pending_deleted_ts = 2;
    // Determines when Pic was actually deleted.  (present after the Pic is
    // hard deleted, a.k.a purging)
    google.protobuf.Timestamp actual_deleted_ts = 3;
    // Gives an explanation for why this pic was removed.
    string details = 4;

    enum Reason {
      // The reason is not know, due to limitations of proto
      UNKNOWN = 0;
      // No specific reason.  This is a catch-all reason.
      NONE = 1;
      // The pic is in violation of the rules.
      RULE_VIOLATION = 2;
    }
    // The reason the pic was removed.
    Reason reason = 5;
    // Determines if this pic can be undeleted if re uploaded.  Currently the
    // only reason is due to disk space concerns.
    bool temporary = 6;

    // TODO: maybe include a "see other" pic id in this message.  This would
    // handle deletion inferior versions of other pics.
  }

  int64 view_count = 14;

  message FileSource {
    // url is optional and is the location the pic came from.
    string url = 1;
    // referrer is optional and is what website the pic was linked to from.
    string referrer = 2;
    // created_ts is the time the file source was added.
    google.protobuf.Timestamp created_ts = 3;
    // If present, there is only one file_source per user_id.
    int64 user_id = 4;
    // name is optional and the file name for this source.  It may be derived
    // from the url, from the content-disposition, or from the user who
    // upload the file.
    string name = 5;
  }

  repeated FileSource source = 15;
  // The denormalized sum of upvotes for this pic
  int64 vote_up = 17;
  // The denormalized sum of downvotes for this pic
  int64 vote_down = 18;

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 19;
  reserved 16, 20;

  message File {
    int64 index = 1; // usually concatenated after the file id
    int64 size = 2; // how big the file is

    enum Mime {
      UNKNOWN = 0;
      JPEG = 1;
      GIF = 2;
      PNG = 3;
      WEBM = 4;
    }

    Mime mime = 3;
    int64 width = 4;
    int64 height = 5;
    google.protobuf.Timestamp created_ts = 6;
    google.protobuf.Timestamp modified_ts = 7;
    // Only present on animated images.
    AnimationInfo animation_info = 8;
  }

  repeated File thumbnail = 21;
}

// A picture identifier
message PicIdent {
  int64 pic_id = 1;
  enum Type {
    UNKNOWN = 0;
    SHA256 = 1;
    SHA1 = 2;
    MD5 = 3;
    DCT_0 = 4;
  }

  Type type = 2;

  bytes value = 3;

  // dct0 are the upper 8x8 corner of the 32x32 dct of the image
  repeated float dct0_values = 4 [packed=true];

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 5;
}

message AnimationInfo {
  // How long this animated image in time.  There must be more than 1 frame
  // for this value to be set.
  google.protobuf.Duration duration = 1;
}

message Tag {
  int64 tag_id = 1;
  string name = 2;
  int64 usage_count = 3;
  google.protobuf.Timestamp created_ts = 6;
  google.protobuf.Timestamp modified_ts = 7;

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 8;
}

message PicTag {
  int64 pic_id = 1;
  int64 tag_id = 2;
  string name = 3;

  // The user who originally created this tag.  optional.
  int64 user_id = 8;
  google.protobuf.Timestamp created_ts = 6;
  google.protobuf.Timestamp modified_ts = 7;

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 9;
}

message PicComment {
	int64 pic_id = 1;
	int64 comment_id = 2;

	// parent id of this comment.  0 if root.
	int64 comment_parent_id = 3;
	
	// author
	int64 user_id = 4;
	
	string text = 7;

  google.protobuf.Timestamp created_ts = 5;
  google.protobuf.Timestamp modified_ts = 6;

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 8;
}

message PicVote {
  int64 pic_id = 1;
  int64 user_id = 2;

  enum Vote {
    UNKNOWN = 0;
    UP = 1;
    DOWN = 2;
    NEUTRAL = 3;
  }

  Vote vote = 3;

  google.protobuf.Timestamp created_ts = 4;
  google.protobuf.Timestamp modified_ts = 5;

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 6;
}

message User {
  int64 user_id = 1;

  // Hashed secret token
  bytes secret = 2;

  // Identity of the user, usually an email.
  string ident = 3;

  google.protobuf.Timestamp created_ts = 4;
  google.protobuf.Timestamp modified_ts = 5;
  google.protobuf.Timestamp last_seen_ts = 6;

  enum Capability {
    UNKNOWN = 0;
    // Can this user create and upload pictures
    PIC_CREATE = 1;
    // Can this user view the actual image data (grants pic token)
    PIC_READ = 2;
    // Can this user perform general pic index queries?
    PIC_INDEX = 3;
    // Can this user soft delete a pic?
    PIC_SOFT_DELETE = 5;
    // Can this user hard delete a pic?
    PIC_HARD_DELETE = 6;
    // Can this user purge a pic?
    PIC_PURGE = 7;
    // Can this user increment the pic view counter?
    PIC_UPDATE_VIEW_COUNTER = 8;
    // Can this user add tags and pic tags?
    PIC_TAG_CREATE = 9;
    // Can this user create comments?
    PIC_COMMENT_CREATE = 10;
    // Can this user vote?
    PIC_VOTE_CREATE = 11;
    // Can this user create other users?
    USER_CREATE = 4;
    // Can this user modify capabilities?
    USER_UPDATE_CAPABILITY = 12;
    // Can this user read information about themselves?
    USER_READ_SELF = 13;
    // Can this user read infortmation about others?
    USER_READ_ALL = 14;
  }

  repeated Capability capability = 7;

  // Always increment-then-get
  int64 next_token_id = 8;
  repeated UserToken user_token = 9;

  // Extra information that may not fit into the schema
  map<string, google.protobuf.Any> ext = 10;
}

// Represent the valid auth tokens.  When a user logs out, these will be
// deleted.
message UserToken {
	int64 token_id = 1;
	google.protobuf.Timestamp created_ts = 2;
	google.protobuf.Timestamp last_seen_ts = 3;
}

