// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pixur.proto

package schema

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pic_DeletionStatus_Reason int32

const (
	// The reason is not know, due to limitations of proto
	Pic_DeletionStatus_UNKNOWN Pic_DeletionStatus_Reason = 0
	// No specific reason.  This is a catch-all reason.
	Pic_DeletionStatus_NONE Pic_DeletionStatus_Reason = 1
	// The pic is in violation of the rules.
	Pic_DeletionStatus_RULE_VIOLATION Pic_DeletionStatus_Reason = 2
)

var Pic_DeletionStatus_Reason_name = map[int32]string{
	0: "UNKNOWN",
	1: "NONE",
	2: "RULE_VIOLATION",
}

var Pic_DeletionStatus_Reason_value = map[string]int32{
	"UNKNOWN":        0,
	"NONE":           1,
	"RULE_VIOLATION": 2,
}

func (x Pic_DeletionStatus_Reason) String() string {
	return proto.EnumName(Pic_DeletionStatus_Reason_name, int32(x))
}

func (Pic_DeletionStatus_Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{0, 0, 0}
}

type Pic_File_Mime int32

const (
	Pic_File_UNKNOWN Pic_File_Mime = 0
	Pic_File_JPEG    Pic_File_Mime = 1
	Pic_File_GIF     Pic_File_Mime = 2
	Pic_File_PNG     Pic_File_Mime = 3
	Pic_File_WEBM    Pic_File_Mime = 4
)

var Pic_File_Mime_name = map[int32]string{
	0: "UNKNOWN",
	1: "JPEG",
	2: "GIF",
	3: "PNG",
	4: "WEBM",
}

var Pic_File_Mime_value = map[string]int32{
	"UNKNOWN": 0,
	"JPEG":    1,
	"GIF":     2,
	"PNG":     3,
	"WEBM":    4,
}

func (x Pic_File_Mime) String() string {
	return proto.EnumName(Pic_File_Mime_name, int32(x))
}

func (Pic_File_Mime) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{0, 3, 0}
}

type PicIdent_Type int32

const (
	PicIdent_UNKNOWN    PicIdent_Type = 0
	PicIdent_SHA1       PicIdent_Type = 2
	PicIdent_MD5        PicIdent_Type = 3
	PicIdent_DCT_0      PicIdent_Type = 4
	PicIdent_SHA512_256 PicIdent_Type = 5
)

var PicIdent_Type_name = map[int32]string{
	0: "UNKNOWN",
	2: "SHA1",
	3: "MD5",
	4: "DCT_0",
	5: "SHA512_256",
}

var PicIdent_Type_value = map[string]int32{
	"UNKNOWN":    0,
	"SHA1":       2,
	"MD5":        3,
	"DCT_0":      4,
	"SHA512_256": 5,
}

func (x PicIdent_Type) String() string {
	return proto.EnumName(PicIdent_Type_name, int32(x))
}

func (PicIdent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{1, 0}
}

type PicVote_Vote int32

const (
	PicVote_UNKNOWN PicVote_Vote = 0
	PicVote_UP      PicVote_Vote = 1
	PicVote_DOWN    PicVote_Vote = 2
	PicVote_NEUTRAL PicVote_Vote = 3
)

var PicVote_Vote_name = map[int32]string{
	0: "UNKNOWN",
	1: "UP",
	2: "DOWN",
	3: "NEUTRAL",
}

var PicVote_Vote_value = map[string]int32{
	"UNKNOWN": 0,
	"UP":      1,
	"DOWN":    2,
	"NEUTRAL": 3,
}

func (x PicVote_Vote) String() string {
	return proto.EnumName(PicVote_Vote_name, int32(x))
}

func (PicVote_Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{6, 0}
}

type User_Capability int32

const (
	User_UNKNOWN User_Capability = 0
	// Can this user create and upload pictures
	User_PIC_CREATE User_Capability = 1
	// Can this user view the actual image data (grants pic token)
	User_PIC_READ User_Capability = 2
	// Can this user perform general pic index queries?
	User_PIC_INDEX User_Capability = 3
	// Can this user soft delete a pic?
	User_PIC_SOFT_DELETE User_Capability = 5
	// Can this user hard delete a pic?
	User_PIC_HARD_DELETE User_Capability = 6
	// Can this user purge a pic?
	User_PIC_PURGE User_Capability = 7
	// Can this user increment the pic view counter?
	User_PIC_UPDATE_VIEW_COUNTER User_Capability = 8
	// Can this user add tags and pic tags?
	User_PIC_TAG_CREATE User_Capability = 9
	// Can this user create comments?
	User_PIC_COMMENT_CREATE User_Capability = 10
	// Can this user vote?
	User_PIC_VOTE_CREATE User_Capability = 11
	// Can this user create other users?
	User_USER_CREATE User_Capability = 4
	// Can this user modify capabilities?
	User_USER_UPDATE_CAPABILITY User_Capability = 12
	// Can this user read information about themselves?
	User_USER_READ_SELF User_Capability = 13
	// Can this user read infortmation about others?
	User_USER_READ_ALL User_Capability = 14
)

var User_Capability_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "PIC_CREATE",
	2:  "PIC_READ",
	3:  "PIC_INDEX",
	5:  "PIC_SOFT_DELETE",
	6:  "PIC_HARD_DELETE",
	7:  "PIC_PURGE",
	8:  "PIC_UPDATE_VIEW_COUNTER",
	9:  "PIC_TAG_CREATE",
	10: "PIC_COMMENT_CREATE",
	11: "PIC_VOTE_CREATE",
	4:  "USER_CREATE",
	12: "USER_UPDATE_CAPABILITY",
	13: "USER_READ_SELF",
	14: "USER_READ_ALL",
}

var User_Capability_value = map[string]int32{
	"UNKNOWN":                 0,
	"PIC_CREATE":              1,
	"PIC_READ":                2,
	"PIC_INDEX":               3,
	"PIC_SOFT_DELETE":         5,
	"PIC_HARD_DELETE":         6,
	"PIC_PURGE":               7,
	"PIC_UPDATE_VIEW_COUNTER": 8,
	"PIC_TAG_CREATE":          9,
	"PIC_COMMENT_CREATE":      10,
	"PIC_VOTE_CREATE":         11,
	"USER_CREATE":             4,
	"USER_UPDATE_CAPABILITY":  12,
	"USER_READ_SELF":          13,
	"USER_READ_ALL":           14,
}

func (x User_Capability) String() string {
	return proto.EnumName(User_Capability_name, int32(x))
}

func (User_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{7, 0}
}

type Pic struct {
	PicId      int64                `protobuf:"varint,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	File       *Pic_File            `protobuf:"bytes,22,opt,name=file,proto3" json:"file,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,11,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	// If present, the pic is on the path to removal.  When the pic is marked
	// for deletion, it is delisted from normal indexing operations.  When the
	// pic is actually "deleted" only the pic object is removed.
	DeletionStatus *Pic_DeletionStatus `protobuf:"bytes,12,opt,name=deletion_status,json=deletionStatus,proto3" json:"deletion_status,omitempty"`
	ViewCount      int64               `protobuf:"varint,14,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Source         []*Pic_FileSource   `protobuf:"bytes,15,rep,name=source,proto3" json:"source,omitempty"`
	// The denormalized sum of upvotes for this pic
	VoteUp int64 `protobuf:"varint,17,opt,name=vote_up,json=voteUp,proto3" json:"vote_up,omitempty"`
	// The denormalized sum of downvotes for this pic
	VoteDown int64 `protobuf:"varint,18,opt,name=vote_down,json=voteDown,proto3" json:"vote_down,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,19,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Thumbnail            []*Pic_File         `protobuf:"bytes,21,rep,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Pic) Reset()         { *m = Pic{} }
func (m *Pic) String() string { return proto.CompactTextString(m) }
func (*Pic) ProtoMessage()    {}
func (*Pic) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{0}
}

func (m *Pic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pic.Unmarshal(m, b)
}
func (m *Pic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pic.Marshal(b, m, deterministic)
}
func (m *Pic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pic.Merge(m, src)
}
func (m *Pic) XXX_Size() int {
	return xxx_messageInfo_Pic.Size(m)
}
func (m *Pic) XXX_DiscardUnknown() {
	xxx_messageInfo_Pic.DiscardUnknown(m)
}

var xxx_messageInfo_Pic proto.InternalMessageInfo

func (m *Pic) GetPicId() int64 {
	if m != nil {
		return m.PicId
	}
	return 0
}

func (m *Pic) GetFile() *Pic_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Pic) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *Pic) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *Pic) GetDeletionStatus() *Pic_DeletionStatus {
	if m != nil {
		return m.DeletionStatus
	}
	return nil
}

func (m *Pic) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *Pic) GetSource() []*Pic_FileSource {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Pic) GetVoteUp() int64 {
	if m != nil {
		return m.VoteUp
	}
	return 0
}

func (m *Pic) GetVoteDown() int64 {
	if m != nil {
		return m.VoteDown
	}
	return 0
}

func (m *Pic) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *Pic) GetThumbnail() []*Pic_File {
	if m != nil {
		return m.Thumbnail
	}
	return nil
}

type Pic_DeletionStatus struct {
	// Represents when this Pic was marked for deletion
	MarkedDeletedTs *timestamp.Timestamp `protobuf:"bytes,1,opt,name=marked_deleted_ts,json=markedDeletedTs,proto3" json:"marked_deleted_ts,omitempty"`
	// Represents when this picture will be auto deleted.  Note that the Pic
	// may exist for a short period after this time.  (may be absent)
	PendingDeletedTs *timestamp.Timestamp `protobuf:"bytes,2,opt,name=pending_deleted_ts,json=pendingDeletedTs,proto3" json:"pending_deleted_ts,omitempty"`
	// Determines when Pic was actually deleted.  (present after the Pic is
	// hard deleted, a.k.a purging)
	ActualDeletedTs *timestamp.Timestamp `protobuf:"bytes,3,opt,name=actual_deleted_ts,json=actualDeletedTs,proto3" json:"actual_deleted_ts,omitempty"`
	// Gives an explanation for why this pic was removed.
	Details string `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	// The reason the pic was removed.
	Reason Pic_DeletionStatus_Reason `protobuf:"varint,5,opt,name=reason,proto3,enum=pixur.Pic_DeletionStatus_Reason" json:"reason,omitempty"`
	// Determines if this pic can be undeleted if re uploaded.  Currently the
	// only reason is due to disk space concerns.
	Temporary            bool     `protobuf:"varint,6,opt,name=temporary,proto3" json:"temporary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pic_DeletionStatus) Reset()         { *m = Pic_DeletionStatus{} }
func (m *Pic_DeletionStatus) String() string { return proto.CompactTextString(m) }
func (*Pic_DeletionStatus) ProtoMessage()    {}
func (*Pic_DeletionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{0, 0}
}

func (m *Pic_DeletionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pic_DeletionStatus.Unmarshal(m, b)
}
func (m *Pic_DeletionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pic_DeletionStatus.Marshal(b, m, deterministic)
}
func (m *Pic_DeletionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pic_DeletionStatus.Merge(m, src)
}
func (m *Pic_DeletionStatus) XXX_Size() int {
	return xxx_messageInfo_Pic_DeletionStatus.Size(m)
}
func (m *Pic_DeletionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Pic_DeletionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_Pic_DeletionStatus proto.InternalMessageInfo

func (m *Pic_DeletionStatus) GetMarkedDeletedTs() *timestamp.Timestamp {
	if m != nil {
		return m.MarkedDeletedTs
	}
	return nil
}

func (m *Pic_DeletionStatus) GetPendingDeletedTs() *timestamp.Timestamp {
	if m != nil {
		return m.PendingDeletedTs
	}
	return nil
}

func (m *Pic_DeletionStatus) GetActualDeletedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ActualDeletedTs
	}
	return nil
}

func (m *Pic_DeletionStatus) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *Pic_DeletionStatus) GetReason() Pic_DeletionStatus_Reason {
	if m != nil {
		return m.Reason
	}
	return Pic_DeletionStatus_UNKNOWN
}

func (m *Pic_DeletionStatus) GetTemporary() bool {
	if m != nil {
		return m.Temporary
	}
	return false
}

type Pic_FileSource struct {
	// url is optional and is the location the pic came from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// referrer is optional and is what website the pic was linked to from.
	Referrer string `protobuf:"bytes,2,opt,name=referrer,proto3" json:"referrer,omitempty"`
	// created_ts is the time the file source was added.
	CreatedTs *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	// If present, there is only one file_source per user_id.
	UserId int64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// name is optional and the file name for this source.  It may be derived
	// from the url, from the content-disposition, or from the user who
	// upload the file.
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pic_FileSource) Reset()         { *m = Pic_FileSource{} }
func (m *Pic_FileSource) String() string { return proto.CompactTextString(m) }
func (*Pic_FileSource) ProtoMessage()    {}
func (*Pic_FileSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{0, 1}
}

func (m *Pic_FileSource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pic_FileSource.Unmarshal(m, b)
}
func (m *Pic_FileSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pic_FileSource.Marshal(b, m, deterministic)
}
func (m *Pic_FileSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pic_FileSource.Merge(m, src)
}
func (m *Pic_FileSource) XXX_Size() int {
	return xxx_messageInfo_Pic_FileSource.Size(m)
}
func (m *Pic_FileSource) XXX_DiscardUnknown() {
	xxx_messageInfo_Pic_FileSource.DiscardUnknown(m)
}

var xxx_messageInfo_Pic_FileSource proto.InternalMessageInfo

func (m *Pic_FileSource) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Pic_FileSource) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *Pic_FileSource) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *Pic_FileSource) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Pic_FileSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Pic_File struct {
	Index      int64                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Size       int64                `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Mime       Pic_File_Mime        `protobuf:"varint,3,opt,name=mime,proto3,enum=pixur.Pic_File_Mime" json:"mime,omitempty"`
	Width      int64                `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	Height     int64                `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,7,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	// Only present on animated images.
	AnimationInfo        *AnimationInfo `protobuf:"bytes,8,opt,name=animation_info,json=animationInfo,proto3" json:"animation_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Pic_File) Reset()         { *m = Pic_File{} }
func (m *Pic_File) String() string { return proto.CompactTextString(m) }
func (*Pic_File) ProtoMessage()    {}
func (*Pic_File) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{0, 3}
}

func (m *Pic_File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pic_File.Unmarshal(m, b)
}
func (m *Pic_File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pic_File.Marshal(b, m, deterministic)
}
func (m *Pic_File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pic_File.Merge(m, src)
}
func (m *Pic_File) XXX_Size() int {
	return xxx_messageInfo_Pic_File.Size(m)
}
func (m *Pic_File) XXX_DiscardUnknown() {
	xxx_messageInfo_Pic_File.DiscardUnknown(m)
}

var xxx_messageInfo_Pic_File proto.InternalMessageInfo

func (m *Pic_File) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Pic_File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Pic_File) GetMime() Pic_File_Mime {
	if m != nil {
		return m.Mime
	}
	return Pic_File_UNKNOWN
}

func (m *Pic_File) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Pic_File) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Pic_File) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *Pic_File) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *Pic_File) GetAnimationInfo() *AnimationInfo {
	if m != nil {
		return m.AnimationInfo
	}
	return nil
}

// A picture identifier
type PicIdent struct {
	PicId int64         `protobuf:"varint,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	Type  PicIdent_Type `protobuf:"varint,2,opt,name=type,proto3,enum=pixur.PicIdent_Type" json:"type,omitempty"`
	Value []byte        `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// dct0 are the upper 8x8 corner of the 32x32 dct of the image
	Dct0Values []float32 `protobuf:"fixed32,4,rep,packed,name=dct0_values,json=dct0Values,proto3" json:"dct0_values,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,5,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PicIdent) Reset()         { *m = PicIdent{} }
func (m *PicIdent) String() string { return proto.CompactTextString(m) }
func (*PicIdent) ProtoMessage()    {}
func (*PicIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{1}
}

func (m *PicIdent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicIdent.Unmarshal(m, b)
}
func (m *PicIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicIdent.Marshal(b, m, deterministic)
}
func (m *PicIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicIdent.Merge(m, src)
}
func (m *PicIdent) XXX_Size() int {
	return xxx_messageInfo_PicIdent.Size(m)
}
func (m *PicIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_PicIdent.DiscardUnknown(m)
}

var xxx_messageInfo_PicIdent proto.InternalMessageInfo

func (m *PicIdent) GetPicId() int64 {
	if m != nil {
		return m.PicId
	}
	return 0
}

func (m *PicIdent) GetType() PicIdent_Type {
	if m != nil {
		return m.Type
	}
	return PicIdent_UNKNOWN
}

func (m *PicIdent) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PicIdent) GetDct0Values() []float32 {
	if m != nil {
		return m.Dct0Values
	}
	return nil
}

func (m *PicIdent) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

type AnimationInfo struct {
	// How long this animated image in time.  There must be more than 1 frame
	// for this value to be set.
	Duration             *duration.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AnimationInfo) Reset()         { *m = AnimationInfo{} }
func (m *AnimationInfo) String() string { return proto.CompactTextString(m) }
func (*AnimationInfo) ProtoMessage()    {}
func (*AnimationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{2}
}

func (m *AnimationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnimationInfo.Unmarshal(m, b)
}
func (m *AnimationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnimationInfo.Marshal(b, m, deterministic)
}
func (m *AnimationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnimationInfo.Merge(m, src)
}
func (m *AnimationInfo) XXX_Size() int {
	return xxx_messageInfo_AnimationInfo.Size(m)
}
func (m *AnimationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AnimationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AnimationInfo proto.InternalMessageInfo

func (m *AnimationInfo) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type Tag struct {
	TagId      int64                `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Name       string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UsageCount int64                `protobuf:"varint,3,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,7,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,8,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{3}
}

func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetUsageCount() int64 {
	if m != nil {
		return m.UsageCount
	}
	return 0
}

func (m *Tag) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *Tag) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *Tag) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

type PicTag struct {
	PicId int64  `protobuf:"varint,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	TagId int64  `protobuf:"varint,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The user who originally created this tag.  optional.
	UserId     int64                `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,7,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,9,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PicTag) Reset()         { *m = PicTag{} }
func (m *PicTag) String() string { return proto.CompactTextString(m) }
func (*PicTag) ProtoMessage()    {}
func (*PicTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{4}
}

func (m *PicTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicTag.Unmarshal(m, b)
}
func (m *PicTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicTag.Marshal(b, m, deterministic)
}
func (m *PicTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicTag.Merge(m, src)
}
func (m *PicTag) XXX_Size() int {
	return xxx_messageInfo_PicTag.Size(m)
}
func (m *PicTag) XXX_DiscardUnknown() {
	xxx_messageInfo_PicTag.DiscardUnknown(m)
}

var xxx_messageInfo_PicTag proto.InternalMessageInfo

func (m *PicTag) GetPicId() int64 {
	if m != nil {
		return m.PicId
	}
	return 0
}

func (m *PicTag) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *PicTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PicTag) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PicTag) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *PicTag) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *PicTag) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

type PicComment struct {
	PicId     int64 `protobuf:"varint,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	CommentId int64 `protobuf:"varint,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	// parent id of this comment.  0 if root.
	CommentParentId int64 `protobuf:"varint,3,opt,name=comment_parent_id,json=commentParentId,proto3" json:"comment_parent_id,omitempty"`
	// author
	UserId     int64                `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Text       string               `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,6,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,8,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PicComment) Reset()         { *m = PicComment{} }
func (m *PicComment) String() string { return proto.CompactTextString(m) }
func (*PicComment) ProtoMessage()    {}
func (*PicComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{5}
}

func (m *PicComment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicComment.Unmarshal(m, b)
}
func (m *PicComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicComment.Marshal(b, m, deterministic)
}
func (m *PicComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicComment.Merge(m, src)
}
func (m *PicComment) XXX_Size() int {
	return xxx_messageInfo_PicComment.Size(m)
}
func (m *PicComment) XXX_DiscardUnknown() {
	xxx_messageInfo_PicComment.DiscardUnknown(m)
}

var xxx_messageInfo_PicComment proto.InternalMessageInfo

func (m *PicComment) GetPicId() int64 {
	if m != nil {
		return m.PicId
	}
	return 0
}

func (m *PicComment) GetCommentId() int64 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

func (m *PicComment) GetCommentParentId() int64 {
	if m != nil {
		return m.CommentParentId
	}
	return 0
}

func (m *PicComment) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PicComment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *PicComment) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *PicComment) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *PicComment) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

type PicVote struct {
	PicId      int64                `protobuf:"varint,1,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
	UserId     int64                `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Vote       PicVote_Vote         `protobuf:"varint,3,opt,name=vote,proto3,enum=pixur.PicVote_Vote" json:"vote,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,5,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,6,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PicVote) Reset()         { *m = PicVote{} }
func (m *PicVote) String() string { return proto.CompactTextString(m) }
func (*PicVote) ProtoMessage()    {}
func (*PicVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{6}
}

func (m *PicVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PicVote.Unmarshal(m, b)
}
func (m *PicVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PicVote.Marshal(b, m, deterministic)
}
func (m *PicVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicVote.Merge(m, src)
}
func (m *PicVote) XXX_Size() int {
	return xxx_messageInfo_PicVote.Size(m)
}
func (m *PicVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PicVote.DiscardUnknown(m)
}

var xxx_messageInfo_PicVote proto.InternalMessageInfo

func (m *PicVote) GetPicId() int64 {
	if m != nil {
		return m.PicId
	}
	return 0
}

func (m *PicVote) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PicVote) GetVote() PicVote_Vote {
	if m != nil {
		return m.Vote
	}
	return PicVote_UNKNOWN
}

func (m *PicVote) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *PicVote) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *PicVote) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

type User struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Hashed secret token
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// Identity of the user, usually an email.
	Ident      string               `protobuf:"bytes,3,opt,name=ident,proto3" json:"ident,omitempty"`
	CreatedTs  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	ModifiedTs *timestamp.Timestamp `protobuf:"bytes,5,opt,name=modified_ts,json=modifiedTs,proto3" json:"modified_ts,omitempty"`
	LastSeenTs *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_seen_ts,json=lastSeenTs,proto3" json:"last_seen_ts,omitempty"`
	Capability []User_Capability    `protobuf:"varint,7,rep,packed,name=capability,proto3,enum=pixur.User_Capability" json:"capability,omitempty"`
	// Always increment-then-get
	NextTokenId int64        `protobuf:"varint,8,opt,name=next_token_id,json=nextTokenId,proto3" json:"next_token_id,omitempty"`
	UserToken   []*UserToken `protobuf:"bytes,9,rep,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	// Extra information that may not fit into the schema
	Ext                  map[string]*any.Any `protobuf:"bytes,10,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{7}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *User) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *User) GetIdent() string {
	if m != nil {
		return m.Ident
	}
	return ""
}

func (m *User) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *User) GetModifiedTs() *timestamp.Timestamp {
	if m != nil {
		return m.ModifiedTs
	}
	return nil
}

func (m *User) GetLastSeenTs() *timestamp.Timestamp {
	if m != nil {
		return m.LastSeenTs
	}
	return nil
}

func (m *User) GetCapability() []User_Capability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func (m *User) GetNextTokenId() int64 {
	if m != nil {
		return m.NextTokenId
	}
	return 0
}

func (m *User) GetUserToken() []*UserToken {
	if m != nil {
		return m.UserToken
	}
	return nil
}

func (m *User) GetExt() map[string]*any.Any {
	if m != nil {
		return m.Ext
	}
	return nil
}

// Represent the valid auth tokens.  When a user logs out, these will be
// deleted.
type UserToken struct {
	TokenId              int64                `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	CreatedTs            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"`
	LastSeenTs           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_seen_ts,json=lastSeenTs,proto3" json:"last_seen_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserToken) Reset()         { *m = UserToken{} }
func (m *UserToken) String() string { return proto.CompactTextString(m) }
func (*UserToken) ProtoMessage()    {}
func (*UserToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{8}
}

func (m *UserToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserToken.Unmarshal(m, b)
}
func (m *UserToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserToken.Marshal(b, m, deterministic)
}
func (m *UserToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserToken.Merge(m, src)
}
func (m *UserToken) XXX_Size() int {
	return xxx_messageInfo_UserToken.Size(m)
}
func (m *UserToken) XXX_DiscardUnknown() {
	xxx_messageInfo_UserToken.DiscardUnknown(m)
}

var xxx_messageInfo_UserToken proto.InternalMessageInfo

func (m *UserToken) GetTokenId() int64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *UserToken) GetCreatedTs() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedTs
	}
	return nil
}

func (m *UserToken) GetLastSeenTs() *timestamp.Timestamp {
	if m != nil {
		return m.LastSeenTs
	}
	return nil
}

type Configuration struct {
	// the minimum comment length in bytes.
	MinCommentLength *wrappers.Int64Value `protobuf:"bytes,1,opt,name=min_comment_length,json=minCommentLength,proto3" json:"min_comment_length,omitempty"`
	// the maximum comment length in bytes.
	MaxCommentLength *wrappers.Int64Value `protobuf:"bytes,2,opt,name=max_comment_length,json=maxCommentLength,proto3" json:"max_comment_length,omitempty"`
	// the minimum ident length for a user in bytes.
	MinIdentLength *wrappers.Int64Value `protobuf:"bytes,3,opt,name=min_ident_length,json=minIdentLength,proto3" json:"min_ident_length,omitempty"`
	// the maximum ident length for a user in bytes.
	MaxIdentLength *wrappers.Int64Value `protobuf:"bytes,4,opt,name=max_ident_length,json=maxIdentLength,proto3" json:"max_ident_length,omitempty"`
	// the minimum file name length in bytes.
	MinFileNameLength *wrappers.Int64Value `protobuf:"bytes,5,opt,name=min_file_name_length,json=minFileNameLength,proto3" json:"min_file_name_length,omitempty"`
	// the maximum file name length in bytes.
	MaxFileNameLength *wrappers.Int64Value `protobuf:"bytes,6,opt,name=max_file_name_length,json=maxFileNameLength,proto3" json:"max_file_name_length,omitempty"`
	// the minimum url length for pic upsert in bytes.
	MinUrlLength *wrappers.Int64Value `protobuf:"bytes,7,opt,name=min_url_length,json=minUrlLength,proto3" json:"min_url_length,omitempty"`
	// the maximum url length for pic upsert in bytes.
	MaxUrlLength *wrappers.Int64Value `protobuf:"bytes,8,opt,name=max_url_length,json=maxUrlLength,proto3" json:"max_url_length,omitempty"`
	// the minimum tag length in bytes.
	MinTagLength *wrappers.Int64Value `protobuf:"bytes,9,opt,name=min_tag_length,json=minTagLength,proto3" json:"min_tag_length,omitempty"`
	// the maximum tag length in bytes.
	MaxTagLength *wrappers.Int64Value `protobuf:"bytes,10,opt,name=max_tag_length,json=maxTagLength,proto3" json:"max_tag_length,omitempty"`
	// the capabilities of the anonymous user.
	AnonymousCapability *Configuration_CapabilitySet `protobuf:"bytes,11,opt,name=anonymous_capability,json=anonymousCapability,proto3" json:"anonymous_capability,omitempty"`
	// the capabilities of a newly created user.
	NewUserCapability    *Configuration_CapabilitySet `protobuf:"bytes,12,opt,name=new_user_capability,json=newUserCapability,proto3" json:"new_user_capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{9}
}

func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Configuration.Unmarshal(m, b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return xxx_messageInfo_Configuration.Size(m)
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetMinCommentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinCommentLength
	}
	return nil
}

func (m *Configuration) GetMaxCommentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxCommentLength
	}
	return nil
}

func (m *Configuration) GetMinIdentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinIdentLength
	}
	return nil
}

func (m *Configuration) GetMaxIdentLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxIdentLength
	}
	return nil
}

func (m *Configuration) GetMinFileNameLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinFileNameLength
	}
	return nil
}

func (m *Configuration) GetMaxFileNameLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxFileNameLength
	}
	return nil
}

func (m *Configuration) GetMinUrlLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinUrlLength
	}
	return nil
}

func (m *Configuration) GetMaxUrlLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxUrlLength
	}
	return nil
}

func (m *Configuration) GetMinTagLength() *wrappers.Int64Value {
	if m != nil {
		return m.MinTagLength
	}
	return nil
}

func (m *Configuration) GetMaxTagLength() *wrappers.Int64Value {
	if m != nil {
		return m.MaxTagLength
	}
	return nil
}

func (m *Configuration) GetAnonymousCapability() *Configuration_CapabilitySet {
	if m != nil {
		return m.AnonymousCapability
	}
	return nil
}

func (m *Configuration) GetNewUserCapability() *Configuration_CapabilitySet {
	if m != nil {
		return m.NewUserCapability
	}
	return nil
}

type Configuration_CapabilitySet struct {
	Capability           []User_Capability `protobuf:"varint,1,rep,packed,name=capability,proto3,enum=pixur.User_Capability" json:"capability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Configuration_CapabilitySet) Reset()         { *m = Configuration_CapabilitySet{} }
func (m *Configuration_CapabilitySet) String() string { return proto.CompactTextString(m) }
func (*Configuration_CapabilitySet) ProtoMessage()    {}
func (*Configuration_CapabilitySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_962aa63430fd1f4b, []int{9, 0}
}

func (m *Configuration_CapabilitySet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Configuration_CapabilitySet.Unmarshal(m, b)
}
func (m *Configuration_CapabilitySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Configuration_CapabilitySet.Marshal(b, m, deterministic)
}
func (m *Configuration_CapabilitySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration_CapabilitySet.Merge(m, src)
}
func (m *Configuration_CapabilitySet) XXX_Size() int {
	return xxx_messageInfo_Configuration_CapabilitySet.Size(m)
}
func (m *Configuration_CapabilitySet) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration_CapabilitySet.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration_CapabilitySet proto.InternalMessageInfo

func (m *Configuration_CapabilitySet) GetCapability() []User_Capability {
	if m != nil {
		return m.Capability
	}
	return nil
}

func init() {
	proto.RegisterEnum("pixur.Pic_DeletionStatus_Reason", Pic_DeletionStatus_Reason_name, Pic_DeletionStatus_Reason_value)
	proto.RegisterEnum("pixur.Pic_File_Mime", Pic_File_Mime_name, Pic_File_Mime_value)
	proto.RegisterEnum("pixur.PicIdent_Type", PicIdent_Type_name, PicIdent_Type_value)
	proto.RegisterEnum("pixur.PicVote_Vote", PicVote_Vote_name, PicVote_Vote_value)
	proto.RegisterEnum("pixur.User_Capability", User_Capability_name, User_Capability_value)
	proto.RegisterType((*Pic)(nil), "pixur.Pic")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.Pic.ExtEntry")
	proto.RegisterType((*Pic_DeletionStatus)(nil), "pixur.Pic.DeletionStatus")
	proto.RegisterType((*Pic_FileSource)(nil), "pixur.Pic.FileSource")
	proto.RegisterType((*Pic_File)(nil), "pixur.Pic.File")
	proto.RegisterType((*PicIdent)(nil), "pixur.PicIdent")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.PicIdent.ExtEntry")
	proto.RegisterType((*AnimationInfo)(nil), "pixur.AnimationInfo")
	proto.RegisterType((*Tag)(nil), "pixur.Tag")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.Tag.ExtEntry")
	proto.RegisterType((*PicTag)(nil), "pixur.PicTag")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.PicTag.ExtEntry")
	proto.RegisterType((*PicComment)(nil), "pixur.PicComment")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.PicComment.ExtEntry")
	proto.RegisterType((*PicVote)(nil), "pixur.PicVote")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.PicVote.ExtEntry")
	proto.RegisterType((*User)(nil), "pixur.User")
	proto.RegisterMapType((map[string]*any.Any)(nil), "pixur.User.ExtEntry")
	proto.RegisterType((*UserToken)(nil), "pixur.UserToken")
	proto.RegisterType((*Configuration)(nil), "pixur.Configuration")
	proto.RegisterType((*Configuration_CapabilitySet)(nil), "pixur.Configuration.CapabilitySet")
}

func init() { proto.RegisterFile("pixur.proto", fileDescriptor_962aa63430fd1f4b) }

var fileDescriptor_962aa63430fd1f4b = []byte{
	// 1822 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0xae, 0x48, 0x8a, 0x22, 0x8f, 0x6c, 0x99, 0x9e, 0x38, 0x8e, 0xa2, 0x74, 0xbb, 0x86, 0x16,
	0x6d, 0xd5, 0xa0, 0xab, 0xec, 0x7a, 0xeb, 0x60, 0xb7, 0xdb, 0x1b, 0xd9, 0xa2, 0x6d, 0xb9, 0xb2,
	0x2c, 0x8c, 0xa8, 0xa4, 0xed, 0x0d, 0x31, 0x11, 0xc7, 0xf2, 0x20, 0x22, 0x29, 0x90, 0x54, 0x2c,
	0xf5, 0x05, 0x8a, 0x5e, 0x15, 0x7d, 0x82, 0x02, 0x7d, 0x83, 0xde, 0xf6, 0xa2, 0xaf, 0x50, 0x14,
	0x7d, 0x99, 0x5e, 0x16, 0x33, 0x24, 0x2d, 0x52, 0xde, 0xac, 0x65, 0x64, 0x8d, 0xdc, 0x18, 0x3c,
	0x3f, 0xf3, 0xcd, 0x99, 0xef, 0x9c, 0x39, 0x67, 0x64, 0x28, 0x4f, 0xd9, 0x7c, 0x16, 0x34, 0xa7,
	0x81, 0x1f, 0xf9, 0xa8, 0x28, 0x84, 0xda, 0xd3, 0xb1, 0xef, 0x8f, 0x27, 0xf4, 0x85, 0x50, 0xbe,
	0x99, 0x5d, 0xbe, 0x20, 0xde, 0x22, 0xf6, 0xa8, 0xfd, 0x64, 0xd5, 0xe4, 0xcc, 0x02, 0x12, 0x31,
	0xdf, 0x4b, 0xec, 0x9f, 0xae, 0xda, 0x23, 0xe6, 0xd2, 0x30, 0x22, 0xee, 0xf4, 0x7d, 0x00, 0xd7,
	0x01, 0x99, 0x4e, 0x69, 0x10, 0xc6, 0xf6, 0xfa, 0x9f, 0x37, 0x40, 0xee, 0xb3, 0x11, 0x7a, 0x0c,
	0xea, 0x94, 0x8d, 0x6c, 0xe6, 0x54, 0x0b, 0x7b, 0x85, 0x86, 0x8c, 0x8b, 0x53, 0x36, 0xea, 0x38,
	0xe8, 0x33, 0x50, 0x2e, 0xd9, 0x84, 0x56, 0x77, 0xf7, 0x0a, 0x8d, 0xf2, 0xfe, 0x56, 0x33, 0x8e,
	0xbe, 0xcf, 0x46, 0xcd, 0x63, 0x36, 0xa1, 0x58, 0x18, 0xd1, 0x37, 0x00, 0xa3, 0x80, 0x92, 0x88,
	0x3a, 0x76, 0x14, 0x56, 0x41, 0xb8, 0xd6, 0x9a, 0xf1, 0xc6, 0xcd, 0x74, 0xe3, 0xa6, 0x95, 0x46,
	0x86, 0xf5, 0xc4, 0xdb, 0x0a, 0xd1, 0xb7, 0x50, 0x76, 0x7d, 0x87, 0x5d, 0xb2, 0x78, 0x6d, 0xf9,
	0xce, 0xb5, 0x90, 0xba, 0x5b, 0x21, 0x3a, 0x84, 0x2d, 0x87, 0x4e, 0x28, 0xa7, 0xc3, 0x0e, 0x23,
	0x12, 0xcd, 0xc2, 0xea, 0x86, 0x00, 0x78, 0x9a, 0x89, 0xb3, 0x9d, 0x78, 0x0c, 0x84, 0x03, 0xae,
	0x38, 0x39, 0x19, 0x7d, 0x02, 0xf0, 0x8e, 0xd1, 0x6b, 0x7b, 0xe4, 0xcf, 0xbc, 0xa8, 0x5a, 0x11,
	0x67, 0xd7, 0xb9, 0xe6, 0x88, 0x2b, 0xd0, 0xe7, 0xa0, 0x86, 0xfe, 0x2c, 0x18, 0xd1, 0xea, 0xd6,
	0x9e, 0xdc, 0x28, 0xef, 0x3f, 0x5e, 0x61, 0x60, 0x20, 0x8c, 0x38, 0x71, 0x42, 0x4f, 0xa0, 0xf4,
	0xce, 0x8f, 0xa8, 0x3d, 0x9b, 0x56, 0xb7, 0x05, 0x94, 0xca, 0xc5, 0xe1, 0x14, 0x3d, 0x03, 0x5d,
	0x18, 0x1c, 0xff, 0xda, 0xab, 0x22, 0x61, 0xd2, 0xb8, 0xa2, 0xed, 0x5f, 0x7b, 0xe8, 0xa7, 0x20,
	0xd3, 0x79, 0x54, 0x7d, 0x24, 0x76, 0x78, 0x94, 0xd9, 0xc1, 0x9c, 0x47, 0xa6, 0x17, 0x05, 0x0b,
	0xcc, 0xed, 0xe8, 0x73, 0xd0, 0xa3, 0xab, 0x99, 0xfb, 0xc6, 0x23, 0x6c, 0x52, 0x7d, 0x2c, 0x9c,
	0x6f, 0x25, 0x64, 0xe9, 0x51, 0xfb, 0xab, 0x0c, 0x95, 0xfc, 0xe1, 0xd1, 0x31, 0x6c, 0xbb, 0x24,
	0x78, 0x4b, 0x1d, 0x5b, 0xb0, 0x10, 0x73, 0x5e, 0xb8, 0x93, 0xf3, 0xad, 0x78, 0x51, 0x3b, 0x5e,
	0x63, 0x85, 0xe8, 0x14, 0xd0, 0x94, 0x7a, 0x0e, 0xf3, 0xc6, 0x59, 0x20, 0xe9, 0x4e, 0x20, 0x23,
	0x59, 0xb5, 0x44, 0x3a, 0x86, 0x6d, 0x32, 0x8a, 0x66, 0x64, 0x92, 0x05, 0x92, 0xef, 0x8e, 0x28,
	0x5e, 0xb4, 0xc4, 0xa9, 0x42, 0xc9, 0xa1, 0x11, 0x61, 0x93, 0xb0, 0xaa, 0xec, 0x15, 0x1a, 0x3a,
	0x4e, 0x45, 0xf4, 0x35, 0xa8, 0x01, 0x25, 0xa1, 0xef, 0x55, 0x8b, 0x7b, 0x85, 0x46, 0x65, 0x7f,
	0xef, 0xbd, 0xb5, 0xd1, 0xc4, 0xc2, 0x0f, 0x27, 0xfe, 0xe8, 0xc7, 0xa0, 0x47, 0xd4, 0x9d, 0xfa,
	0x01, 0x09, 0x16, 0x55, 0x75, 0xaf, 0xd0, 0xd0, 0xf0, 0x52, 0x51, 0xff, 0x0a, 0xd4, 0xd8, 0x1f,
	0x95, 0xa1, 0x34, 0xec, 0xfd, 0xb6, 0x77, 0xf1, 0xba, 0x67, 0xfc, 0x08, 0x69, 0xa0, 0xf4, 0x2e,
	0x7a, 0xa6, 0x51, 0x40, 0x08, 0x2a, 0x78, 0xd8, 0x35, 0xed, 0x57, 0x9d, 0x8b, 0x6e, 0xcb, 0xea,
	0x5c, 0xf4, 0x0c, 0xa9, 0xf6, 0xf7, 0x02, 0xc0, 0xb2, 0x6c, 0x90, 0x01, 0xf2, 0x2c, 0x98, 0x88,
	0x0c, 0xe8, 0x98, 0x7f, 0xa2, 0x1a, 0x68, 0x01, 0xbd, 0xa4, 0x41, 0x40, 0x03, 0xc1, 0xa7, 0x8e,
	0x6f, 0xe4, 0x95, 0x6b, 0x26, 0xdf, 0xe7, 0x9a, 0x3d, 0x81, 0xd2, 0x2c, 0xa4, 0x01, 0xbf, 0xde,
	0x4a, 0x5c, 0x97, 0x5c, 0xec, 0x38, 0x08, 0x81, 0xe2, 0x11, 0x97, 0x0a, 0x6e, 0x74, 0x2c, 0xbe,
	0x6b, 0x5d, 0xd0, 0xd2, 0xc2, 0xe3, 0x11, 0xbe, 0xa5, 0x8b, 0x34, 0xc2, 0xb7, 0x74, 0x81, 0x9e,
	0x43, 0xf1, 0x1d, 0x99, 0xcc, 0x68, 0x92, 0xee, 0x9d, 0x5b, 0x01, 0xb4, 0xbc, 0x05, 0x8e, 0x5d,
	0x7e, 0x2d, 0x7d, 0x5d, 0xa8, 0xfd, 0x4f, 0x02, 0x85, 0x1f, 0x19, 0xed, 0x40, 0x91, 0x79, 0x0e,
	0x9d, 0xa7, 0x0d, 0x46, 0x08, 0x3c, 0x80, 0x90, 0xfd, 0x31, 0x46, 0x93, 0xb1, 0xf8, 0x46, 0x0d,
	0x50, 0x5c, 0xe6, 0x52, 0x71, 0xc4, 0xca, 0xfe, 0xce, 0x4a, 0x8d, 0x37, 0xcf, 0x99, 0x4b, 0xb1,
	0xf0, 0xe0, 0x98, 0xd7, 0xcc, 0x89, 0xae, 0x92, 0x53, 0xc5, 0x02, 0xda, 0x05, 0xf5, 0x8a, 0xb2,
	0xf1, 0x55, 0x24, 0x8e, 0x25, 0xe3, 0x44, 0x5a, 0x21, 0x50, 0xfd, 0x80, 0x3e, 0x55, 0xba, 0x57,
	0x9f, 0xfa, 0x16, 0x2a, 0xc4, 0x63, 0xae, 0xe8, 0xdb, 0x36, 0xf3, 0x2e, 0xfd, 0xaa, 0x96, 0x70,
	0x17, 0x9f, 0xac, 0x95, 0x1a, 0x3b, 0xde, 0xa5, 0x8f, 0x37, 0x49, 0x56, 0xac, 0x7f, 0x03, 0x0a,
	0x3f, 0xf0, 0xad, 0x2a, 0x3b, 0xeb, 0x9b, 0x27, 0x46, 0x01, 0x95, 0x40, 0x3e, 0xe9, 0x1c, 0x1b,
	0x12, 0xff, 0xe8, 0xf7, 0x4e, 0x0c, 0x99, 0xdb, 0x5e, 0x9b, 0x87, 0xe7, 0x86, 0x72, 0xa6, 0x68,
	0x92, 0x21, 0x9f, 0x29, 0x9a, 0x2c, 0xbe, 0x15, 0xa3, 0x78, 0xa6, 0x68, 0x45, 0x43, 0x3d, 0x53,
	0x34, 0xdd, 0x80, 0x33, 0x45, 0xdb, 0x34, 0x2a, 0x67, 0x8a, 0x66, 0x18, 0xdb, 0x67, 0x8a, 0xb6,
	0x63, 0x3c, 0xae, 0xff, 0x47, 0x02, 0xad, 0xcf, 0xdb, 0x3e, 0xf5, 0xa2, 0xf7, 0x0d, 0x84, 0x06,
	0x28, 0xd1, 0x62, 0x1a, 0xe7, 0x2b, 0x97, 0x1b, 0xb1, 0xaa, 0x69, 0x2d, 0xa6, 0x14, 0x0b, 0x0f,
	0x9e, 0x9b, 0xb8, 0x50, 0x78, 0x1a, 0x37, 0x92, 0x92, 0x40, 0x9f, 0x41, 0xd9, 0x19, 0x45, 0x5f,
	0xd8, 0x42, 0xe2, 0x97, 0x55, 0x6e, 0x48, 0x87, 0x92, 0x51, 0xc0, 0xc0, 0xd5, 0xaf, 0x84, 0x16,
	0x3d, 0x8f, 0x1b, 0x62, 0x51, 0xf4, 0xb8, 0xea, 0xea, 0x1e, 0xb9, 0xae, 0xf8, 0xc3, 0x56, 0x6b,
	0xfd, 0x02, 0x14, 0x7e, 0x84, 0x5b, 0x6c, 0x0f, 0x4e, 0x5b, 0x5f, 0xc6, 0x24, 0x9f, 0xb7, 0x0f,
	0x0c, 0x19, 0xe9, 0x50, 0x6c, 0x1f, 0x59, 0xf6, 0x17, 0x86, 0x82, 0x2a, 0x00, 0x83, 0xd3, 0xd6,
	0xc1, 0x97, 0xfb, 0xf6, 0xfe, 0xc1, 0x4b, 0xa3, 0x58, 0x57, 0xb4, 0x82, 0x51, 0x78, 0xae, 0x0e,
	0x4e, 0x5b, 0xfb, 0x07, 0x2f, 0xeb, 0xc7, 0xb0, 0x99, 0x4b, 0x2f, 0x3a, 0x00, 0x2d, 0x9d, 0xe1,
	0x49, 0xeb, 0x7d, 0x7a, 0x2b, 0xa8, 0x76, 0xe2, 0x80, 0x6f, 0x5c, 0xeb, 0xff, 0x92, 0x40, 0xb6,
	0xc8, 0x98, 0xa7, 0x25, 0x22, 0xe3, 0x4c, 0x5a, 0x22, 0x32, 0xce, 0xdc, 0x63, 0x69, 0x79, 0x8f,
	0xd1, 0xa7, 0x50, 0x9e, 0x85, 0x64, 0x4c, 0x93, 0xd9, 0x26, 0x0b, 0x7f, 0x10, 0xaa, 0x78, 0xb8,
	0x7d, 0xac, 0xfb, 0x90, 0xcc, 0x3b, 0x2d, 0x37, 0xef, 0x2c, 0x32, 0x7e, 0xd0, 0xcc, 0xfe, 0x57,
	0x02, 0xb5, 0xcf, 0x46, 0x09, 0x87, 0xdf, 0x55, 0xda, 0x4b, 0x6a, 0xa5, 0xef, 0xa2, 0x56, 0xce,
	0x50, 0x9b, 0xe9, 0xa7, 0x5a, 0xae, 0x9f, 0x7e, 0x2c, 0x4a, 0x1b, 0x31, 0xa5, 0xba, 0xa0, 0x74,
	0x77, 0x79, 0x63, 0x1e, 0x9a, 0xd5, 0xbf, 0xc8, 0x00, 0x7d, 0x36, 0x3a, 0xf2, 0x5d, 0xf7, 0x7b,
	0x9a, 0xc6, 0x27, 0x00, 0xa3, 0xd8, 0x63, 0xc9, 0xae, 0x9e, 0x68, 0x3a, 0x0e, 0x7a, 0x0e, 0xdb,
	0xa9, 0x79, 0x4a, 0x82, 0xc4, 0x2b, 0x2e, 0xd7, 0xad, 0xc4, 0xd0, 0x17, 0xfa, 0x8e, 0xf3, 0xbd,
	0x93, 0x2c, 0xe2, 0x14, 0x94, 0xe2, 0x34, 0xf1, 0xef, 0x95, 0x6c, 0x14, 0x3f, 0x20, 0x1b, 0xea,
	0xbd, 0xb2, 0xf1, 0xcb, 0x6c, 0x81, 0xd7, 0x96, 0xd9, 0x48, 0x68, 0x7a, 0xd0, 0x8c, 0xfc, 0x49,
	0x86, 0x52, 0x9f, 0x8d, 0x5e, 0xf9, 0x11, 0x7d, 0x5f, 0x3a, 0x32, 0x1c, 0x4a, 0x39, 0x0e, 0x7f,
	0x0e, 0x0a, 0x7f, 0x94, 0x26, 0x83, 0x37, 0xf3, 0x12, 0xe5, 0x68, 0x4d, 0xfe, 0x07, 0x0b, 0x87,
	0x15, 0x62, 0x95, 0x0f, 0x20, 0xb6, 0x78, 0x2f, 0x62, 0x7f, 0x11, 0x13, 0xab, 0x0a, 0x62, 0x9f,
	0xac, 0xc4, 0xf7, 0x90, 0xac, 0xee, 0x83, 0x22, 0x18, 0xcd, 0xcd, 0x05, 0x15, 0xa4, 0x61, 0xdf,
	0x28, 0xf0, 0xf9, 0xd0, 0xe6, 0x1a, 0x89, 0x9b, 0x7b, 0xe6, 0xd0, 0xc2, 0xad, 0xae, 0x21, 0xd7,
	0xff, 0xa9, 0x82, 0x32, 0x0c, 0x69, 0x90, 0xe5, 0xbb, 0x90, 0xe3, 0x7b, 0x17, 0xd4, 0x90, 0x8e,
	0x02, 0x1a, 0x89, 0x30, 0x36, 0x70, 0x22, 0x89, 0xa7, 0x12, 0x1f, 0x75, 0x49, 0xcf, 0x89, 0x85,
	0x8f, 0x46, 0xfa, 0x6f, 0x60, 0x63, 0x42, 0xc2, 0xc8, 0x0e, 0x29, 0xf5, 0xd6, 0xbc, 0x0b, 0xdc,
	0x7f, 0x40, 0xa9, 0x67, 0x85, 0xe8, 0x25, 0xc0, 0x88, 0x4c, 0xc9, 0x1b, 0x36, 0x61, 0xd1, 0xa2,
	0x5a, 0xda, 0x93, 0x1b, 0x95, 0x9b, 0x06, 0xc5, 0xd9, 0x69, 0x1e, 0xdd, 0x58, 0x71, 0xc6, 0x13,
	0xd5, 0x61, 0xd3, 0xa3, 0xf3, 0xc8, 0x8e, 0xfc, 0xb7, 0xd4, 0x5b, 0x36, 0xda, 0x32, 0x57, 0x5a,
	0x5c, 0xd7, 0x71, 0xd0, 0x0b, 0x00, 0x41, 0xac, 0xf0, 0x49, 0x9a, 0x9f, 0x91, 0xc1, 0x16, 0x7e,
	0x58, 0x9f, 0xa5, 0x9f, 0xe8, 0x67, 0x71, 0xfd, 0x80, 0xf0, 0xdc, 0xc9, 0x46, 0xf1, 0x90, 0xc5,
	0xf3, 0x0f, 0x09, 0x60, 0x79, 0xca, 0x7c, 0x0d, 0x55, 0x00, 0xfa, 0x9d, 0x23, 0xfb, 0x08, 0x9b,
	0x2d, 0x8b, 0xff, 0x6a, 0xd8, 0x00, 0x8d, 0xcb, 0xd8, 0x6c, 0xb5, 0x0d, 0x09, 0x6d, 0x82, 0xce,
	0xa5, 0x4e, 0xaf, 0x6d, 0xfe, 0xce, 0x90, 0xd1, 0x23, 0xd8, 0xe2, 0xe2, 0xe0, 0xe2, 0xd8, 0xb2,
	0xdb, 0x66, 0xd7, 0xb4, 0x4c, 0xa3, 0x98, 0x2a, 0x4f, 0x5b, 0xb8, 0x9d, 0x2a, 0xd5, 0x74, 0x61,
	0x7f, 0x88, 0x4f, 0x4c, 0xa3, 0x84, 0x9e, 0xc1, 0x13, 0x2e, 0x0e, 0xfb, 0xed, 0x96, 0xc5, 0x7f,
	0x91, 0x98, 0xaf, 0xed, 0xa3, 0x8b, 0x61, 0xcf, 0x32, 0xb1, 0xa1, 0xf1, 0x1f, 0x2a, 0xdc, 0x68,
	0xb5, 0x4e, 0xd2, 0x30, 0x74, 0xb4, 0x0b, 0x48, 0x84, 0x75, 0x71, 0x7e, 0x6e, 0xf6, 0xac, 0x54,
	0x0f, 0xe9, 0x66, 0xaf, 0x2e, 0x2c, 0x33, 0x55, 0x96, 0xd1, 0x16, 0x94, 0x87, 0x03, 0x13, 0xa7,
	0x0a, 0x05, 0xd5, 0x60, 0x57, 0x28, 0x92, 0xfd, 0x8e, 0x5a, 0xfd, 0xd6, 0x61, 0xa7, 0xdb, 0xb1,
	0x7e, 0x6f, 0x6c, 0xf0, 0xdd, 0x84, 0x8d, 0x9f, 0xd0, 0x1e, 0x98, 0xdd, 0x63, 0x63, 0x13, 0x6d,
	0xc3, 0xe6, 0x52, 0xd7, 0xea, 0x76, 0x8d, 0x4a, 0xfd, 0x6f, 0x05, 0xd0, 0x6f, 0x52, 0x88, 0x9e,
	0x82, 0x76, 0x53, 0x07, 0xf1, 0x15, 0x2a, 0x45, 0x49, 0x0d, 0xe4, 0x6f, 0x85, 0x74, 0x9f, 0x5b,
	0xb1, 0x5a, 0xd8, 0xf2, 0x7d, 0x0a, 0xbb, 0xfe, 0xef, 0x12, 0x6c, 0x1e, 0xf9, 0xde, 0x25, 0x1b,
	0x27, 0x6f, 0x34, 0xd4, 0x01, 0xe4, 0x32, 0xcf, 0x4e, 0x67, 0xd9, 0x84, 0x7a, 0xe3, 0xe8, 0x2a,
	0x79, 0xe4, 0x3d, 0xbb, 0x85, 0xda, 0xf1, 0xa2, 0x97, 0xbf, 0x12, 0x0f, 0x5e, 0x6c, 0xb8, 0xcc,
	0x4b, 0x66, 0x43, 0x57, 0x2c, 0x12, 0x50, 0x64, 0xbe, 0x0a, 0x25, 0xad, 0x03, 0x45, 0xe6, 0x79,
	0x28, 0x13, 0x38, 0xbc, 0x2d, 0x7a, 0x48, 0x0a, 0x24, 0xdf, 0x0d, 0x54, 0x71, 0x99, 0x27, 0xde,
	0xdb, 0x19, 0x18, 0x32, 0xcf, 0xc3, 0x28, 0xeb, 0xc0, 0x90, 0x79, 0x16, 0xa6, 0x0b, 0x3b, 0x3c,
	0x9a, 0x4b, 0x36, 0xa1, 0x36, 0x7f, 0x4a, 0xa5, 0x50, 0xc5, 0xbb, 0xa1, 0xb6, 0x5d, 0xe6, 0xf1,
	0x1f, 0x80, 0x3d, 0xe2, 0xd2, 0x0c, 0x1a, 0x99, 0xdf, 0x46, 0x53, 0xd7, 0x41, 0x23, 0xf3, 0x15,
	0xb4, 0x16, 0xf0, 0x43, 0xdb, 0xb3, 0x60, 0x92, 0xe2, 0x94, 0xee, 0xc6, 0xd9, 0x70, 0x99, 0x37,
	0x0c, 0x26, 0x19, 0x08, 0x32, 0xcf, 0x42, 0x68, 0xeb, 0x40, 0x90, 0x79, 0x1e, 0x82, 0x79, 0x36,
	0x7f, 0x8a, 0x26, 0x10, 0xfa, 0x7a, 0x51, 0x58, 0x64, 0x9c, 0x8f, 0x22, 0x03, 0x01, 0xeb, 0x45,
	0xb1, 0x84, 0x18, 0xc2, 0x0e, 0xf1, 0x7c, 0x6f, 0xe1, 0xfa, 0xb3, 0xd0, 0xce, 0x34, 0xf0, 0xf8,
	0x3f, 0x74, 0xf5, 0xa4, 0x75, 0xe6, 0xea, 0x3f, 0xd3, 0xc9, 0x07, 0x34, 0xc2, 0x8f, 0x6e, 0xd6,
	0x67, 0x7a, 0x1f, 0x86, 0x47, 0x1e, 0xbd, 0xb6, 0x45, 0xd7, 0xce, 0xa0, 0x6e, 0xac, 0x8d, 0xba,
	0xed, 0xd1, 0x6b, 0xde, 0x17, 0x96, 0xda, 0xda, 0x09, 0x6c, 0xe6, 0x7c, 0x56, 0x46, 0x4e, 0x61,
	0xdd, 0x91, 0x73, 0xa8, 0xfd, 0x41, 0x0d, 0x47, 0x57, 0xd4, 0x25, 0x6f, 0x54, 0x41, 0xd0, 0x57,
	0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf6, 0x83, 0x3d, 0xae, 0x15, 0x00, 0x00,
}
